diff --git a/doc/arkode/guide/source/Usage/ARKStep/ASA.rst b/doc/arkode/guide/source/Usage/ARKStep/ASA.rst
index 19cf1d5..19d8ba9 100644
--- a/doc/arkode/guide/source/Usage/ARKStep/ASA.rst
+++ b/doc/arkode/guide/source/Usage/ARKStep/ASA.rst
@@ -3,7 +3,7 @@
 Adjoint Sensitivity Analysis
 ============================
 
-The previous sections discuss using ARKStep for the intergation of forward ODE models.
+The previous sections discuss using ARKStep for the integration of forward ODE models.
 This section discusses how to use ARKStep for adjoint sensitivity analysis as introduced
 in :numref:`ARKODE.Mathematics.ASA`. To use ARKStep for ASA, users simply setup the forward
 integration as usual (following :numref:`ARKODE.Usage.Skeleton`) with one exception:
diff --git a/doc/arkode/guide/source/sunadjoint/index.rst b/doc/arkode/guide/source/sunadjoint/index.rst
index 5ccb245..2bf1e71 100644
--- a/doc/arkode/guide/source/sunadjoint/index.rst
+++ b/doc/arkode/guide/source/sunadjoint/index.rst
@@ -21,8 +21,8 @@ Adjoint Sensitivity Analysis
 
 The ``SUNAdjoint`` API consists of a few customizable modules that provide a framework for adjoint
 sensitivity analysis (ASA). The API itself does not implement ASA, but it provides a common
-interface for ASA capabilties implemented in the SUNDIALS packages. Right now it supports :ref:`the
-ASA capabilties in ARKODE <ARKODE.Mathematics.ASA>`, while the ASA capabilities in :ref:`CVODES
+interface for ASA capabilities implemented in the SUNDIALS packages. Right now it supports :ref:`the
+ASA capabilities in ARKODE <ARKODE.Mathematics.ASA>`, while the ASA capabilities in :ref:`CVODES
 <CVODES.Mathematics.ASA>` and :ref:`IDAS <IDAS.Mathematics.ASA>` must be used directly.
 *Users should read the package specific sections on ASA capabilities before this section.*
 
diff --git a/doc/shared/sunadjoint/SUNAdjointCheckpointScheme.rst b/doc/shared/sunadjoint/SUNAdjointCheckpointScheme.rst
index d9e9635..116a2da 100644
--- a/doc/shared/sunadjoint/SUNAdjointCheckpointScheme.rst
+++ b/doc/shared/sunadjoint/SUNAdjointCheckpointScheme.rst
@@ -15,7 +15,7 @@
 The SUNAdjointCheckpointScheme API
 ==================================
 
-The :c:type:`SUNAdjointCheckpointScheme` base class provides an inteface for checkpointing
+The :c:type:`SUNAdjointCheckpointScheme` base class provides an interface for checkpointing
 states during forward integration and accessing them as needed during the backwards integration
 of the adjoint model.
 
diff --git a/doc/shared/sunadjoint/SUNAdjointStepper.rst b/doc/shared/sunadjoint/SUNAdjointStepper.rst
index e43ed8d..c5881d7 100644
--- a/doc/shared/sunadjoint/SUNAdjointStepper.rst
+++ b/doc/shared/sunadjoint/SUNAdjointStepper.rst
@@ -189,7 +189,7 @@ The :c:type:`SUNAdjointStepper` class has the following functions:
 .. c:function:: SUNErrCode SUNAdjointStepper_SetJacFn(SUNAdjointStepper adj_stepper, SUNJacFn JacFn, \
       SUNMatrix Jac, SUNJacFn JacPFn, SUNMatrix JacP)
 
-   Sets the function pointers and matrices needed to evluate and store :math:`df/dy` and
+   Sets the function pointers and matrices needed to evaluate and store :math:`df/dy` and
    :math:`df/dp`. ``Jac`` should have dimensions ``neq x neq`` where ``neq`` is the number of states
    in the forward problem. ``JacP`` should have dimensions ``nparams x neq`` where ``nparams`` is the
    number of parameters in the model to get sensitivities for.
diff --git a/doc/superbuild/source/sunadjoint/index.rst b/doc/superbuild/source/sunadjoint/index.rst
index 1f2337c..81974fc 100644
--- a/doc/superbuild/source/sunadjoint/index.rst
+++ b/doc/superbuild/source/sunadjoint/index.rst
@@ -21,8 +21,8 @@ Adjoint Sensitivity Analysis
 
 The ``SUNAdjoint`` API consists of a few customizable modules that provide a framework for adjoint
 sensitivity analysis (ASA). The API itself does not implement ASA, but it provides a common
-interface for ASA capabilties implemented in the SUNDIALS packages. Right now it supports :ref:`the
-ASA capabilties in ARKODE <ARKODE.Mathematics.ASA>`, while the ASA capabilities in :ref:`CVODES
+interface for ASA capabilities implemented in the SUNDIALS packages. Right now it supports :ref:`the
+ASA capabilities in ARKODE <ARKODE.Mathematics.ASA>`, while the ASA capabilities in :ref:`CVODES
 <CVODES.Mathematics.ASA>` and :ref:`IDAS <IDAS.Mathematics.ASA>` must be used directly.
 
 .. toctree::
diff --git a/examples/cvodes/serial/cvsLotkaVolterra_ASA.c b/examples/cvodes/serial/cvsLotkaVolterra_ASA.c
index 1d84348..d825b54 100644
--- a/examples/cvodes/serial/cvsLotkaVolterra_ASA.c
+++ b/examples/cvodes/serial/cvsLotkaVolterra_ASA.c
@@ -17,7 +17,7 @@
   * The initial condition is u(t_0) = 1.0 and we use the parameters
   * p  = [1.5, 1.0, 3.0, 1.0]. The integration interval is t \in [0, 10.].
   * The implicit BDF method from CVODES is used to solve the forward problem.
-  * Afterwards, the continuous adjoint sensitivity analysis capabilites of CVODES
+  * Afterwards, the continuous adjoint sensitivity analysis capabilities of CVODES
   * are used to obtain the gradient of the cost function,
   *
   *    g(u(t_f), p) = (sum(u)^2) / 2
@@ -242,7 +242,7 @@ int main(int argc, char* argv[])
   if (check_retval(&retval, "CVodeSetLinearSolver", 1)) { return 1; }
 
   /* Call CVodeQuadInitB to allocate internal memory and initialize backward
-     quadrature integration. This gives the sensitivites w.r.t. the parameters. */
+     quadrature integration. This gives the sensitivities w.r.t. the parameters. */
   retval = CVodeQuadInitB(cvode_mem, which, quad_rhs, qB);
   if (check_retval(&retval, "CVodeQuadInitB", 1)) { return (1); }
 
diff --git a/src/sundials/sundials_datanode.h b/src/sundials/sundials_datanode.h
index c567338..115780e 100644
--- a/src/sundials/sundials_datanode.h
+++ b/src/sundials/sundials_datanode.h
@@ -9,7 +9,7 @@
  * SPDX-License-Identifier: BSD-3-Clause
  * SUNDIALS Copyright End
  * -----------------------------------------------------------------
- * SUNDataNode class definition. A SUNDataNode is a hirearchical
+ * SUNDataNode class definition. A SUNDataNode is a hierarchical
  * object that can hold arbitrary data in arbitrary storage locations.
  * The data may be held directly (a leaf node) or indirectly by
  * holding references to child nodes (list or object nodes). A
