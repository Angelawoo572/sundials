#! /usr/bin/env python

# Author: Chris White (white238@llnl.gov)

import exceptions, os, subprocess, sys

def main():
    if len(sys.argv) != 2:
        error("testRunner expects 1 argument, " + str(len(sys.argv)) + " given.")

    testName = sys.argv[1]
    testDir = os.path.dirname(sys.argv[0])
    outDir = os.path.join(testDir, "output")
    answersDir = os.path.join(testDir, "answers")
    outPath = os.path.join(outDir, testName)
    answerPath = os.path.join(answersDir, testName)

    if not os.path.exists(outDir):
        os.makedirs(outDir)
    elif not os.path.isdir(outDir):
        error("Output directory exists but is not a directory, it must be deleted.", outDir)

    args = getArgs(testName, testDir)

    outFile = open(outPath, 'w')
    try:
        if args != "":
            testCommand = "./" + testName + " " + args
        else:
            testCommand = "./" + testName
        testCommand = testCommand.split(" ")
        process = subprocess.Popen(testCommand, stdout=outFile, stderr=outFile)
        process.wait()
        if process.returncode != 0:
            error("Exited with error code " + str(process.returncode) + ".", testName)
        if not os.path.exists(answerPath):
            error("Answer file did not exist.", answerPath)
        if not os.path.isfile(answerPath):
            error("Answer file existed but was not a file.", answerPath)
        compare(outPath, answerPath)
    finally:
        outFile.close()

    print "Test passed."
    sys.exit(0)

def compare(outPath, answerPath):
    #Note: This functions strips all lines of leading and trailing whitespace and blank lines.  Then it
    #      compares each line against the answer file.  This will need to be rewritten to handle differences
    #      in floating point numbers.
    outLines = stripLines(open(outPath, 'r').readlines())
    answerLines = stripLines(open(answerPath, 'r').readlines())
    diffCount = 0

    if len(outLines) != len(answerLines):
        error("Line count is not equal (blank lines ignored):\n" + str(len(outLines)) + ":" + outPath + "\n" + str(len(answerLines)) + ":" + answerPath)

    for i, outLine in enumerate(outLines):
        answerLine = answerLines[i]
        if not compareLines(outLine, answerLine):
            diffCount != 1
            print "Difference:\n  Output: " + outLine + "\n  Answer: " + answerLine + "\n\n"
    if diffCount != 0:
        error(diffCount + " line differences found.", sys.argv[1])

def compareLines(outLine, answerLine):
    outTokens = tokenizeLine(outLine)
    answerTokens = tokenizeLine(answerLine)
    if len(outTokens) != len(answerTokens):
        return False
    for i, outValue in enumerate(outTokens):
        answerValue = answerTokens[i]
        outIsInt, outInt = isInt(outValue)
        if outIsInt:
            answerIsInt, answerInt = isInt(answerValue)
            if not answerIsInt or (outInt != answerInt):
                return False
        else:
            outIsFloat, outFloat = isFloat(outValue)
            if outIsFloat:
                answerIsFloat, answerFloat = isFloat(answerValue)
                if not answerIsFloat or (outFloat != answerFloat):
                    return False
            elif outValue != answerValue:
                return False
    return True

def isInt(value):
    try:
        return True, int(value)
    except exceptions.ValueError:
        return False, 0

def isFloat(value):
    try:
        return True, float(value)
    except exceptions.ValueError:
        return False, 0

tokenDelimiters = ['\t', ' ', '=']

def tokenizeLine(line):
    tokens = []
    currLine = line
    while(currLine != ""):
        tokenEnd = 1
        length = len(currLine)
        while (tokenEnd < length):
            if currLine[tokenEnd] in tokenDelimiters:
                break
            tokenEnd += 1
        tokens.append(currLine[0:tokenEnd])
        currLine = currLine[tokenEnd:]
        if (currLine != ""):
            tokens.append(currLine[0:1])
            currLine = currLine[1:]
    return tokens

def error(message, path=""):
    if path:
        print "Error: " + path + ": " + message
    else:
        print "Error: " + message
    sys.exit(1)

def stripLines(lines):
    strippedLines = []
    for line in lines:
        strippedLine = line.strip()
        if strippedLine != "":
            strippedLines.append(strippedLine)
    return strippedLines

def getArgs(testName, testDir):
    argsPath = os.path.join(testDir, "testArgs")
    loweredTestName = testName.lower()
    args = ""

    if os.path.exists(argsPath):
        lines = stripLines(open(argsPath, 'r').readlines())
        for line in lines:
            if line.startswith('#'):
                continue
            argPair = line.split(':', 1)
            currName = argPair[0].strip().lower()
            currArgs = argPair[1].strip()
            if currName == loweredTestName:
                if args != "":
                    error(testName + " has more than one argument line found. Remove the incorrect line from the test argument file.", argsPath)
                args = currArgs

    return args

if __name__ == "__main__":
    main()
