/* -----------------------------------------------------------------
 * Programmer(s): Cody J. Balos @ LLNL
 * -----------------------------------------------------------------
 * SUNDIALS Copyright Start
 * Copyright (c) 2002-2021, Lawrence Livermore National Security
 * and Southern Methodist University.
 * All rights reserved.
 *
 * See the top-level LICENSE and NOTICE files for details.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 * SUNDIALS Copyright End
 * -----------------------------------------------------------------
 * This is the header file for the KINSOL python interface layer
 * that is not automatically generated by SWIG.
 * -----------------------------------------------------------------*/

#ifndef _KINSOL_PY_H
#define _KINSOL_PY_H

#include <kinsol/kinsol.h>

#ifdef __cplusplus  /* wrapper to enable C++ usage */
extern "C" {
#endif

/* REMINDER: To make a new callback function usable from Python we must:
    1. Add the definition for a wrapper function pointer here.
    2. Add member for the new function pointer in the KINPyUserFunctionRegistry in kinsol_py.c.
    3. Add the director and register functions for the wrapper in kinsol_py.c.
    4. Add its ctype to cfunctypes class in kinsol.i.
    5. Add it to kinsol_callbacks.i.
*/

/*
 * TODO: can we autogenerate the below??
 */

typedef int (*KINPySysFn)(realtype* uu, sunindextype uu_len, realtype* fval, sunindextype fval_len, void* user_data);
SUNDIALS_EXPORT KINSysFn KINPyRegister_KINPySysFn(KINPySysFn f);

typedef KINErrHandlerFn KINPyErrHandlerFn;
SUNDIALS_EXPORT KINErrHandlerFn KINPyRegister_KINPyErrHandlerFn(KINPyErrHandlerFn f);

typedef KINInfoHandlerFn KINPyInfoHandlerFn;
SUNDIALS_EXPORT KINInfoHandlerFn KINPyRegister_KINPyInfoHandlerFn(KINPyInfoHandlerFn f);

typedef int (*KINPyLsJacFn)(realtype* u, sunindextype u_len, realtype* fu,
                            realtype* J, sunindextype J_len, void* user_data,
                            realtype* tmp1, realtype* tmp2);
SUNDIALS_EXPORT KINLsJacFn KINPyRegister_KINPyLsJacFn(KINPyLsJacFn f);

// typedef int (*KINLsPrecSetupFn)(N_Vector uu, N_Vector uscale,
//                                 N_Vector fval, N_Vector fscale,
//                                 void *user_data);

// typedef int (*KINLsPrecSolveFn)(N_Vector uu, N_Vector uscale,
//                                 N_Vector fval, N_Vector fscale,
//                                 N_Vector vv, void *user_data);

// typedef int (*KINLsJacTimesVecFn)(N_Vector v, N_Vector Jv, N_Vector uu,
//                                   booleantype *new_uu, void *J_data);

#ifdef __cplusplus  /* wrapper to enable C++ usage */
}
#endif

#endif