                   SensPVODE: Installation and Usage
                   Steven L. Lee and Alan C. Hindmarsh
                   25 August 2000


CVODE [1, 2] is a solver for stiff and nonstiff ODE problems written
in the C language. PVODE refers to a set of extensions of CVODE for
parallel machines, using message-passing. MPI_PVODE is a version of
PVODE that uses the MPI (Message Passage Interface) system. SensPVODE
is a variant of MPI_PVODE that includes options for simultaneously
computing the ODE solution together with the first-order sensitivity
coefficients with respect to problem parameters.  The underlying ODE
system is dy/dt = f(t,y,p), having size Ny and Np scalar parameters
p[i].  With SensPVODE one can compute the sensitivities 
s_i = partial y / partial p[i] for i = 1,...,Ns, where Ns <= Np.  
The user provides scale factors pbar[i], and SensPVODE actually
computes w_i = pbar[i] * s_i.

In addition to the basic solver, this package includes a module called
PVBBDPRE, which provides a band-block-diagonal preconditioner.

SensPVODE has been tested on a workstation cluster. In the package
supplied here, the makefiles are set up to access a workstation
cluster but changes for other environments can be made easily.

For use with Fortran applications, a set of Fortran/C interface
routines is also supplied. These are written in C, but assume the
user calling program and all user-supplied routines are in Fortran.

The notes below provide instructions for the installation of the
SensPVODE package, and give the locations of user documentation.
Following that is a summary of the usage of SensPVODE in a C
application (without PVBBDPRE).


A. Installation Notes for SensPVODE
-----------------------------------

1. A tar file  senspvode.tar  is provided.  To un-tar, type
   'tar xvf senspvode.tar' in an appropriate working directory.
   This generates a directory /SensPVODE there, containing this file
   README and six subdirectories.

2. /SensPVODE/source contains source files for SensPVODE, and a
   makefile. Typing 'make' there generates all associated object files,
   within the same subdirectory, and a library file libpvode.a in the
   subdirectory /SensPVODE/lib.
   NOTE: Typing 'make -f Makefile.nosens' generates the associated object
   files for the original MPI_PVODE solver and sets it up as a library
   file libpvode.a in the subdirectory /SensPVODE/lib.

3. /SensPVODE/include contains all required header files for SensPVODE.

4. /SensPVODE/examples contains 6 example programs and a makefile.
   Also included are sample outputs for the examples.
   The first three examples solve problems without performing sensitivity 
   calculations, while the last three solve the same problems with sensitivities.

   (a) pvnx.c has an ODE system based on a 1-D PDE problem, solved with
   the nonstiff option.
   (b) pvkx.c has an ODE system based on a 2-D 2-species reaction-transport
   PDE problem, solved with the stiff (BDF) method and the preconditioned
   Krylov linear system method (SPGMR).
   (c) pvkxb.c solves the same problem as pvkx.c, but uses the band-
   block-diagonal preconditioner package PVBBDPRE (see below).
   (d) spvnx.c computes the ODE solution for pvnx.c and the sensitivity
   of the solution with respect to 2 problem parameters.
   (e) spvkx.c computes the ODE solution for pvkx.c and the sensitivity
   of the solution with respect to 2 problem parameters.
   (f) spvkxb.c computes the ODE solution for pvkxb.c and the sensitivity
   of the solution with respect to 1 of the problem parameters.
   Typing 'make pvnx', 'make pvkx', 'make pvkxb', 'make spvnx', 'make
   spvkx', or 'make spvkxb' in /SensPVODE/examples finds the required .a 
   and .h files, etc. and generates the corresponding executable file.  
   See the initial comments in each example source file for details on 
   the ODE problem and its parameters.   
   For a user application to be run in a different location, the
   makefile provided here can be used with minor modifications.

5. /SensPVODE/precon contains source and header files for the PVBBDPRE
   preconditioner package, which can be used in conjunction with SensPVODE.
   This package builds and solves a band-block-diagonal preconditioner
   from user-supplied functions.  See pvbbdpre.h for details, including
   usage documentation.  A makefile is supplied, and typing 'make' there
   generates object files needed.

6. /SensPVODE/fcmix contains a package of Fortran/C interfaces which
   allow a Fortran application to use SensPVODE, with or without the
   PVBBDPRE preconditioner module.  A makefile is supplied, and typing
   'make' generates a library file with these interfaces.  
   Usage documentation for these interfaces are contained in sensfpvode.h 
   (for use of SensPVODE) and sensfpvbbd.h (for SensPVODE with PVBBDPRE).
   The header file fcmixpar.h contains two machine-dependent parameters
   that are used to define interface function names.  Check, and
   if necessary modify, those parameter values for a given machine.
   The subdirectory /SensPVODE/fcmix/examples contains 3 PVODE examples
   (diagnf, diagkf, diagkbf) and 3 SensPVODE examples (sdiagnf,
   sdiagkf, sdiagkbf). The latter solve the PVODE example problems and
   compute sensitivity information as well.
   A makefile generates the executable file for each example.
   Sample output for each example is also included.
   NOTE: The example programs are in double precision Fortran; for a 
   long-wordlength machine, these should be converted to single precision.

7. /SensPVODE/doc contains a Postscript file for the User Document [5].

8. The files provided are independent of the machine environment, with 
   minor exceptions, assuming only the availability of the tar utility,
   and the MPI system.  The exceptions are the makefiles and the file
   fcmixpar.h, which are specific to one particular machine environment.
   Comments in these files describe parameters to be changed for a
   different environment.


B. Summary of Usage of SensPVODE
--------------------------------

The following is a brief summary of SensPVODE usage.
SensPVODE computes the solution of an ODE system of size Ny together
with the sensitivities of the solution with respect to Ns of its
parameters.
Normally, the total system size is expected to be Ntotal = (1+Ns)*Ny.

1.  #include several header files so that various data types, macros,
    and enumerations can be used: cvode.h, nvector.h, sensitivity.h, etc.
    Also, #define or set the integer variables Ny, Np, Ns, and Ntotal.

2.  Define a pointer to a user-defined data block (e.g., f_data) that is
    passed to the user's f(..) routine. This data block must include a real 
    pointer (e.g., p) that points to the array of real parameters used 
    by f(..) to evaluate y' = f(t,y,p). 
    In particular, f_data->p[i-1] = p_i, for i = 1,...,Np.

3.  MPI_Init(..);  /* to initialize MPI */

4.  Set Nlocal = local vector length for this processor, Ny = global
    vector length for this processor. Note that Ny is the sum of all 
    values of Nlocal.

5.  machEnv = PVecInitMPI(comm, Nlocal, Ny, &argc, &argv);
     /* comm = MPI communicator (if set up by user), or
        comm = MPI_COMM_WORLD (specifying all processors)
        &argc, &argv = pointers to command line argument count and arrays
                       (if MPI not already initialized)  */
    if (machEnv == NULL) return(1);
    ...

6.  Set an array of real values pbar[i] that are used to scale the Ns
    sensitivity vectors. Each pbar[i] must be set to a nonzero constant.
    Typically, pbar[i] = f_data->p[i] whenever f_data->p[i] is nonzero.

7.  Set the vector u of Ntotal initial values. If udata contains all
    initial values of u, then call u = SensN_VMAKE(Ntotal, udata, machEnv);.
    Otherwise, call u = N_VNew(Ntotal, machEnv);.
    To load the i-th sensitivity vector, use 
    usub = N_VSUB(u); N_VDATA(usub[i]) = wdata;, where wdata is an existing
    data array of length Ny. Note that usub[0] is a pointer to the N-Vector
    of ODE variables.

8.  For the case of vector tolerances for absolute error control, a 
    typical default is to use the same atol as for the ODE variables. Use
    SensSetVecAtol(atol, Ns); to do this. Then, alter the resulting vector
    elements if desired.

9.  cvmem = SensCVodeMalloc(..);
    /* initializes SensPVODE */
    if (cvmem == NULL) return(1);
    ...

10.  SensCVSpgmr(..) /* if Newton iteration is chosen. */
    ...

11. ier = CVode(cvmem, tout, u, &t, itask);  /* in loop over tout values */
    ...
    /* Note: The desired sensitivity vectors s_i can be obtained by */
    /* scaling usub[i] by 1/pbar[i].                                */

12  SensCVodeFree(cvmem);   /* Free CVODE memory independent of machine */
    ...

13. N_VFree(u); or SensN_VDISPOSE(Ntotal, u); /* Free the solution vector u */

14. free(pbar); free(f_data->p); free(f_data);
    /* User frees arrays containing scaling factors, parameters, and */
    /* the user's data block                                         */

15. PVecFreeMPI(machEnv);   /* Free machine-dependent stuff */

16. MPI_Finalize();

Usage Notes:

1) See the file sens_nvector.h for documentation of PVecInitMPI, N_VNew,
   N_VSUB, SensN_VMAKE, SensSetVecAtol, SensCVodeMalloc, SensCVodeFree, 
   N_VFree, SensN_VDISPOSE, and PVecFreeMPI (in steps 5, 7, 8, 9, 12, 13).


2) See the paper [4] for setting up ODE problems to be solved by
   PVODE. Then, examine the heavily-annotated SensPVODE example
   programs to see the modifications needed for computing sensitivity
   information using SensPVODE.

3) SensPVODE can be called from a C++ application, by virtue of wrappers
   around all SensPVODE header files specifying C-style naming of functions.


References
----------

[1] S. D. Cohen and A. C. Hindmarsh, CVODE User Guide, Lawrence
    Livermore National Laboratory report UCRL-MA-118618, September 1994.

[2] S. D. Cohen and A. C. Hindmarsh, CVODE, A Stiff/Nonstiff ODE Solver
    in C, Computers in Physics, vol. 10, no. 2 (March 1996), pp. 138-143.

[3] A. C. Hindmarsh and A. G. Taylor, PVODE and KINSOL: Parallel Software
    for Differential and Nonlinear Systems, LLNL Report UCRL-ID-129739,
    February 1998.

[4] George D. Byrne and Alan C. Hindmarsh, User Documentation for PVODE,
    an ODE Solver for Parallel Computers, LLNL Report UCRL-ID-130884,
    May 1998.

[5] S. L. Lee, A. C. Hindmarsh and P. N. Brown, User Documentation for
    SensPVODE, A Variant of PVODE for Sensitivity Analysis, LLNL
    Report UCRL-MA-140211, August 22 2000.

/*......................................................................

                            LEGAL NOTICES

This work was performed at the University of California, Lawrence
Livermore National Laboratory (UC LLNL) under contract no.
W-7405-ENG-48 (Contract 48) between the U.S. Department of Energy
(DOE) and The Regents of the University of California (the University)
for the operation of UC LLNL. The rights of the Federal Government are 
reserved under Contract 48 subject to the restrictions agreed upon by the 
DOE and University as allowed under DOE Acquisition Letter 97-1.

Recipients of SensPVODE are requested to contact the author before
further disseminating the package.

This work was prepared as an account of work sponsored by an agency of
the United States Government.  Neither the United States Government
nor the University of California nor any of their empolyees makes any
warranty, express or implied, or assumes any liability or
responsibility for the accuracy, completeness, or usefulness of any
information, apparatus, product, or process disclosed, or represents
that its use would not infringe privately owned rights.  Reference
herein to any specific commercial products, process, or service by
trade name, trademark, manufacturer, or otherwise, does not
necessarily constitute or imply its endorsement, recommendation, or
favoring by the United States Government or the University of
California.  The views and opinions of authors expressed herein do not
necessarily state or reflect those of the United States Government or
the University of California, and shall not be used for advertising or
product endorsement purposes.

......................................................................*/
