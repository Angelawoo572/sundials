# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_kinsol')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_kinsol')
    _kinsol = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_kinsol', [dirname(__file__)])
        except ImportError:
            import _kinsol
            return _kinsol
        try:
            _mod = imp.load_module('_kinsol', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _kinsol = swig_import_helper()
    del swig_import_helper
else:
    import _kinsol
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

try:
    import weakref
    weakref_proxy = weakref.proxy
except __builtin__.Exception:
    weakref_proxy = lambda x: x


SUNFALSE = _kinsol.SUNFALSE
SUNTRUE = _kinsol.SUNTRUE
SUNDIALS_NVEC_SERIAL = _kinsol.SUNDIALS_NVEC_SERIAL
SUNDIALS_NVEC_PARALLEL = _kinsol.SUNDIALS_NVEC_PARALLEL
SUNDIALS_NVEC_OPENMP = _kinsol.SUNDIALS_NVEC_OPENMP
SUNDIALS_NVEC_PTHREADS = _kinsol.SUNDIALS_NVEC_PTHREADS
SUNDIALS_NVEC_PARHYP = _kinsol.SUNDIALS_NVEC_PARHYP
SUNDIALS_NVEC_PETSC = _kinsol.SUNDIALS_NVEC_PETSC
SUNDIALS_NVEC_CUDA = _kinsol.SUNDIALS_NVEC_CUDA
SUNDIALS_NVEC_HIP = _kinsol.SUNDIALS_NVEC_HIP
SUNDIALS_NVEC_SYCL = _kinsol.SUNDIALS_NVEC_SYCL
SUNDIALS_NVEC_RAJA = _kinsol.SUNDIALS_NVEC_RAJA
SUNDIALS_NVEC_OPENMPDEV = _kinsol.SUNDIALS_NVEC_OPENMPDEV
SUNDIALS_NVEC_TRILINOS = _kinsol.SUNDIALS_NVEC_TRILINOS
SUNDIALS_NVEC_MANYVECTOR = _kinsol.SUNDIALS_NVEC_MANYVECTOR
SUNDIALS_NVEC_MPIMANYVECTOR = _kinsol.SUNDIALS_NVEC_MPIMANYVECTOR
SUNDIALS_NVEC_MPIPLUSX = _kinsol.SUNDIALS_NVEC_MPIPLUSX
SUNDIALS_NVEC_CUSTOM = _kinsol.SUNDIALS_NVEC_CUSTOM
class N_Vector_Ops(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, N_Vector_Ops, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, N_Vector_Ops, name)
    __repr__ = _swig_repr
    __swig_setmethods__["nvgetvectorid"] = _kinsol.N_Vector_Ops_nvgetvectorid_set
    __swig_getmethods__["nvgetvectorid"] = _kinsol.N_Vector_Ops_nvgetvectorid_get
    if _newclass:
        nvgetvectorid = _swig_property(_kinsol.N_Vector_Ops_nvgetvectorid_get, _kinsol.N_Vector_Ops_nvgetvectorid_set)
    __swig_setmethods__["nvclone"] = _kinsol.N_Vector_Ops_nvclone_set
    __swig_getmethods__["nvclone"] = _kinsol.N_Vector_Ops_nvclone_get
    if _newclass:
        nvclone = _swig_property(_kinsol.N_Vector_Ops_nvclone_get, _kinsol.N_Vector_Ops_nvclone_set)
    __swig_setmethods__["nvcloneempty"] = _kinsol.N_Vector_Ops_nvcloneempty_set
    __swig_getmethods__["nvcloneempty"] = _kinsol.N_Vector_Ops_nvcloneempty_get
    if _newclass:
        nvcloneempty = _swig_property(_kinsol.N_Vector_Ops_nvcloneempty_get, _kinsol.N_Vector_Ops_nvcloneempty_set)
    __swig_setmethods__["nvdestroy"] = _kinsol.N_Vector_Ops_nvdestroy_set
    __swig_getmethods__["nvdestroy"] = _kinsol.N_Vector_Ops_nvdestroy_get
    if _newclass:
        nvdestroy = _swig_property(_kinsol.N_Vector_Ops_nvdestroy_get, _kinsol.N_Vector_Ops_nvdestroy_set)
    __swig_setmethods__["nvspace"] = _kinsol.N_Vector_Ops_nvspace_set
    __swig_getmethods__["nvspace"] = _kinsol.N_Vector_Ops_nvspace_get
    if _newclass:
        nvspace = _swig_property(_kinsol.N_Vector_Ops_nvspace_get, _kinsol.N_Vector_Ops_nvspace_set)
    __swig_setmethods__["nvgetarraypointer"] = _kinsol.N_Vector_Ops_nvgetarraypointer_set
    __swig_getmethods__["nvgetarraypointer"] = _kinsol.N_Vector_Ops_nvgetarraypointer_get
    if _newclass:
        nvgetarraypointer = _swig_property(_kinsol.N_Vector_Ops_nvgetarraypointer_get, _kinsol.N_Vector_Ops_nvgetarraypointer_set)
    __swig_setmethods__["nvgetdevicearraypointer"] = _kinsol.N_Vector_Ops_nvgetdevicearraypointer_set
    __swig_getmethods__["nvgetdevicearraypointer"] = _kinsol.N_Vector_Ops_nvgetdevicearraypointer_get
    if _newclass:
        nvgetdevicearraypointer = _swig_property(_kinsol.N_Vector_Ops_nvgetdevicearraypointer_get, _kinsol.N_Vector_Ops_nvgetdevicearraypointer_set)
    __swig_setmethods__["nvsetarraypointer"] = _kinsol.N_Vector_Ops_nvsetarraypointer_set
    __swig_getmethods__["nvsetarraypointer"] = _kinsol.N_Vector_Ops_nvsetarraypointer_get
    if _newclass:
        nvsetarraypointer = _swig_property(_kinsol.N_Vector_Ops_nvsetarraypointer_get, _kinsol.N_Vector_Ops_nvsetarraypointer_set)
    __swig_setmethods__["nvgetcommunicator"] = _kinsol.N_Vector_Ops_nvgetcommunicator_set
    __swig_getmethods__["nvgetcommunicator"] = _kinsol.N_Vector_Ops_nvgetcommunicator_get
    if _newclass:
        nvgetcommunicator = _swig_property(_kinsol.N_Vector_Ops_nvgetcommunicator_get, _kinsol.N_Vector_Ops_nvgetcommunicator_set)
    __swig_setmethods__["nvgetlength"] = _kinsol.N_Vector_Ops_nvgetlength_set
    __swig_getmethods__["nvgetlength"] = _kinsol.N_Vector_Ops_nvgetlength_get
    if _newclass:
        nvgetlength = _swig_property(_kinsol.N_Vector_Ops_nvgetlength_get, _kinsol.N_Vector_Ops_nvgetlength_set)
    __swig_setmethods__["nvlinearsum"] = _kinsol.N_Vector_Ops_nvlinearsum_set
    __swig_getmethods__["nvlinearsum"] = _kinsol.N_Vector_Ops_nvlinearsum_get
    if _newclass:
        nvlinearsum = _swig_property(_kinsol.N_Vector_Ops_nvlinearsum_get, _kinsol.N_Vector_Ops_nvlinearsum_set)
    __swig_setmethods__["nvconst"] = _kinsol.N_Vector_Ops_nvconst_set
    __swig_getmethods__["nvconst"] = _kinsol.N_Vector_Ops_nvconst_get
    if _newclass:
        nvconst = _swig_property(_kinsol.N_Vector_Ops_nvconst_get, _kinsol.N_Vector_Ops_nvconst_set)
    __swig_setmethods__["nvprod"] = _kinsol.N_Vector_Ops_nvprod_set
    __swig_getmethods__["nvprod"] = _kinsol.N_Vector_Ops_nvprod_get
    if _newclass:
        nvprod = _swig_property(_kinsol.N_Vector_Ops_nvprod_get, _kinsol.N_Vector_Ops_nvprod_set)
    __swig_setmethods__["nvdiv"] = _kinsol.N_Vector_Ops_nvdiv_set
    __swig_getmethods__["nvdiv"] = _kinsol.N_Vector_Ops_nvdiv_get
    if _newclass:
        nvdiv = _swig_property(_kinsol.N_Vector_Ops_nvdiv_get, _kinsol.N_Vector_Ops_nvdiv_set)
    __swig_setmethods__["nvscale"] = _kinsol.N_Vector_Ops_nvscale_set
    __swig_getmethods__["nvscale"] = _kinsol.N_Vector_Ops_nvscale_get
    if _newclass:
        nvscale = _swig_property(_kinsol.N_Vector_Ops_nvscale_get, _kinsol.N_Vector_Ops_nvscale_set)
    __swig_setmethods__["nvabs"] = _kinsol.N_Vector_Ops_nvabs_set
    __swig_getmethods__["nvabs"] = _kinsol.N_Vector_Ops_nvabs_get
    if _newclass:
        nvabs = _swig_property(_kinsol.N_Vector_Ops_nvabs_get, _kinsol.N_Vector_Ops_nvabs_set)
    __swig_setmethods__["nvinv"] = _kinsol.N_Vector_Ops_nvinv_set
    __swig_getmethods__["nvinv"] = _kinsol.N_Vector_Ops_nvinv_get
    if _newclass:
        nvinv = _swig_property(_kinsol.N_Vector_Ops_nvinv_get, _kinsol.N_Vector_Ops_nvinv_set)
    __swig_setmethods__["nvaddconst"] = _kinsol.N_Vector_Ops_nvaddconst_set
    __swig_getmethods__["nvaddconst"] = _kinsol.N_Vector_Ops_nvaddconst_get
    if _newclass:
        nvaddconst = _swig_property(_kinsol.N_Vector_Ops_nvaddconst_get, _kinsol.N_Vector_Ops_nvaddconst_set)
    __swig_setmethods__["nvdotprod"] = _kinsol.N_Vector_Ops_nvdotprod_set
    __swig_getmethods__["nvdotprod"] = _kinsol.N_Vector_Ops_nvdotprod_get
    if _newclass:
        nvdotprod = _swig_property(_kinsol.N_Vector_Ops_nvdotprod_get, _kinsol.N_Vector_Ops_nvdotprod_set)
    __swig_setmethods__["nvmaxnorm"] = _kinsol.N_Vector_Ops_nvmaxnorm_set
    __swig_getmethods__["nvmaxnorm"] = _kinsol.N_Vector_Ops_nvmaxnorm_get
    if _newclass:
        nvmaxnorm = _swig_property(_kinsol.N_Vector_Ops_nvmaxnorm_get, _kinsol.N_Vector_Ops_nvmaxnorm_set)
    __swig_setmethods__["nvwrmsnorm"] = _kinsol.N_Vector_Ops_nvwrmsnorm_set
    __swig_getmethods__["nvwrmsnorm"] = _kinsol.N_Vector_Ops_nvwrmsnorm_get
    if _newclass:
        nvwrmsnorm = _swig_property(_kinsol.N_Vector_Ops_nvwrmsnorm_get, _kinsol.N_Vector_Ops_nvwrmsnorm_set)
    __swig_setmethods__["nvwrmsnormmask"] = _kinsol.N_Vector_Ops_nvwrmsnormmask_set
    __swig_getmethods__["nvwrmsnormmask"] = _kinsol.N_Vector_Ops_nvwrmsnormmask_get
    if _newclass:
        nvwrmsnormmask = _swig_property(_kinsol.N_Vector_Ops_nvwrmsnormmask_get, _kinsol.N_Vector_Ops_nvwrmsnormmask_set)
    __swig_setmethods__["nvmin"] = _kinsol.N_Vector_Ops_nvmin_set
    __swig_getmethods__["nvmin"] = _kinsol.N_Vector_Ops_nvmin_get
    if _newclass:
        nvmin = _swig_property(_kinsol.N_Vector_Ops_nvmin_get, _kinsol.N_Vector_Ops_nvmin_set)
    __swig_setmethods__["nvwl2norm"] = _kinsol.N_Vector_Ops_nvwl2norm_set
    __swig_getmethods__["nvwl2norm"] = _kinsol.N_Vector_Ops_nvwl2norm_get
    if _newclass:
        nvwl2norm = _swig_property(_kinsol.N_Vector_Ops_nvwl2norm_get, _kinsol.N_Vector_Ops_nvwl2norm_set)
    __swig_setmethods__["nvl1norm"] = _kinsol.N_Vector_Ops_nvl1norm_set
    __swig_getmethods__["nvl1norm"] = _kinsol.N_Vector_Ops_nvl1norm_get
    if _newclass:
        nvl1norm = _swig_property(_kinsol.N_Vector_Ops_nvl1norm_get, _kinsol.N_Vector_Ops_nvl1norm_set)
    __swig_setmethods__["nvcompare"] = _kinsol.N_Vector_Ops_nvcompare_set
    __swig_getmethods__["nvcompare"] = _kinsol.N_Vector_Ops_nvcompare_get
    if _newclass:
        nvcompare = _swig_property(_kinsol.N_Vector_Ops_nvcompare_get, _kinsol.N_Vector_Ops_nvcompare_set)
    __swig_setmethods__["nvinvtest"] = _kinsol.N_Vector_Ops_nvinvtest_set
    __swig_getmethods__["nvinvtest"] = _kinsol.N_Vector_Ops_nvinvtest_get
    if _newclass:
        nvinvtest = _swig_property(_kinsol.N_Vector_Ops_nvinvtest_get, _kinsol.N_Vector_Ops_nvinvtest_set)
    __swig_setmethods__["nvconstrmask"] = _kinsol.N_Vector_Ops_nvconstrmask_set
    __swig_getmethods__["nvconstrmask"] = _kinsol.N_Vector_Ops_nvconstrmask_get
    if _newclass:
        nvconstrmask = _swig_property(_kinsol.N_Vector_Ops_nvconstrmask_get, _kinsol.N_Vector_Ops_nvconstrmask_set)
    __swig_setmethods__["nvminquotient"] = _kinsol.N_Vector_Ops_nvminquotient_set
    __swig_getmethods__["nvminquotient"] = _kinsol.N_Vector_Ops_nvminquotient_get
    if _newclass:
        nvminquotient = _swig_property(_kinsol.N_Vector_Ops_nvminquotient_get, _kinsol.N_Vector_Ops_nvminquotient_set)
    __swig_setmethods__["nvlinearcombination"] = _kinsol.N_Vector_Ops_nvlinearcombination_set
    __swig_getmethods__["nvlinearcombination"] = _kinsol.N_Vector_Ops_nvlinearcombination_get
    if _newclass:
        nvlinearcombination = _swig_property(_kinsol.N_Vector_Ops_nvlinearcombination_get, _kinsol.N_Vector_Ops_nvlinearcombination_set)
    __swig_setmethods__["nvscaleaddmulti"] = _kinsol.N_Vector_Ops_nvscaleaddmulti_set
    __swig_getmethods__["nvscaleaddmulti"] = _kinsol.N_Vector_Ops_nvscaleaddmulti_get
    if _newclass:
        nvscaleaddmulti = _swig_property(_kinsol.N_Vector_Ops_nvscaleaddmulti_get, _kinsol.N_Vector_Ops_nvscaleaddmulti_set)
    __swig_setmethods__["nvdotprodmulti"] = _kinsol.N_Vector_Ops_nvdotprodmulti_set
    __swig_getmethods__["nvdotprodmulti"] = _kinsol.N_Vector_Ops_nvdotprodmulti_get
    if _newclass:
        nvdotprodmulti = _swig_property(_kinsol.N_Vector_Ops_nvdotprodmulti_get, _kinsol.N_Vector_Ops_nvdotprodmulti_set)
    __swig_setmethods__["nvlinearsumvectorarray"] = _kinsol.N_Vector_Ops_nvlinearsumvectorarray_set
    __swig_getmethods__["nvlinearsumvectorarray"] = _kinsol.N_Vector_Ops_nvlinearsumvectorarray_get
    if _newclass:
        nvlinearsumvectorarray = _swig_property(_kinsol.N_Vector_Ops_nvlinearsumvectorarray_get, _kinsol.N_Vector_Ops_nvlinearsumvectorarray_set)
    __swig_setmethods__["nvscalevectorarray"] = _kinsol.N_Vector_Ops_nvscalevectorarray_set
    __swig_getmethods__["nvscalevectorarray"] = _kinsol.N_Vector_Ops_nvscalevectorarray_get
    if _newclass:
        nvscalevectorarray = _swig_property(_kinsol.N_Vector_Ops_nvscalevectorarray_get, _kinsol.N_Vector_Ops_nvscalevectorarray_set)
    __swig_setmethods__["nvconstvectorarray"] = _kinsol.N_Vector_Ops_nvconstvectorarray_set
    __swig_getmethods__["nvconstvectorarray"] = _kinsol.N_Vector_Ops_nvconstvectorarray_get
    if _newclass:
        nvconstvectorarray = _swig_property(_kinsol.N_Vector_Ops_nvconstvectorarray_get, _kinsol.N_Vector_Ops_nvconstvectorarray_set)
    __swig_setmethods__["nvwrmsnormvectorarray"] = _kinsol.N_Vector_Ops_nvwrmsnormvectorarray_set
    __swig_getmethods__["nvwrmsnormvectorarray"] = _kinsol.N_Vector_Ops_nvwrmsnormvectorarray_get
    if _newclass:
        nvwrmsnormvectorarray = _swig_property(_kinsol.N_Vector_Ops_nvwrmsnormvectorarray_get, _kinsol.N_Vector_Ops_nvwrmsnormvectorarray_set)
    __swig_setmethods__["nvwrmsnormmaskvectorarray"] = _kinsol.N_Vector_Ops_nvwrmsnormmaskvectorarray_set
    __swig_getmethods__["nvwrmsnormmaskvectorarray"] = _kinsol.N_Vector_Ops_nvwrmsnormmaskvectorarray_get
    if _newclass:
        nvwrmsnormmaskvectorarray = _swig_property(_kinsol.N_Vector_Ops_nvwrmsnormmaskvectorarray_get, _kinsol.N_Vector_Ops_nvwrmsnormmaskvectorarray_set)
    __swig_setmethods__["nvscaleaddmultivectorarray"] = _kinsol.N_Vector_Ops_nvscaleaddmultivectorarray_set
    __swig_getmethods__["nvscaleaddmultivectorarray"] = _kinsol.N_Vector_Ops_nvscaleaddmultivectorarray_get
    if _newclass:
        nvscaleaddmultivectorarray = _swig_property(_kinsol.N_Vector_Ops_nvscaleaddmultivectorarray_get, _kinsol.N_Vector_Ops_nvscaleaddmultivectorarray_set)
    __swig_setmethods__["nvlinearcombinationvectorarray"] = _kinsol.N_Vector_Ops_nvlinearcombinationvectorarray_set
    __swig_getmethods__["nvlinearcombinationvectorarray"] = _kinsol.N_Vector_Ops_nvlinearcombinationvectorarray_get
    if _newclass:
        nvlinearcombinationvectorarray = _swig_property(_kinsol.N_Vector_Ops_nvlinearcombinationvectorarray_get, _kinsol.N_Vector_Ops_nvlinearcombinationvectorarray_set)
    __swig_setmethods__["nvdotprodlocal"] = _kinsol.N_Vector_Ops_nvdotprodlocal_set
    __swig_getmethods__["nvdotprodlocal"] = _kinsol.N_Vector_Ops_nvdotprodlocal_get
    if _newclass:
        nvdotprodlocal = _swig_property(_kinsol.N_Vector_Ops_nvdotprodlocal_get, _kinsol.N_Vector_Ops_nvdotprodlocal_set)
    __swig_setmethods__["nvmaxnormlocal"] = _kinsol.N_Vector_Ops_nvmaxnormlocal_set
    __swig_getmethods__["nvmaxnormlocal"] = _kinsol.N_Vector_Ops_nvmaxnormlocal_get
    if _newclass:
        nvmaxnormlocal = _swig_property(_kinsol.N_Vector_Ops_nvmaxnormlocal_get, _kinsol.N_Vector_Ops_nvmaxnormlocal_set)
    __swig_setmethods__["nvminlocal"] = _kinsol.N_Vector_Ops_nvminlocal_set
    __swig_getmethods__["nvminlocal"] = _kinsol.N_Vector_Ops_nvminlocal_get
    if _newclass:
        nvminlocal = _swig_property(_kinsol.N_Vector_Ops_nvminlocal_get, _kinsol.N_Vector_Ops_nvminlocal_set)
    __swig_setmethods__["nvl1normlocal"] = _kinsol.N_Vector_Ops_nvl1normlocal_set
    __swig_getmethods__["nvl1normlocal"] = _kinsol.N_Vector_Ops_nvl1normlocal_get
    if _newclass:
        nvl1normlocal = _swig_property(_kinsol.N_Vector_Ops_nvl1normlocal_get, _kinsol.N_Vector_Ops_nvl1normlocal_set)
    __swig_setmethods__["nvinvtestlocal"] = _kinsol.N_Vector_Ops_nvinvtestlocal_set
    __swig_getmethods__["nvinvtestlocal"] = _kinsol.N_Vector_Ops_nvinvtestlocal_get
    if _newclass:
        nvinvtestlocal = _swig_property(_kinsol.N_Vector_Ops_nvinvtestlocal_get, _kinsol.N_Vector_Ops_nvinvtestlocal_set)
    __swig_setmethods__["nvconstrmasklocal"] = _kinsol.N_Vector_Ops_nvconstrmasklocal_set
    __swig_getmethods__["nvconstrmasklocal"] = _kinsol.N_Vector_Ops_nvconstrmasklocal_get
    if _newclass:
        nvconstrmasklocal = _swig_property(_kinsol.N_Vector_Ops_nvconstrmasklocal_get, _kinsol.N_Vector_Ops_nvconstrmasklocal_set)
    __swig_setmethods__["nvminquotientlocal"] = _kinsol.N_Vector_Ops_nvminquotientlocal_set
    __swig_getmethods__["nvminquotientlocal"] = _kinsol.N_Vector_Ops_nvminquotientlocal_get
    if _newclass:
        nvminquotientlocal = _swig_property(_kinsol.N_Vector_Ops_nvminquotientlocal_get, _kinsol.N_Vector_Ops_nvminquotientlocal_set)
    __swig_setmethods__["nvwsqrsumlocal"] = _kinsol.N_Vector_Ops_nvwsqrsumlocal_set
    __swig_getmethods__["nvwsqrsumlocal"] = _kinsol.N_Vector_Ops_nvwsqrsumlocal_get
    if _newclass:
        nvwsqrsumlocal = _swig_property(_kinsol.N_Vector_Ops_nvwsqrsumlocal_get, _kinsol.N_Vector_Ops_nvwsqrsumlocal_set)
    __swig_setmethods__["nvwsqrsummasklocal"] = _kinsol.N_Vector_Ops_nvwsqrsummasklocal_set
    __swig_getmethods__["nvwsqrsummasklocal"] = _kinsol.N_Vector_Ops_nvwsqrsummasklocal_get
    if _newclass:
        nvwsqrsummasklocal = _swig_property(_kinsol.N_Vector_Ops_nvwsqrsummasklocal_get, _kinsol.N_Vector_Ops_nvwsqrsummasklocal_set)
    __swig_setmethods__["nvbufsize"] = _kinsol.N_Vector_Ops_nvbufsize_set
    __swig_getmethods__["nvbufsize"] = _kinsol.N_Vector_Ops_nvbufsize_get
    if _newclass:
        nvbufsize = _swig_property(_kinsol.N_Vector_Ops_nvbufsize_get, _kinsol.N_Vector_Ops_nvbufsize_set)
    __swig_setmethods__["nvbufpack"] = _kinsol.N_Vector_Ops_nvbufpack_set
    __swig_getmethods__["nvbufpack"] = _kinsol.N_Vector_Ops_nvbufpack_get
    if _newclass:
        nvbufpack = _swig_property(_kinsol.N_Vector_Ops_nvbufpack_get, _kinsol.N_Vector_Ops_nvbufpack_set)
    __swig_setmethods__["nvbufunpack"] = _kinsol.N_Vector_Ops_nvbufunpack_set
    __swig_getmethods__["nvbufunpack"] = _kinsol.N_Vector_Ops_nvbufunpack_get
    if _newclass:
        nvbufunpack = _swig_property(_kinsol.N_Vector_Ops_nvbufunpack_get, _kinsol.N_Vector_Ops_nvbufunpack_set)
    __swig_setmethods__["nvprint"] = _kinsol.N_Vector_Ops_nvprint_set
    __swig_getmethods__["nvprint"] = _kinsol.N_Vector_Ops_nvprint_get
    if _newclass:
        nvprint = _swig_property(_kinsol.N_Vector_Ops_nvprint_get, _kinsol.N_Vector_Ops_nvprint_set)
    __swig_setmethods__["nvprintfile"] = _kinsol.N_Vector_Ops_nvprintfile_set
    __swig_getmethods__["nvprintfile"] = _kinsol.N_Vector_Ops_nvprintfile_get
    if _newclass:
        nvprintfile = _swig_property(_kinsol.N_Vector_Ops_nvprintfile_get, _kinsol.N_Vector_Ops_nvprintfile_set)

    def __init__(self):
        this = _kinsol.new_N_Vector_Ops()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kinsol.delete_N_Vector_Ops
    __del__ = lambda self: None
N_Vector_Ops_swigregister = _kinsol.N_Vector_Ops_swigregister
N_Vector_Ops_swigregister(N_Vector_Ops)

class N_Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, N_Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, N_Vector, name)
    __repr__ = _swig_repr
    __swig_setmethods__["content"] = _kinsol.N_Vector_content_set
    __swig_getmethods__["content"] = _kinsol.N_Vector_content_get
    if _newclass:
        content = _swig_property(_kinsol.N_Vector_content_get, _kinsol.N_Vector_content_set)
    __swig_setmethods__["ops"] = _kinsol.N_Vector_ops_set
    __swig_getmethods__["ops"] = _kinsol.N_Vector_ops_get
    if _newclass:
        ops = _swig_property(_kinsol.N_Vector_ops_get, _kinsol.N_Vector_ops_set)

    def __init__(self):
        this = _kinsol.new_N_Vector()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kinsol.delete_N_Vector
    __del__ = lambda self: None
N_Vector_swigregister = _kinsol.N_Vector_swigregister
N_Vector_swigregister(N_Vector)


def N_VNewEmpty():
    return _kinsol.N_VNewEmpty()
N_VNewEmpty = _kinsol.N_VNewEmpty

def N_VFreeEmpty(v):
    return _kinsol.N_VFreeEmpty(v)
N_VFreeEmpty = _kinsol.N_VFreeEmpty

def N_VCopyOps(w, v):
    return _kinsol.N_VCopyOps(w, v)
N_VCopyOps = _kinsol.N_VCopyOps

def N_VGetVectorID(w):
    return _kinsol.N_VGetVectorID(w)
N_VGetVectorID = _kinsol.N_VGetVectorID

def N_VClone(w):
    return _kinsol.N_VClone(w)
N_VClone = _kinsol.N_VClone

def N_VCloneEmpty(w):
    return _kinsol.N_VCloneEmpty(w)
N_VCloneEmpty = _kinsol.N_VCloneEmpty

def N_VDestroy(v):
    return _kinsol.N_VDestroy(v)
N_VDestroy = _kinsol.N_VDestroy

def N_VSpace(v, lrw, liw):
    return _kinsol.N_VSpace(v, lrw, liw)
N_VSpace = _kinsol.N_VSpace

def N_VGetArrayPointer(v):
    return _kinsol.N_VGetArrayPointer(v)
N_VGetArrayPointer = _kinsol.N_VGetArrayPointer

def N_VGetDeviceArrayPointer(v):
    return _kinsol.N_VGetDeviceArrayPointer(v)
N_VGetDeviceArrayPointer = _kinsol.N_VGetDeviceArrayPointer

def N_VSetArrayPointer(v_data, v):
    return _kinsol.N_VSetArrayPointer(v_data, v)
N_VSetArrayPointer = _kinsol.N_VSetArrayPointer

def N_VGetCommunicator(v):
    return _kinsol.N_VGetCommunicator(v)
N_VGetCommunicator = _kinsol.N_VGetCommunicator

def N_VGetLength(v):
    return _kinsol.N_VGetLength(v)
N_VGetLength = _kinsol.N_VGetLength

def N_VLinearSum(a, x, b, y, z):
    return _kinsol.N_VLinearSum(a, x, b, y, z)
N_VLinearSum = _kinsol.N_VLinearSum

def N_VConst(c, z):
    return _kinsol.N_VConst(c, z)
N_VConst = _kinsol.N_VConst

def N_VProd(x, y, z):
    return _kinsol.N_VProd(x, y, z)
N_VProd = _kinsol.N_VProd

def N_VDiv(x, y, z):
    return _kinsol.N_VDiv(x, y, z)
N_VDiv = _kinsol.N_VDiv

def N_VScale(c, x, z):
    return _kinsol.N_VScale(c, x, z)
N_VScale = _kinsol.N_VScale

def N_VAbs(x, z):
    return _kinsol.N_VAbs(x, z)
N_VAbs = _kinsol.N_VAbs

def N_VInv(x, z):
    return _kinsol.N_VInv(x, z)
N_VInv = _kinsol.N_VInv

def N_VAddConst(x, b, z):
    return _kinsol.N_VAddConst(x, b, z)
N_VAddConst = _kinsol.N_VAddConst

def N_VDotProd(x, y):
    return _kinsol.N_VDotProd(x, y)
N_VDotProd = _kinsol.N_VDotProd

def N_VMaxNorm(x):
    return _kinsol.N_VMaxNorm(x)
N_VMaxNorm = _kinsol.N_VMaxNorm

def N_VWrmsNorm(x, w):
    return _kinsol.N_VWrmsNorm(x, w)
N_VWrmsNorm = _kinsol.N_VWrmsNorm

def N_VWrmsNormMask(x, w, id):
    return _kinsol.N_VWrmsNormMask(x, w, id)
N_VWrmsNormMask = _kinsol.N_VWrmsNormMask

def N_VMin(x):
    return _kinsol.N_VMin(x)
N_VMin = _kinsol.N_VMin

def N_VWL2Norm(x, w):
    return _kinsol.N_VWL2Norm(x, w)
N_VWL2Norm = _kinsol.N_VWL2Norm

def N_VL1Norm(x):
    return _kinsol.N_VL1Norm(x)
N_VL1Norm = _kinsol.N_VL1Norm

def N_VCompare(c, x, z):
    return _kinsol.N_VCompare(c, x, z)
N_VCompare = _kinsol.N_VCompare

def N_VInvTest(x, z):
    return _kinsol.N_VInvTest(x, z)
N_VInvTest = _kinsol.N_VInvTest

def N_VConstrMask(c, x, m):
    return _kinsol.N_VConstrMask(c, x, m)
N_VConstrMask = _kinsol.N_VConstrMask

def N_VMinQuotient(num, denom):
    return _kinsol.N_VMinQuotient(num, denom)
N_VMinQuotient = _kinsol.N_VMinQuotient

def N_VLinearCombination(nvec, c, X, z):
    return _kinsol.N_VLinearCombination(nvec, c, X, z)
N_VLinearCombination = _kinsol.N_VLinearCombination

def N_VScaleAddMulti(nvec, a, x, Y, Z):
    return _kinsol.N_VScaleAddMulti(nvec, a, x, Y, Z)
N_VScaleAddMulti = _kinsol.N_VScaleAddMulti

def N_VDotProdMulti(nvec, x, Y, dotprods):
    return _kinsol.N_VDotProdMulti(nvec, x, Y, dotprods)
N_VDotProdMulti = _kinsol.N_VDotProdMulti

def N_VLinearSumVectorArray(nvec, a, X, b, Y, Z):
    return _kinsol.N_VLinearSumVectorArray(nvec, a, X, b, Y, Z)
N_VLinearSumVectorArray = _kinsol.N_VLinearSumVectorArray

def N_VScaleVectorArray(nvec, c, X, Z):
    return _kinsol.N_VScaleVectorArray(nvec, c, X, Z)
N_VScaleVectorArray = _kinsol.N_VScaleVectorArray

def N_VConstVectorArray(nvec, c, Z):
    return _kinsol.N_VConstVectorArray(nvec, c, Z)
N_VConstVectorArray = _kinsol.N_VConstVectorArray

def N_VWrmsNormVectorArray(nvec, X, W, nrm):
    return _kinsol.N_VWrmsNormVectorArray(nvec, X, W, nrm)
N_VWrmsNormVectorArray = _kinsol.N_VWrmsNormVectorArray

def N_VWrmsNormMaskVectorArray(nvec, X, W, id, nrm):
    return _kinsol.N_VWrmsNormMaskVectorArray(nvec, X, W, id, nrm)
N_VWrmsNormMaskVectorArray = _kinsol.N_VWrmsNormMaskVectorArray

def N_VScaleAddMultiVectorArray(nvec, nsum, a, X, Y, Z):
    return _kinsol.N_VScaleAddMultiVectorArray(nvec, nsum, a, X, Y, Z)
N_VScaleAddMultiVectorArray = _kinsol.N_VScaleAddMultiVectorArray

def N_VLinearCombinationVectorArray(nvec, nsum, c, X, Z):
    return _kinsol.N_VLinearCombinationVectorArray(nvec, nsum, c, X, Z)
N_VLinearCombinationVectorArray = _kinsol.N_VLinearCombinationVectorArray

def N_VDotProdLocal(x, y):
    return _kinsol.N_VDotProdLocal(x, y)
N_VDotProdLocal = _kinsol.N_VDotProdLocal

def N_VMaxNormLocal(x):
    return _kinsol.N_VMaxNormLocal(x)
N_VMaxNormLocal = _kinsol.N_VMaxNormLocal

def N_VMinLocal(x):
    return _kinsol.N_VMinLocal(x)
N_VMinLocal = _kinsol.N_VMinLocal

def N_VL1NormLocal(x):
    return _kinsol.N_VL1NormLocal(x)
N_VL1NormLocal = _kinsol.N_VL1NormLocal

def N_VWSqrSumLocal(x, w):
    return _kinsol.N_VWSqrSumLocal(x, w)
N_VWSqrSumLocal = _kinsol.N_VWSqrSumLocal

def N_VWSqrSumMaskLocal(x, w, id):
    return _kinsol.N_VWSqrSumMaskLocal(x, w, id)
N_VWSqrSumMaskLocal = _kinsol.N_VWSqrSumMaskLocal

def N_VInvTestLocal(x, z):
    return _kinsol.N_VInvTestLocal(x, z)
N_VInvTestLocal = _kinsol.N_VInvTestLocal

def N_VConstrMaskLocal(c, x, m):
    return _kinsol.N_VConstrMaskLocal(c, x, m)
N_VConstrMaskLocal = _kinsol.N_VConstrMaskLocal

def N_VMinQuotientLocal(num, denom):
    return _kinsol.N_VMinQuotientLocal(num, denom)
N_VMinQuotientLocal = _kinsol.N_VMinQuotientLocal

def N_VBufSize(x, size):
    return _kinsol.N_VBufSize(x, size)
N_VBufSize = _kinsol.N_VBufSize

def N_VBufPack(x, buf):
    return _kinsol.N_VBufPack(x, buf)
N_VBufPack = _kinsol.N_VBufPack

def N_VBufUnpack(x, buf):
    return _kinsol.N_VBufUnpack(x, buf)
N_VBufUnpack = _kinsol.N_VBufUnpack

def N_VNewVectorArray(count):
    return _kinsol.N_VNewVectorArray(count)
N_VNewVectorArray = _kinsol.N_VNewVectorArray

def N_VCloneEmptyVectorArray(count, w):
    return _kinsol.N_VCloneEmptyVectorArray(count, w)
N_VCloneEmptyVectorArray = _kinsol.N_VCloneEmptyVectorArray

def N_VCloneVectorArray(count, w):
    return _kinsol.N_VCloneVectorArray(count, w)
N_VCloneVectorArray = _kinsol.N_VCloneVectorArray

def N_VDestroyVectorArray(vs, count):
    return _kinsol.N_VDestroyVectorArray(vs, count)
N_VDestroyVectorArray = _kinsol.N_VDestroyVectorArray

def N_VGetVecAtIndexVectorArray(vs, index):
    return _kinsol.N_VGetVecAtIndexVectorArray(vs, index)
N_VGetVecAtIndexVectorArray = _kinsol.N_VGetVecAtIndexVectorArray

def N_VSetVecAtIndexVectorArray(vs, index, w):
    return _kinsol.N_VSetVecAtIndexVectorArray(vs, index, w)
N_VSetVecAtIndexVectorArray = _kinsol.N_VSetVecAtIndexVectorArray

def N_VPrint(v):
    return _kinsol.N_VPrint(v)
N_VPrint = _kinsol.N_VPrint

def N_VPrintFile(v, outfile):
    return _kinsol.N_VPrintFile(v, outfile)
N_VPrintFile = _kinsol.N_VPrintFile
SUNMATRIX_DENSE = _kinsol.SUNMATRIX_DENSE
SUNMATRIX_MAGMADENSE = _kinsol.SUNMATRIX_MAGMADENSE
SUNMATRIX_ONEMKLDENSE = _kinsol.SUNMATRIX_ONEMKLDENSE
SUNMATRIX_BAND = _kinsol.SUNMATRIX_BAND
SUNMATRIX_SPARSE = _kinsol.SUNMATRIX_SPARSE
SUNMATRIX_SLUNRLOC = _kinsol.SUNMATRIX_SLUNRLOC
SUNMATRIX_CUSPARSE = _kinsol.SUNMATRIX_CUSPARSE
SUNMATRIX_CUSTOM = _kinsol.SUNMATRIX_CUSTOM
class SUNMatrix_Ops(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SUNMatrix_Ops, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SUNMatrix_Ops, name)
    __repr__ = _swig_repr
    __swig_setmethods__["getid"] = _kinsol.SUNMatrix_Ops_getid_set
    __swig_getmethods__["getid"] = _kinsol.SUNMatrix_Ops_getid_get
    if _newclass:
        getid = _swig_property(_kinsol.SUNMatrix_Ops_getid_get, _kinsol.SUNMatrix_Ops_getid_set)
    __swig_setmethods__["clone"] = _kinsol.SUNMatrix_Ops_clone_set
    __swig_getmethods__["clone"] = _kinsol.SUNMatrix_Ops_clone_get
    if _newclass:
        clone = _swig_property(_kinsol.SUNMatrix_Ops_clone_get, _kinsol.SUNMatrix_Ops_clone_set)
    __swig_setmethods__["destroy"] = _kinsol.SUNMatrix_Ops_destroy_set
    __swig_getmethods__["destroy"] = _kinsol.SUNMatrix_Ops_destroy_get
    if _newclass:
        destroy = _swig_property(_kinsol.SUNMatrix_Ops_destroy_get, _kinsol.SUNMatrix_Ops_destroy_set)
    __swig_setmethods__["zero"] = _kinsol.SUNMatrix_Ops_zero_set
    __swig_getmethods__["zero"] = _kinsol.SUNMatrix_Ops_zero_get
    if _newclass:
        zero = _swig_property(_kinsol.SUNMatrix_Ops_zero_get, _kinsol.SUNMatrix_Ops_zero_set)
    __swig_setmethods__["copy"] = _kinsol.SUNMatrix_Ops_copy_set
    __swig_getmethods__["copy"] = _kinsol.SUNMatrix_Ops_copy_get
    if _newclass:
        copy = _swig_property(_kinsol.SUNMatrix_Ops_copy_get, _kinsol.SUNMatrix_Ops_copy_set)
    __swig_setmethods__["scaleadd"] = _kinsol.SUNMatrix_Ops_scaleadd_set
    __swig_getmethods__["scaleadd"] = _kinsol.SUNMatrix_Ops_scaleadd_get
    if _newclass:
        scaleadd = _swig_property(_kinsol.SUNMatrix_Ops_scaleadd_get, _kinsol.SUNMatrix_Ops_scaleadd_set)
    __swig_setmethods__["scaleaddi"] = _kinsol.SUNMatrix_Ops_scaleaddi_set
    __swig_getmethods__["scaleaddi"] = _kinsol.SUNMatrix_Ops_scaleaddi_get
    if _newclass:
        scaleaddi = _swig_property(_kinsol.SUNMatrix_Ops_scaleaddi_get, _kinsol.SUNMatrix_Ops_scaleaddi_set)
    __swig_setmethods__["matvecsetup"] = _kinsol.SUNMatrix_Ops_matvecsetup_set
    __swig_getmethods__["matvecsetup"] = _kinsol.SUNMatrix_Ops_matvecsetup_get
    if _newclass:
        matvecsetup = _swig_property(_kinsol.SUNMatrix_Ops_matvecsetup_get, _kinsol.SUNMatrix_Ops_matvecsetup_set)
    __swig_setmethods__["matvec"] = _kinsol.SUNMatrix_Ops_matvec_set
    __swig_getmethods__["matvec"] = _kinsol.SUNMatrix_Ops_matvec_get
    if _newclass:
        matvec = _swig_property(_kinsol.SUNMatrix_Ops_matvec_get, _kinsol.SUNMatrix_Ops_matvec_set)
    __swig_setmethods__["space"] = _kinsol.SUNMatrix_Ops_space_set
    __swig_getmethods__["space"] = _kinsol.SUNMatrix_Ops_space_get
    if _newclass:
        space = _swig_property(_kinsol.SUNMatrix_Ops_space_get, _kinsol.SUNMatrix_Ops_space_set)

    def __init__(self):
        this = _kinsol.new_SUNMatrix_Ops()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kinsol.delete_SUNMatrix_Ops
    __del__ = lambda self: None
SUNMatrix_Ops_swigregister = _kinsol.SUNMatrix_Ops_swigregister
SUNMatrix_Ops_swigregister(SUNMatrix_Ops)

class SUNMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SUNMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SUNMatrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["content"] = _kinsol.SUNMatrix_content_set
    __swig_getmethods__["content"] = _kinsol.SUNMatrix_content_get
    if _newclass:
        content = _swig_property(_kinsol.SUNMatrix_content_get, _kinsol.SUNMatrix_content_set)
    __swig_setmethods__["ops"] = _kinsol.SUNMatrix_ops_set
    __swig_getmethods__["ops"] = _kinsol.SUNMatrix_ops_get
    if _newclass:
        ops = _swig_property(_kinsol.SUNMatrix_ops_get, _kinsol.SUNMatrix_ops_set)

    def __init__(self):
        this = _kinsol.new_SUNMatrix()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kinsol.delete_SUNMatrix
    __del__ = lambda self: None
SUNMatrix_swigregister = _kinsol.SUNMatrix_swigregister
SUNMatrix_swigregister(SUNMatrix)


def SUNMatNewEmpty():
    return _kinsol.SUNMatNewEmpty()
SUNMatNewEmpty = _kinsol.SUNMatNewEmpty

def SUNMatFreeEmpty(A):
    return _kinsol.SUNMatFreeEmpty(A)
SUNMatFreeEmpty = _kinsol.SUNMatFreeEmpty

def SUNMatCopyOps(A, B):
    return _kinsol.SUNMatCopyOps(A, B)
SUNMatCopyOps = _kinsol.SUNMatCopyOps

def SUNMatGetID(A):
    return _kinsol.SUNMatGetID(A)
SUNMatGetID = _kinsol.SUNMatGetID

def SUNMatClone(A):
    return _kinsol.SUNMatClone(A)
SUNMatClone = _kinsol.SUNMatClone

def SUNMatDestroy(A):
    return _kinsol.SUNMatDestroy(A)
SUNMatDestroy = _kinsol.SUNMatDestroy

def SUNMatZero(A):
    return _kinsol.SUNMatZero(A)
SUNMatZero = _kinsol.SUNMatZero

def SUNMatCopy(A, B):
    return _kinsol.SUNMatCopy(A, B)
SUNMatCopy = _kinsol.SUNMatCopy

def SUNMatScaleAdd(c, A, B):
    return _kinsol.SUNMatScaleAdd(c, A, B)
SUNMatScaleAdd = _kinsol.SUNMatScaleAdd

def SUNMatScaleAddI(c, A):
    return _kinsol.SUNMatScaleAddI(c, A)
SUNMatScaleAddI = _kinsol.SUNMatScaleAddI

def SUNMatMatvecSetup(A):
    return _kinsol.SUNMatMatvecSetup(A)
SUNMatMatvecSetup = _kinsol.SUNMatMatvecSetup

def SUNMatMatvec(A, x, y):
    return _kinsol.SUNMatMatvec(A, x, y)
SUNMatMatvec = _kinsol.SUNMatMatvec

def SUNMatSpace(A, lenrw, leniw):
    return _kinsol.SUNMatSpace(A, lenrw, leniw)
SUNMatSpace = _kinsol.SUNMatSpace
SUNMAT_SUCCESS = _kinsol.SUNMAT_SUCCESS
SUNMAT_ILL_INPUT = _kinsol.SUNMAT_ILL_INPUT
SUNMAT_MEM_FAIL = _kinsol.SUNMAT_MEM_FAIL
SUNMAT_OPERATION_FAIL = _kinsol.SUNMAT_OPERATION_FAIL
SUNMAT_MATVEC_SETUP_REQUIRED = _kinsol.SUNMAT_MATVEC_SETUP_REQUIRED
PREC_NONE = _kinsol.PREC_NONE
PREC_LEFT = _kinsol.PREC_LEFT
PREC_RIGHT = _kinsol.PREC_RIGHT
PREC_BOTH = _kinsol.PREC_BOTH
MODIFIED_GS = _kinsol.MODIFIED_GS
CLASSICAL_GS = _kinsol.CLASSICAL_GS

def ModifiedGS(v, h, k, p, new_vk_norm):
    return _kinsol.ModifiedGS(v, h, k, p, new_vk_norm)
ModifiedGS = _kinsol.ModifiedGS

def ClassicalGS(v, h, k, p, new_vk_norm, stemp, vtemp):
    return _kinsol.ClassicalGS(v, h, k, p, new_vk_norm, stemp, vtemp)
ClassicalGS = _kinsol.ClassicalGS

def QRfact(n, h, q, job):
    return _kinsol.QRfact(n, h, q, job)
QRfact = _kinsol.QRfact

def QRsol(n, h, q, b):
    return _kinsol.QRsol(n, h, q, b)
QRsol = _kinsol.QRsol
SUNLINEARSOLVER_DIRECT = _kinsol.SUNLINEARSOLVER_DIRECT
SUNLINEARSOLVER_ITERATIVE = _kinsol.SUNLINEARSOLVER_ITERATIVE
SUNLINEARSOLVER_MATRIX_ITERATIVE = _kinsol.SUNLINEARSOLVER_MATRIX_ITERATIVE
SUNLINEARSOLVER_MATRIX_EMBEDDED = _kinsol.SUNLINEARSOLVER_MATRIX_EMBEDDED
SUNLINEARSOLVER_BAND = _kinsol.SUNLINEARSOLVER_BAND
SUNLINEARSOLVER_DENSE = _kinsol.SUNLINEARSOLVER_DENSE
SUNLINEARSOLVER_KLU = _kinsol.SUNLINEARSOLVER_KLU
SUNLINEARSOLVER_LAPACKBAND = _kinsol.SUNLINEARSOLVER_LAPACKBAND
SUNLINEARSOLVER_LAPACKDENSE = _kinsol.SUNLINEARSOLVER_LAPACKDENSE
SUNLINEARSOLVER_PCG = _kinsol.SUNLINEARSOLVER_PCG
SUNLINEARSOLVER_SPBCGS = _kinsol.SUNLINEARSOLVER_SPBCGS
SUNLINEARSOLVER_SPFGMR = _kinsol.SUNLINEARSOLVER_SPFGMR
SUNLINEARSOLVER_SPGMR = _kinsol.SUNLINEARSOLVER_SPGMR
SUNLINEARSOLVER_SPTFQMR = _kinsol.SUNLINEARSOLVER_SPTFQMR
SUNLINEARSOLVER_SUPERLUDIST = _kinsol.SUNLINEARSOLVER_SUPERLUDIST
SUNLINEARSOLVER_SUPERLUMT = _kinsol.SUNLINEARSOLVER_SUPERLUMT
SUNLINEARSOLVER_CUSOLVERSP_BATCHQR = _kinsol.SUNLINEARSOLVER_CUSOLVERSP_BATCHQR
SUNLINEARSOLVER_MAGMADENSE = _kinsol.SUNLINEARSOLVER_MAGMADENSE
SUNLINEARSOLVER_ONEMKLDENSE = _kinsol.SUNLINEARSOLVER_ONEMKLDENSE
SUNLINEARSOLVER_CUSTOM = _kinsol.SUNLINEARSOLVER_CUSTOM
class SUNLinearSolver_Ops(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SUNLinearSolver_Ops, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SUNLinearSolver_Ops, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gettype"] = _kinsol.SUNLinearSolver_Ops_gettype_set
    __swig_getmethods__["gettype"] = _kinsol.SUNLinearSolver_Ops_gettype_get
    if _newclass:
        gettype = _swig_property(_kinsol.SUNLinearSolver_Ops_gettype_get, _kinsol.SUNLinearSolver_Ops_gettype_set)
    __swig_setmethods__["getid"] = _kinsol.SUNLinearSolver_Ops_getid_set
    __swig_getmethods__["getid"] = _kinsol.SUNLinearSolver_Ops_getid_get
    if _newclass:
        getid = _swig_property(_kinsol.SUNLinearSolver_Ops_getid_get, _kinsol.SUNLinearSolver_Ops_getid_set)
    __swig_setmethods__["setatimes"] = _kinsol.SUNLinearSolver_Ops_setatimes_set
    __swig_getmethods__["setatimes"] = _kinsol.SUNLinearSolver_Ops_setatimes_get
    if _newclass:
        setatimes = _swig_property(_kinsol.SUNLinearSolver_Ops_setatimes_get, _kinsol.SUNLinearSolver_Ops_setatimes_set)
    __swig_setmethods__["setpreconditioner"] = _kinsol.SUNLinearSolver_Ops_setpreconditioner_set
    __swig_getmethods__["setpreconditioner"] = _kinsol.SUNLinearSolver_Ops_setpreconditioner_get
    if _newclass:
        setpreconditioner = _swig_property(_kinsol.SUNLinearSolver_Ops_setpreconditioner_get, _kinsol.SUNLinearSolver_Ops_setpreconditioner_set)
    __swig_setmethods__["setscalingvectors"] = _kinsol.SUNLinearSolver_Ops_setscalingvectors_set
    __swig_getmethods__["setscalingvectors"] = _kinsol.SUNLinearSolver_Ops_setscalingvectors_get
    if _newclass:
        setscalingvectors = _swig_property(_kinsol.SUNLinearSolver_Ops_setscalingvectors_get, _kinsol.SUNLinearSolver_Ops_setscalingvectors_set)
    __swig_setmethods__["setzeroguess"] = _kinsol.SUNLinearSolver_Ops_setzeroguess_set
    __swig_getmethods__["setzeroguess"] = _kinsol.SUNLinearSolver_Ops_setzeroguess_get
    if _newclass:
        setzeroguess = _swig_property(_kinsol.SUNLinearSolver_Ops_setzeroguess_get, _kinsol.SUNLinearSolver_Ops_setzeroguess_set)
    __swig_setmethods__["initialize"] = _kinsol.SUNLinearSolver_Ops_initialize_set
    __swig_getmethods__["initialize"] = _kinsol.SUNLinearSolver_Ops_initialize_get
    if _newclass:
        initialize = _swig_property(_kinsol.SUNLinearSolver_Ops_initialize_get, _kinsol.SUNLinearSolver_Ops_initialize_set)
    __swig_setmethods__["setup"] = _kinsol.SUNLinearSolver_Ops_setup_set
    __swig_getmethods__["setup"] = _kinsol.SUNLinearSolver_Ops_setup_get
    if _newclass:
        setup = _swig_property(_kinsol.SUNLinearSolver_Ops_setup_get, _kinsol.SUNLinearSolver_Ops_setup_set)
    __swig_setmethods__["solve"] = _kinsol.SUNLinearSolver_Ops_solve_set
    __swig_getmethods__["solve"] = _kinsol.SUNLinearSolver_Ops_solve_get
    if _newclass:
        solve = _swig_property(_kinsol.SUNLinearSolver_Ops_solve_get, _kinsol.SUNLinearSolver_Ops_solve_set)
    __swig_setmethods__["numiters"] = _kinsol.SUNLinearSolver_Ops_numiters_set
    __swig_getmethods__["numiters"] = _kinsol.SUNLinearSolver_Ops_numiters_get
    if _newclass:
        numiters = _swig_property(_kinsol.SUNLinearSolver_Ops_numiters_get, _kinsol.SUNLinearSolver_Ops_numiters_set)
    __swig_setmethods__["resnorm"] = _kinsol.SUNLinearSolver_Ops_resnorm_set
    __swig_getmethods__["resnorm"] = _kinsol.SUNLinearSolver_Ops_resnorm_get
    if _newclass:
        resnorm = _swig_property(_kinsol.SUNLinearSolver_Ops_resnorm_get, _kinsol.SUNLinearSolver_Ops_resnorm_set)
    __swig_setmethods__["lastflag"] = _kinsol.SUNLinearSolver_Ops_lastflag_set
    __swig_getmethods__["lastflag"] = _kinsol.SUNLinearSolver_Ops_lastflag_get
    if _newclass:
        lastflag = _swig_property(_kinsol.SUNLinearSolver_Ops_lastflag_get, _kinsol.SUNLinearSolver_Ops_lastflag_set)
    __swig_setmethods__["space"] = _kinsol.SUNLinearSolver_Ops_space_set
    __swig_getmethods__["space"] = _kinsol.SUNLinearSolver_Ops_space_get
    if _newclass:
        space = _swig_property(_kinsol.SUNLinearSolver_Ops_space_get, _kinsol.SUNLinearSolver_Ops_space_set)
    __swig_setmethods__["resid"] = _kinsol.SUNLinearSolver_Ops_resid_set
    __swig_getmethods__["resid"] = _kinsol.SUNLinearSolver_Ops_resid_get
    if _newclass:
        resid = _swig_property(_kinsol.SUNLinearSolver_Ops_resid_get, _kinsol.SUNLinearSolver_Ops_resid_set)
    __swig_setmethods__["free"] = _kinsol.SUNLinearSolver_Ops_free_set
    __swig_getmethods__["free"] = _kinsol.SUNLinearSolver_Ops_free_get
    if _newclass:
        free = _swig_property(_kinsol.SUNLinearSolver_Ops_free_get, _kinsol.SUNLinearSolver_Ops_free_set)

    def __init__(self):
        this = _kinsol.new_SUNLinearSolver_Ops()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kinsol.delete_SUNLinearSolver_Ops
    __del__ = lambda self: None
SUNLinearSolver_Ops_swigregister = _kinsol.SUNLinearSolver_Ops_swigregister
SUNLinearSolver_Ops_swigregister(SUNLinearSolver_Ops)

class SUNLinearSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SUNLinearSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SUNLinearSolver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["content"] = _kinsol.SUNLinearSolver_content_set
    __swig_getmethods__["content"] = _kinsol.SUNLinearSolver_content_get
    if _newclass:
        content = _swig_property(_kinsol.SUNLinearSolver_content_get, _kinsol.SUNLinearSolver_content_set)
    __swig_setmethods__["ops"] = _kinsol.SUNLinearSolver_ops_set
    __swig_getmethods__["ops"] = _kinsol.SUNLinearSolver_ops_get
    if _newclass:
        ops = _swig_property(_kinsol.SUNLinearSolver_ops_get, _kinsol.SUNLinearSolver_ops_set)

    def __init__(self):
        this = _kinsol.new_SUNLinearSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kinsol.delete_SUNLinearSolver
    __del__ = lambda self: None
SUNLinearSolver_swigregister = _kinsol.SUNLinearSolver_swigregister
SUNLinearSolver_swigregister(SUNLinearSolver)


def SUNLinSolNewEmpty():
    return _kinsol.SUNLinSolNewEmpty()
SUNLinSolNewEmpty = _kinsol.SUNLinSolNewEmpty

def SUNLinSolFreeEmpty(S):
    return _kinsol.SUNLinSolFreeEmpty(S)
SUNLinSolFreeEmpty = _kinsol.SUNLinSolFreeEmpty

def SUNLinSolGetType(S):
    return _kinsol.SUNLinSolGetType(S)
SUNLinSolGetType = _kinsol.SUNLinSolGetType

def SUNLinSolGetID(S):
    return _kinsol.SUNLinSolGetID(S)
SUNLinSolGetID = _kinsol.SUNLinSolGetID

def SUNLinSolSetATimes(S, A_data, ATimes):
    return _kinsol.SUNLinSolSetATimes(S, A_data, ATimes)
SUNLinSolSetATimes = _kinsol.SUNLinSolSetATimes

def SUNLinSolSetPreconditioner(S, P_data, Pset, Psol):
    return _kinsol.SUNLinSolSetPreconditioner(S, P_data, Pset, Psol)
SUNLinSolSetPreconditioner = _kinsol.SUNLinSolSetPreconditioner

def SUNLinSolSetScalingVectors(S, s1, s2):
    return _kinsol.SUNLinSolSetScalingVectors(S, s1, s2)
SUNLinSolSetScalingVectors = _kinsol.SUNLinSolSetScalingVectors

def SUNLinSolSetZeroGuess(S, onoff):
    return _kinsol.SUNLinSolSetZeroGuess(S, onoff)
SUNLinSolSetZeroGuess = _kinsol.SUNLinSolSetZeroGuess

def SUNLinSolInitialize(S):
    return _kinsol.SUNLinSolInitialize(S)
SUNLinSolInitialize = _kinsol.SUNLinSolInitialize

def SUNLinSolSetup(S, A):
    return _kinsol.SUNLinSolSetup(S, A)
SUNLinSolSetup = _kinsol.SUNLinSolSetup

def SUNLinSolSolve(S, A, x, b, tol):
    return _kinsol.SUNLinSolSolve(S, A, x, b, tol)
SUNLinSolSolve = _kinsol.SUNLinSolSolve

def SUNLinSolNumIters(S):
    return _kinsol.SUNLinSolNumIters(S)
SUNLinSolNumIters = _kinsol.SUNLinSolNumIters

def SUNLinSolResNorm(S):
    return _kinsol.SUNLinSolResNorm(S)
SUNLinSolResNorm = _kinsol.SUNLinSolResNorm

def SUNLinSolResid(S):
    return _kinsol.SUNLinSolResid(S)
SUNLinSolResid = _kinsol.SUNLinSolResid

def SUNLinSolLastFlag(S):
    return _kinsol.SUNLinSolLastFlag(S)
SUNLinSolLastFlag = _kinsol.SUNLinSolLastFlag

def SUNLinSolSpace(S, lenrwLS, leniwLS):
    return _kinsol.SUNLinSolSpace(S, lenrwLS, leniwLS)
SUNLinSolSpace = _kinsol.SUNLinSolSpace

def SUNLinSolFree(S):
    return _kinsol.SUNLinSolFree(S)
SUNLinSolFree = _kinsol.SUNLinSolFree
SUNLS_SUCCESS = _kinsol.SUNLS_SUCCESS
SUNLS_MEM_NULL = _kinsol.SUNLS_MEM_NULL
SUNLS_ILL_INPUT = _kinsol.SUNLS_ILL_INPUT
SUNLS_MEM_FAIL = _kinsol.SUNLS_MEM_FAIL
SUNLS_ATIMES_NULL = _kinsol.SUNLS_ATIMES_NULL
SUNLS_ATIMES_FAIL_UNREC = _kinsol.SUNLS_ATIMES_FAIL_UNREC
SUNLS_PSET_FAIL_UNREC = _kinsol.SUNLS_PSET_FAIL_UNREC
SUNLS_PSOLVE_NULL = _kinsol.SUNLS_PSOLVE_NULL
SUNLS_PSOLVE_FAIL_UNREC = _kinsol.SUNLS_PSOLVE_FAIL_UNREC
SUNLS_PACKAGE_FAIL_UNREC = _kinsol.SUNLS_PACKAGE_FAIL_UNREC
SUNLS_GS_FAIL = _kinsol.SUNLS_GS_FAIL
SUNLS_QRSOL_FAIL = _kinsol.SUNLS_QRSOL_FAIL
SUNLS_VECTOROP_ERR = _kinsol.SUNLS_VECTOROP_ERR
SUNLS_RES_REDUCED = _kinsol.SUNLS_RES_REDUCED
SUNLS_CONV_FAIL = _kinsol.SUNLS_CONV_FAIL
SUNLS_ATIMES_FAIL_REC = _kinsol.SUNLS_ATIMES_FAIL_REC
SUNLS_PSET_FAIL_REC = _kinsol.SUNLS_PSET_FAIL_REC
SUNLS_PSOLVE_FAIL_REC = _kinsol.SUNLS_PSOLVE_FAIL_REC
SUNLS_PACKAGE_FAIL_REC = _kinsol.SUNLS_PACKAGE_FAIL_REC
SUNLS_QRFACT_FAIL = _kinsol.SUNLS_QRFACT_FAIL
SUNLS_LUFACT_FAIL = _kinsol.SUNLS_LUFACT_FAIL
SUNLS_MSG_RESIDUAL = _kinsol.SUNLS_MSG_RESIDUAL
SUNNONLINEARSOLVER_ROOTFIND = _kinsol.SUNNONLINEARSOLVER_ROOTFIND
SUNNONLINEARSOLVER_FIXEDPOINT = _kinsol.SUNNONLINEARSOLVER_FIXEDPOINT
class SUNNonlinearSolver_Ops(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SUNNonlinearSolver_Ops, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SUNNonlinearSolver_Ops, name)
    __repr__ = _swig_repr
    __swig_setmethods__["gettype"] = _kinsol.SUNNonlinearSolver_Ops_gettype_set
    __swig_getmethods__["gettype"] = _kinsol.SUNNonlinearSolver_Ops_gettype_get
    if _newclass:
        gettype = _swig_property(_kinsol.SUNNonlinearSolver_Ops_gettype_get, _kinsol.SUNNonlinearSolver_Ops_gettype_set)
    __swig_setmethods__["initialize"] = _kinsol.SUNNonlinearSolver_Ops_initialize_set
    __swig_getmethods__["initialize"] = _kinsol.SUNNonlinearSolver_Ops_initialize_get
    if _newclass:
        initialize = _swig_property(_kinsol.SUNNonlinearSolver_Ops_initialize_get, _kinsol.SUNNonlinearSolver_Ops_initialize_set)
    __swig_setmethods__["setup"] = _kinsol.SUNNonlinearSolver_Ops_setup_set
    __swig_getmethods__["setup"] = _kinsol.SUNNonlinearSolver_Ops_setup_get
    if _newclass:
        setup = _swig_property(_kinsol.SUNNonlinearSolver_Ops_setup_get, _kinsol.SUNNonlinearSolver_Ops_setup_set)
    __swig_setmethods__["solve"] = _kinsol.SUNNonlinearSolver_Ops_solve_set
    __swig_getmethods__["solve"] = _kinsol.SUNNonlinearSolver_Ops_solve_get
    if _newclass:
        solve = _swig_property(_kinsol.SUNNonlinearSolver_Ops_solve_get, _kinsol.SUNNonlinearSolver_Ops_solve_set)
    __swig_setmethods__["free"] = _kinsol.SUNNonlinearSolver_Ops_free_set
    __swig_getmethods__["free"] = _kinsol.SUNNonlinearSolver_Ops_free_get
    if _newclass:
        free = _swig_property(_kinsol.SUNNonlinearSolver_Ops_free_get, _kinsol.SUNNonlinearSolver_Ops_free_set)
    __swig_setmethods__["setsysfn"] = _kinsol.SUNNonlinearSolver_Ops_setsysfn_set
    __swig_getmethods__["setsysfn"] = _kinsol.SUNNonlinearSolver_Ops_setsysfn_get
    if _newclass:
        setsysfn = _swig_property(_kinsol.SUNNonlinearSolver_Ops_setsysfn_get, _kinsol.SUNNonlinearSolver_Ops_setsysfn_set)
    __swig_setmethods__["setlsetupfn"] = _kinsol.SUNNonlinearSolver_Ops_setlsetupfn_set
    __swig_getmethods__["setlsetupfn"] = _kinsol.SUNNonlinearSolver_Ops_setlsetupfn_get
    if _newclass:
        setlsetupfn = _swig_property(_kinsol.SUNNonlinearSolver_Ops_setlsetupfn_get, _kinsol.SUNNonlinearSolver_Ops_setlsetupfn_set)
    __swig_setmethods__["setlsolvefn"] = _kinsol.SUNNonlinearSolver_Ops_setlsolvefn_set
    __swig_getmethods__["setlsolvefn"] = _kinsol.SUNNonlinearSolver_Ops_setlsolvefn_get
    if _newclass:
        setlsolvefn = _swig_property(_kinsol.SUNNonlinearSolver_Ops_setlsolvefn_get, _kinsol.SUNNonlinearSolver_Ops_setlsolvefn_set)
    __swig_setmethods__["setctestfn"] = _kinsol.SUNNonlinearSolver_Ops_setctestfn_set
    __swig_getmethods__["setctestfn"] = _kinsol.SUNNonlinearSolver_Ops_setctestfn_get
    if _newclass:
        setctestfn = _swig_property(_kinsol.SUNNonlinearSolver_Ops_setctestfn_get, _kinsol.SUNNonlinearSolver_Ops_setctestfn_set)
    __swig_setmethods__["setmaxiters"] = _kinsol.SUNNonlinearSolver_Ops_setmaxiters_set
    __swig_getmethods__["setmaxiters"] = _kinsol.SUNNonlinearSolver_Ops_setmaxiters_get
    if _newclass:
        setmaxiters = _swig_property(_kinsol.SUNNonlinearSolver_Ops_setmaxiters_get, _kinsol.SUNNonlinearSolver_Ops_setmaxiters_set)
    __swig_setmethods__["getnumiters"] = _kinsol.SUNNonlinearSolver_Ops_getnumiters_set
    __swig_getmethods__["getnumiters"] = _kinsol.SUNNonlinearSolver_Ops_getnumiters_get
    if _newclass:
        getnumiters = _swig_property(_kinsol.SUNNonlinearSolver_Ops_getnumiters_get, _kinsol.SUNNonlinearSolver_Ops_getnumiters_set)
    __swig_setmethods__["getcuriter"] = _kinsol.SUNNonlinearSolver_Ops_getcuriter_set
    __swig_getmethods__["getcuriter"] = _kinsol.SUNNonlinearSolver_Ops_getcuriter_get
    if _newclass:
        getcuriter = _swig_property(_kinsol.SUNNonlinearSolver_Ops_getcuriter_get, _kinsol.SUNNonlinearSolver_Ops_getcuriter_set)
    __swig_setmethods__["getnumconvfails"] = _kinsol.SUNNonlinearSolver_Ops_getnumconvfails_set
    __swig_getmethods__["getnumconvfails"] = _kinsol.SUNNonlinearSolver_Ops_getnumconvfails_get
    if _newclass:
        getnumconvfails = _swig_property(_kinsol.SUNNonlinearSolver_Ops_getnumconvfails_get, _kinsol.SUNNonlinearSolver_Ops_getnumconvfails_set)

    def __init__(self):
        this = _kinsol.new_SUNNonlinearSolver_Ops()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kinsol.delete_SUNNonlinearSolver_Ops
    __del__ = lambda self: None
SUNNonlinearSolver_Ops_swigregister = _kinsol.SUNNonlinearSolver_Ops_swigregister
SUNNonlinearSolver_Ops_swigregister(SUNNonlinearSolver_Ops)

class SUNNonlinearSolver(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SUNNonlinearSolver, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SUNNonlinearSolver, name)
    __repr__ = _swig_repr
    __swig_setmethods__["content"] = _kinsol.SUNNonlinearSolver_content_set
    __swig_getmethods__["content"] = _kinsol.SUNNonlinearSolver_content_get
    if _newclass:
        content = _swig_property(_kinsol.SUNNonlinearSolver_content_get, _kinsol.SUNNonlinearSolver_content_set)
    __swig_setmethods__["ops"] = _kinsol.SUNNonlinearSolver_ops_set
    __swig_getmethods__["ops"] = _kinsol.SUNNonlinearSolver_ops_get
    if _newclass:
        ops = _swig_property(_kinsol.SUNNonlinearSolver_ops_get, _kinsol.SUNNonlinearSolver_ops_set)

    def __init__(self):
        this = _kinsol.new_SUNNonlinearSolver()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kinsol.delete_SUNNonlinearSolver
    __del__ = lambda self: None
SUNNonlinearSolver_swigregister = _kinsol.SUNNonlinearSolver_swigregister
SUNNonlinearSolver_swigregister(SUNNonlinearSolver)


def SUNNonlinSolNewEmpty():
    return _kinsol.SUNNonlinSolNewEmpty()
SUNNonlinSolNewEmpty = _kinsol.SUNNonlinSolNewEmpty

def SUNNonlinSolFreeEmpty(NLS):
    return _kinsol.SUNNonlinSolFreeEmpty(NLS)
SUNNonlinSolFreeEmpty = _kinsol.SUNNonlinSolFreeEmpty

def SUNNonlinSolGetType(NLS):
    return _kinsol.SUNNonlinSolGetType(NLS)
SUNNonlinSolGetType = _kinsol.SUNNonlinSolGetType

def SUNNonlinSolInitialize(NLS):
    return _kinsol.SUNNonlinSolInitialize(NLS)
SUNNonlinSolInitialize = _kinsol.SUNNonlinSolInitialize

def SUNNonlinSolSetup(NLS, y, mem):
    return _kinsol.SUNNonlinSolSetup(NLS, y, mem)
SUNNonlinSolSetup = _kinsol.SUNNonlinSolSetup

def SUNNonlinSolSolve(NLS, y0, y, w, tol, callLSetup, mem):
    return _kinsol.SUNNonlinSolSolve(NLS, y0, y, w, tol, callLSetup, mem)
SUNNonlinSolSolve = _kinsol.SUNNonlinSolSolve

def SUNNonlinSolFree(NLS):
    return _kinsol.SUNNonlinSolFree(NLS)
SUNNonlinSolFree = _kinsol.SUNNonlinSolFree

def SUNNonlinSolSetSysFn(NLS, SysFn):
    return _kinsol.SUNNonlinSolSetSysFn(NLS, SysFn)
SUNNonlinSolSetSysFn = _kinsol.SUNNonlinSolSetSysFn

def SUNNonlinSolSetLSetupFn(NLS, SetupFn):
    return _kinsol.SUNNonlinSolSetLSetupFn(NLS, SetupFn)
SUNNonlinSolSetLSetupFn = _kinsol.SUNNonlinSolSetLSetupFn

def SUNNonlinSolSetLSolveFn(NLS, SolveFn):
    return _kinsol.SUNNonlinSolSetLSolveFn(NLS, SolveFn)
SUNNonlinSolSetLSolveFn = _kinsol.SUNNonlinSolSetLSolveFn

def SUNNonlinSolSetConvTestFn(NLS, CTestFn, ctest_data):
    return _kinsol.SUNNonlinSolSetConvTestFn(NLS, CTestFn, ctest_data)
SUNNonlinSolSetConvTestFn = _kinsol.SUNNonlinSolSetConvTestFn

def SUNNonlinSolSetMaxIters(NLS, maxiters):
    return _kinsol.SUNNonlinSolSetMaxIters(NLS, maxiters)
SUNNonlinSolSetMaxIters = _kinsol.SUNNonlinSolSetMaxIters

def SUNNonlinSolGetNumIters(NLS, niters):
    return _kinsol.SUNNonlinSolGetNumIters(NLS, niters)
SUNNonlinSolGetNumIters = _kinsol.SUNNonlinSolGetNumIters

def SUNNonlinSolGetCurIter(NLS, iter):
    return _kinsol.SUNNonlinSolGetCurIter(NLS, iter)
SUNNonlinSolGetCurIter = _kinsol.SUNNonlinSolGetCurIter

def SUNNonlinSolGetNumConvFails(NLS, nconvfails):
    return _kinsol.SUNNonlinSolGetNumConvFails(NLS, nconvfails)
SUNNonlinSolGetNumConvFails = _kinsol.SUNNonlinSolGetNumConvFails
SUN_NLS_SUCCESS = _kinsol.SUN_NLS_SUCCESS
SUN_NLS_CONTINUE = _kinsol.SUN_NLS_CONTINUE
SUN_NLS_CONV_RECVR = _kinsol.SUN_NLS_CONV_RECVR
SUN_NLS_MEM_NULL = _kinsol.SUN_NLS_MEM_NULL
SUN_NLS_MEM_FAIL = _kinsol.SUN_NLS_MEM_FAIL
SUN_NLS_ILL_INPUT = _kinsol.SUN_NLS_ILL_INPUT
SUN_NLS_VECTOROP_ERR = _kinsol.SUN_NLS_VECTOROP_ERR
SUN_NLS_EXT_FAIL = _kinsol.SUN_NLS_EXT_FAIL
SUN_NLS_MSG_RESIDUAL = _kinsol.SUN_NLS_MSG_RESIDUAL

def N_VGetData(v):
    return _kinsol.N_VGetData(v)
N_VGetData = _kinsol.N_VGetData

def N_VNew_Serial(vec_length):
    return _kinsol.N_VNew_Serial(vec_length)
N_VNew_Serial = _kinsol.N_VNew_Serial

def N_VNewEmpty_Serial(vec_length):
    return _kinsol.N_VNewEmpty_Serial(vec_length)
N_VNewEmpty_Serial = _kinsol.N_VNewEmpty_Serial

def N_VMake_Serial(vec_length):
    return _kinsol.N_VMake_Serial(vec_length)
N_VMake_Serial = _kinsol.N_VMake_Serial

def N_VCloneVectorArray_Serial(count, w):
    return _kinsol.N_VCloneVectorArray_Serial(count, w)
N_VCloneVectorArray_Serial = _kinsol.N_VCloneVectorArray_Serial

def N_VCloneVectorArrayEmpty_Serial(count, w):
    return _kinsol.N_VCloneVectorArrayEmpty_Serial(count, w)
N_VCloneVectorArrayEmpty_Serial = _kinsol.N_VCloneVectorArrayEmpty_Serial

def N_VDestroyVectorArray_Serial(vs, count):
    return _kinsol.N_VDestroyVectorArray_Serial(vs, count)
N_VDestroyVectorArray_Serial = _kinsol.N_VDestroyVectorArray_Serial

def N_VGetLength_Serial(v):
    return _kinsol.N_VGetLength_Serial(v)
N_VGetLength_Serial = _kinsol.N_VGetLength_Serial

def N_VPrint_Serial(v):
    return _kinsol.N_VPrint_Serial(v)
N_VPrint_Serial = _kinsol.N_VPrint_Serial

def N_VPrintFile_Serial(v, outfile):
    return _kinsol.N_VPrintFile_Serial(v, outfile)
N_VPrintFile_Serial = _kinsol.N_VPrintFile_Serial

def N_VGetVectorID_Serial(v):
    return _kinsol.N_VGetVectorID_Serial(v)
N_VGetVectorID_Serial = _kinsol.N_VGetVectorID_Serial

def N_VCloneEmpty_Serial(w):
    return _kinsol.N_VCloneEmpty_Serial(w)
N_VCloneEmpty_Serial = _kinsol.N_VCloneEmpty_Serial

def N_VClone_Serial(w):
    return _kinsol.N_VClone_Serial(w)
N_VClone_Serial = _kinsol.N_VClone_Serial

def N_VDestroy_Serial(v):
    return _kinsol.N_VDestroy_Serial(v)
N_VDestroy_Serial = _kinsol.N_VDestroy_Serial

def N_VSpace_Serial(v, lrw, liw):
    return _kinsol.N_VSpace_Serial(v, lrw, liw)
N_VSpace_Serial = _kinsol.N_VSpace_Serial

def N_VGetArrayPointer_Serial(v):
    return _kinsol.N_VGetArrayPointer_Serial(v)
N_VGetArrayPointer_Serial = _kinsol.N_VGetArrayPointer_Serial

def N_VSetArrayPointer_Serial(v_data, v):
    return _kinsol.N_VSetArrayPointer_Serial(v_data, v)
N_VSetArrayPointer_Serial = _kinsol.N_VSetArrayPointer_Serial

def N_VLinearSum_Serial(a, x, b, y, z):
    return _kinsol.N_VLinearSum_Serial(a, x, b, y, z)
N_VLinearSum_Serial = _kinsol.N_VLinearSum_Serial

def N_VConst_Serial(c, z):
    return _kinsol.N_VConst_Serial(c, z)
N_VConst_Serial = _kinsol.N_VConst_Serial

def N_VProd_Serial(x, y, z):
    return _kinsol.N_VProd_Serial(x, y, z)
N_VProd_Serial = _kinsol.N_VProd_Serial

def N_VDiv_Serial(x, y, z):
    return _kinsol.N_VDiv_Serial(x, y, z)
N_VDiv_Serial = _kinsol.N_VDiv_Serial

def N_VScale_Serial(c, x, z):
    return _kinsol.N_VScale_Serial(c, x, z)
N_VScale_Serial = _kinsol.N_VScale_Serial

def N_VAbs_Serial(x, z):
    return _kinsol.N_VAbs_Serial(x, z)
N_VAbs_Serial = _kinsol.N_VAbs_Serial

def N_VInv_Serial(x, z):
    return _kinsol.N_VInv_Serial(x, z)
N_VInv_Serial = _kinsol.N_VInv_Serial

def N_VAddConst_Serial(x, b, z):
    return _kinsol.N_VAddConst_Serial(x, b, z)
N_VAddConst_Serial = _kinsol.N_VAddConst_Serial

def N_VDotProd_Serial(x, y):
    return _kinsol.N_VDotProd_Serial(x, y)
N_VDotProd_Serial = _kinsol.N_VDotProd_Serial

def N_VMaxNorm_Serial(x):
    return _kinsol.N_VMaxNorm_Serial(x)
N_VMaxNorm_Serial = _kinsol.N_VMaxNorm_Serial

def N_VWrmsNorm_Serial(x, w):
    return _kinsol.N_VWrmsNorm_Serial(x, w)
N_VWrmsNorm_Serial = _kinsol.N_VWrmsNorm_Serial

def N_VWrmsNormMask_Serial(x, w, id):
    return _kinsol.N_VWrmsNormMask_Serial(x, w, id)
N_VWrmsNormMask_Serial = _kinsol.N_VWrmsNormMask_Serial

def N_VMin_Serial(x):
    return _kinsol.N_VMin_Serial(x)
N_VMin_Serial = _kinsol.N_VMin_Serial

def N_VWL2Norm_Serial(x, w):
    return _kinsol.N_VWL2Norm_Serial(x, w)
N_VWL2Norm_Serial = _kinsol.N_VWL2Norm_Serial

def N_VL1Norm_Serial(x):
    return _kinsol.N_VL1Norm_Serial(x)
N_VL1Norm_Serial = _kinsol.N_VL1Norm_Serial

def N_VCompare_Serial(c, x, z):
    return _kinsol.N_VCompare_Serial(c, x, z)
N_VCompare_Serial = _kinsol.N_VCompare_Serial

def N_VInvTest_Serial(x, z):
    return _kinsol.N_VInvTest_Serial(x, z)
N_VInvTest_Serial = _kinsol.N_VInvTest_Serial

def N_VConstrMask_Serial(c, x, m):
    return _kinsol.N_VConstrMask_Serial(c, x, m)
N_VConstrMask_Serial = _kinsol.N_VConstrMask_Serial

def N_VMinQuotient_Serial(num, denom):
    return _kinsol.N_VMinQuotient_Serial(num, denom)
N_VMinQuotient_Serial = _kinsol.N_VMinQuotient_Serial

def N_VLinearCombination_Serial(nvec, c, V, z):
    return _kinsol.N_VLinearCombination_Serial(nvec, c, V, z)
N_VLinearCombination_Serial = _kinsol.N_VLinearCombination_Serial

def N_VScaleAddMulti_Serial(nvec, a, x, Y, Z):
    return _kinsol.N_VScaleAddMulti_Serial(nvec, a, x, Y, Z)
N_VScaleAddMulti_Serial = _kinsol.N_VScaleAddMulti_Serial

def N_VDotProdMulti_Serial(nvec, x, Y, dotprods):
    return _kinsol.N_VDotProdMulti_Serial(nvec, x, Y, dotprods)
N_VDotProdMulti_Serial = _kinsol.N_VDotProdMulti_Serial

def N_VLinearSumVectorArray_Serial(nvec, a, X, b, Y, Z):
    return _kinsol.N_VLinearSumVectorArray_Serial(nvec, a, X, b, Y, Z)
N_VLinearSumVectorArray_Serial = _kinsol.N_VLinearSumVectorArray_Serial

def N_VScaleVectorArray_Serial(nvec, c, X, Z):
    return _kinsol.N_VScaleVectorArray_Serial(nvec, c, X, Z)
N_VScaleVectorArray_Serial = _kinsol.N_VScaleVectorArray_Serial

def N_VConstVectorArray_Serial(nvecs, c, Z):
    return _kinsol.N_VConstVectorArray_Serial(nvecs, c, Z)
N_VConstVectorArray_Serial = _kinsol.N_VConstVectorArray_Serial

def N_VWrmsNormVectorArray_Serial(nvecs, X, W, nrm):
    return _kinsol.N_VWrmsNormVectorArray_Serial(nvecs, X, W, nrm)
N_VWrmsNormVectorArray_Serial = _kinsol.N_VWrmsNormVectorArray_Serial

def N_VWrmsNormMaskVectorArray_Serial(nvecs, X, W, id, nrm):
    return _kinsol.N_VWrmsNormMaskVectorArray_Serial(nvecs, X, W, id, nrm)
N_VWrmsNormMaskVectorArray_Serial = _kinsol.N_VWrmsNormMaskVectorArray_Serial

def N_VScaleAddMultiVectorArray_Serial(nvec, nsum, a, X, Y, Z):
    return _kinsol.N_VScaleAddMultiVectorArray_Serial(nvec, nsum, a, X, Y, Z)
N_VScaleAddMultiVectorArray_Serial = _kinsol.N_VScaleAddMultiVectorArray_Serial

def N_VLinearCombinationVectorArray_Serial(nvec, nsum, c, X, Z):
    return _kinsol.N_VLinearCombinationVectorArray_Serial(nvec, nsum, c, X, Z)
N_VLinearCombinationVectorArray_Serial = _kinsol.N_VLinearCombinationVectorArray_Serial

def N_VWSqrSumLocal_Serial(x, w):
    return _kinsol.N_VWSqrSumLocal_Serial(x, w)
N_VWSqrSumLocal_Serial = _kinsol.N_VWSqrSumLocal_Serial

def N_VWSqrSumMaskLocal_Serial(x, w, id):
    return _kinsol.N_VWSqrSumMaskLocal_Serial(x, w, id)
N_VWSqrSumMaskLocal_Serial = _kinsol.N_VWSqrSumMaskLocal_Serial

def N_VBufSize_Serial(x, size):
    return _kinsol.N_VBufSize_Serial(x, size)
N_VBufSize_Serial = _kinsol.N_VBufSize_Serial

def N_VBufPack_Serial(x, buf):
    return _kinsol.N_VBufPack_Serial(x, buf)
N_VBufPack_Serial = _kinsol.N_VBufPack_Serial

def N_VBufUnpack_Serial(x, buf):
    return _kinsol.N_VBufUnpack_Serial(x, buf)
N_VBufUnpack_Serial = _kinsol.N_VBufUnpack_Serial

def N_VEnableFusedOps_Serial(v, tf):
    return _kinsol.N_VEnableFusedOps_Serial(v, tf)
N_VEnableFusedOps_Serial = _kinsol.N_VEnableFusedOps_Serial

def N_VEnableLinearCombination_Serial(v, tf):
    return _kinsol.N_VEnableLinearCombination_Serial(v, tf)
N_VEnableLinearCombination_Serial = _kinsol.N_VEnableLinearCombination_Serial

def N_VEnableScaleAddMulti_Serial(v, tf):
    return _kinsol.N_VEnableScaleAddMulti_Serial(v, tf)
N_VEnableScaleAddMulti_Serial = _kinsol.N_VEnableScaleAddMulti_Serial

def N_VEnableDotProdMulti_Serial(v, tf):
    return _kinsol.N_VEnableDotProdMulti_Serial(v, tf)
N_VEnableDotProdMulti_Serial = _kinsol.N_VEnableDotProdMulti_Serial

def N_VEnableLinearSumVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableLinearSumVectorArray_Serial(v, tf)
N_VEnableLinearSumVectorArray_Serial = _kinsol.N_VEnableLinearSumVectorArray_Serial

def N_VEnableScaleVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableScaleVectorArray_Serial(v, tf)
N_VEnableScaleVectorArray_Serial = _kinsol.N_VEnableScaleVectorArray_Serial

def N_VEnableConstVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableConstVectorArray_Serial(v, tf)
N_VEnableConstVectorArray_Serial = _kinsol.N_VEnableConstVectorArray_Serial

def N_VEnableWrmsNormVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableWrmsNormVectorArray_Serial(v, tf)
N_VEnableWrmsNormVectorArray_Serial = _kinsol.N_VEnableWrmsNormVectorArray_Serial

def N_VEnableWrmsNormMaskVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableWrmsNormMaskVectorArray_Serial(v, tf)
N_VEnableWrmsNormMaskVectorArray_Serial = _kinsol.N_VEnableWrmsNormMaskVectorArray_Serial

def N_VEnableScaleAddMultiVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableScaleAddMultiVectorArray_Serial(v, tf)
N_VEnableScaleAddMultiVectorArray_Serial = _kinsol.N_VEnableScaleAddMultiVectorArray_Serial

def N_VEnableLinearCombinationVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableLinearCombinationVectorArray_Serial(v, tf)
N_VEnableLinearCombinationVectorArray_Serial = _kinsol.N_VEnableLinearCombinationVectorArray_Serial
KIN_SUCCESS = _kinsol.KIN_SUCCESS
KIN_INITIAL_GUESS_OK = _kinsol.KIN_INITIAL_GUESS_OK
KIN_STEP_LT_STPTOL = _kinsol.KIN_STEP_LT_STPTOL
KIN_WARNING = _kinsol.KIN_WARNING
KIN_MEM_NULL = _kinsol.KIN_MEM_NULL
KIN_ILL_INPUT = _kinsol.KIN_ILL_INPUT
KIN_NO_MALLOC = _kinsol.KIN_NO_MALLOC
KIN_MEM_FAIL = _kinsol.KIN_MEM_FAIL
KIN_LINESEARCH_NONCONV = _kinsol.KIN_LINESEARCH_NONCONV
KIN_MAXITER_REACHED = _kinsol.KIN_MAXITER_REACHED
KIN_MXNEWT_5X_EXCEEDED = _kinsol.KIN_MXNEWT_5X_EXCEEDED
KIN_LINESEARCH_BCFAIL = _kinsol.KIN_LINESEARCH_BCFAIL
KIN_LINSOLV_NO_RECOVERY = _kinsol.KIN_LINSOLV_NO_RECOVERY
KIN_LINIT_FAIL = _kinsol.KIN_LINIT_FAIL
KIN_LSETUP_FAIL = _kinsol.KIN_LSETUP_FAIL
KIN_LSOLVE_FAIL = _kinsol.KIN_LSOLVE_FAIL
KIN_SYSFUNC_FAIL = _kinsol.KIN_SYSFUNC_FAIL
KIN_FIRST_SYSFUNC_ERR = _kinsol.KIN_FIRST_SYSFUNC_ERR
KIN_REPTD_SYSFUNC_ERR = _kinsol.KIN_REPTD_SYSFUNC_ERR
KIN_VECTOROP_ERR = _kinsol.KIN_VECTOROP_ERR
KIN_ETACHOICE1 = _kinsol.KIN_ETACHOICE1
KIN_ETACHOICE2 = _kinsol.KIN_ETACHOICE2
KIN_ETACONSTANT = _kinsol.KIN_ETACONSTANT
KIN_NONE = _kinsol.KIN_NONE
KIN_LINESEARCH = _kinsol.KIN_LINESEARCH
KIN_PICARD = _kinsol.KIN_PICARD
KIN_FP = _kinsol.KIN_FP

def KINCreate():
    return _kinsol.KINCreate()
KINCreate = _kinsol.KINCreate

def KINSol(kinmem, uu, strategy, u_scale, f_scale):
    return _kinsol.KINSol(kinmem, uu, strategy, u_scale, f_scale)
KINSol = _kinsol.KINSol

def KINSetErrHandlerFn(kinmem, ehfun, eh_data):
    return _kinsol.KINSetErrHandlerFn(kinmem, ehfun, eh_data)
KINSetErrHandlerFn = _kinsol.KINSetErrHandlerFn

def KINSetErrFile(kinmem, errfp):
    return _kinsol.KINSetErrFile(kinmem, errfp)
KINSetErrFile = _kinsol.KINSetErrFile

def KINSetErrFilename(kinmem, filename):
    return _kinsol.KINSetErrFilename(kinmem, filename)
KINSetErrFilename = _kinsol.KINSetErrFilename

def KINSetInfoHandlerFn(kinmem, ihfun, ih_data):
    return _kinsol.KINSetInfoHandlerFn(kinmem, ihfun, ih_data)
KINSetInfoHandlerFn = _kinsol.KINSetInfoHandlerFn

def KINSetInfoFile(kinmem, infofp):
    return _kinsol.KINSetInfoFile(kinmem, infofp)
KINSetInfoFile = _kinsol.KINSetInfoFile

def KINSetInfoFilename(kinmem, filename):
    return _kinsol.KINSetInfoFilename(kinmem, filename)
KINSetInfoFilename = _kinsol.KINSetInfoFilename

def KINSetPrintLevel(kinmem, printfl):
    return _kinsol.KINSetPrintLevel(kinmem, printfl)
KINSetPrintLevel = _kinsol.KINSetPrintLevel

def KINSetDamping(kinmem, beta):
    return _kinsol.KINSetDamping(kinmem, beta)
KINSetDamping = _kinsol.KINSetDamping

def KINSetMAA(kinmem, maa):
    return _kinsol.KINSetMAA(kinmem, maa)
KINSetMAA = _kinsol.KINSetMAA

def KINSetDelayAA(kinmem, delay):
    return _kinsol.KINSetDelayAA(kinmem, delay)
KINSetDelayAA = _kinsol.KINSetDelayAA

def KINSetDampingAA(kinmem, beta):
    return _kinsol.KINSetDampingAA(kinmem, beta)
KINSetDampingAA = _kinsol.KINSetDampingAA

def KINSetAdaptiveDampingAA(kinmem, tf):
    return _kinsol.KINSetAdaptiveDampingAA(kinmem, tf)
KINSetAdaptiveDampingAA = _kinsol.KINSetAdaptiveDampingAA

def KINSetAdaptiveDampingFactorAA(kinmem, adf):
    return _kinsol.KINSetAdaptiveDampingFactorAA(kinmem, adf)
KINSetAdaptiveDampingFactorAA = _kinsol.KINSetAdaptiveDampingFactorAA

def KINSetReturnNewest(kinmem, ret_newest):
    return _kinsol.KINSetReturnNewest(kinmem, ret_newest)
KINSetReturnNewest = _kinsol.KINSetReturnNewest

def KINSetNumMaxIters(kinmem, mxiter):
    return _kinsol.KINSetNumMaxIters(kinmem, mxiter)
KINSetNumMaxIters = _kinsol.KINSetNumMaxIters

def KINSetUseMaxIters(kinmem, use_mxiter):
    return _kinsol.KINSetUseMaxIters(kinmem, use_mxiter)
KINSetUseMaxIters = _kinsol.KINSetUseMaxIters

def KINSetNoInitSetup(kinmem, noInitSetup):
    return _kinsol.KINSetNoInitSetup(kinmem, noInitSetup)
KINSetNoInitSetup = _kinsol.KINSetNoInitSetup

def KINSetNoResMon(kinmem, noNNIResMon):
    return _kinsol.KINSetNoResMon(kinmem, noNNIResMon)
KINSetNoResMon = _kinsol.KINSetNoResMon

def KINSetMaxSetupCalls(kinmem, msbset):
    return _kinsol.KINSetMaxSetupCalls(kinmem, msbset)
KINSetMaxSetupCalls = _kinsol.KINSetMaxSetupCalls

def KINSetMaxSubSetupCalls(kinmem, msbsetsub):
    return _kinsol.KINSetMaxSubSetupCalls(kinmem, msbsetsub)
KINSetMaxSubSetupCalls = _kinsol.KINSetMaxSubSetupCalls

def KINSetEtaForm(kinmem, etachoice):
    return _kinsol.KINSetEtaForm(kinmem, etachoice)
KINSetEtaForm = _kinsol.KINSetEtaForm

def KINSetEtaConstValue(kinmem, eta):
    return _kinsol.KINSetEtaConstValue(kinmem, eta)
KINSetEtaConstValue = _kinsol.KINSetEtaConstValue

def KINSetEtaParams(kinmem, egamma, ealpha):
    return _kinsol.KINSetEtaParams(kinmem, egamma, ealpha)
KINSetEtaParams = _kinsol.KINSetEtaParams

def KINSetResMonParams(kinmem, omegamin, omegamax):
    return _kinsol.KINSetResMonParams(kinmem, omegamin, omegamax)
KINSetResMonParams = _kinsol.KINSetResMonParams

def KINSetResMonConstValue(kinmem, omegaconst):
    return _kinsol.KINSetResMonConstValue(kinmem, omegaconst)
KINSetResMonConstValue = _kinsol.KINSetResMonConstValue

def KINSetNoMinEps(kinmem, noMinEps):
    return _kinsol.KINSetNoMinEps(kinmem, noMinEps)
KINSetNoMinEps = _kinsol.KINSetNoMinEps

def KINSetMaxNewtonStep(kinmem, mxnewtstep):
    return _kinsol.KINSetMaxNewtonStep(kinmem, mxnewtstep)
KINSetMaxNewtonStep = _kinsol.KINSetMaxNewtonStep

def KINSetMaxBetaFails(kinmem, mxnbcf):
    return _kinsol.KINSetMaxBetaFails(kinmem, mxnbcf)
KINSetMaxBetaFails = _kinsol.KINSetMaxBetaFails

def KINSetRelErrFunc(kinmem, relfunc):
    return _kinsol.KINSetRelErrFunc(kinmem, relfunc)
KINSetRelErrFunc = _kinsol.KINSetRelErrFunc

def KINSetFuncNormTol(kinmem, fnormtol):
    return _kinsol.KINSetFuncNormTol(kinmem, fnormtol)
KINSetFuncNormTol = _kinsol.KINSetFuncNormTol

def KINSetScaledStepTol(kinmem, scsteptol):
    return _kinsol.KINSetScaledStepTol(kinmem, scsteptol)
KINSetScaledStepTol = _kinsol.KINSetScaledStepTol

def KINSetConstraints(kinmem, constraints):
    return _kinsol.KINSetConstraints(kinmem, constraints)
KINSetConstraints = _kinsol.KINSetConstraints

def KINSetSysFunc(kinmem, func):
    return _kinsol.KINSetSysFunc(kinmem, func)
KINSetSysFunc = _kinsol.KINSetSysFunc

def KINGetWorkSpace(kinmem):
    return _kinsol.KINGetWorkSpace(kinmem)
KINGetWorkSpace = _kinsol.KINGetWorkSpace

def KINGetNumNonlinSolvIters(kinmem):
    return _kinsol.KINGetNumNonlinSolvIters(kinmem)
KINGetNumNonlinSolvIters = _kinsol.KINGetNumNonlinSolvIters

def KINGetNumFuncEvals(kinmem):
    return _kinsol.KINGetNumFuncEvals(kinmem)
KINGetNumFuncEvals = _kinsol.KINGetNumFuncEvals

def KINGetNumBetaCondFails(kinmem):
    return _kinsol.KINGetNumBetaCondFails(kinmem)
KINGetNumBetaCondFails = _kinsol.KINGetNumBetaCondFails

def KINGetNumBacktrackOps(kinmem):
    return _kinsol.KINGetNumBacktrackOps(kinmem)
KINGetNumBacktrackOps = _kinsol.KINGetNumBacktrackOps

def KINGetFuncNorm(kinmem):
    return _kinsol.KINGetFuncNorm(kinmem)
KINGetFuncNorm = _kinsol.KINGetFuncNorm

def KINGetStepLength(kinmem):
    return _kinsol.KINGetStepLength(kinmem)
KINGetStepLength = _kinsol.KINGetStepLength

def KINGetReturnFlagName(flag):
    return _kinsol.KINGetReturnFlagName(flag)
KINGetReturnFlagName = _kinsol.KINGetReturnFlagName

def KINFree(kinmem):
    return _kinsol.KINFree(kinmem)
KINFree = _kinsol.KINFree

def KINSetJacTimesVecSysFn(kinmem, jtimesSysFn):
    return _kinsol.KINSetJacTimesVecSysFn(kinmem, jtimesSysFn)
KINSetJacTimesVecSysFn = _kinsol.KINSetJacTimesVecSysFn
KINBBDPRE_SUCCESS = _kinsol.KINBBDPRE_SUCCESS
KINBBDPRE_PDATA_NULL = _kinsol.KINBBDPRE_PDATA_NULL
KINBBDPRE_FUNC_UNRECVR = _kinsol.KINBBDPRE_FUNC_UNRECVR

def KINBBDPrecInit(kinmem, Nlocal, mudq, mldq, mukeep, mlkeep, dq_rel_uu, gloc, gcomm):
    return _kinsol.KINBBDPrecInit(kinmem, Nlocal, mudq, mldq, mukeep, mlkeep, dq_rel_uu, gloc, gcomm)
KINBBDPrecInit = _kinsol.KINBBDPrecInit

def KINBBDPrecGetWorkSpace(kinmem):
    return _kinsol.KINBBDPrecGetWorkSpace(kinmem)
KINBBDPrecGetWorkSpace = _kinsol.KINBBDPrecGetWorkSpace

def KINBBDPrecGetNumGfnEvals(kinmem):
    return _kinsol.KINBBDPrecGetNumGfnEvals(kinmem)
KINBBDPrecGetNumGfnEvals = _kinsol.KINBBDPrecGetNumGfnEvals
KINLS_SUCCESS = _kinsol.KINLS_SUCCESS
KINLS_MEM_NULL = _kinsol.KINLS_MEM_NULL
KINLS_LMEM_NULL = _kinsol.KINLS_LMEM_NULL
KINLS_ILL_INPUT = _kinsol.KINLS_ILL_INPUT
KINLS_MEM_FAIL = _kinsol.KINLS_MEM_FAIL
KINLS_PMEM_NULL = _kinsol.KINLS_PMEM_NULL
KINLS_JACFUNC_ERR = _kinsol.KINLS_JACFUNC_ERR
KINLS_SUNMAT_FAIL = _kinsol.KINLS_SUNMAT_FAIL
KINLS_SUNLS_FAIL = _kinsol.KINLS_SUNLS_FAIL

def KINSetLinearSolver(kinmem, LS, A):
    return _kinsol.KINSetLinearSolver(kinmem, LS, A)
KINSetLinearSolver = _kinsol.KINSetLinearSolver

def KINSetJacFn(kinmem, jac):
    return _kinsol.KINSetJacFn(kinmem, jac)
KINSetJacFn = _kinsol.KINSetJacFn

def KINSetPreconditioner(kinmem, psetup, psolve):
    return _kinsol.KINSetPreconditioner(kinmem, psetup, psolve)
KINSetPreconditioner = _kinsol.KINSetPreconditioner

def KINSetJacTimesVecFn(kinmem, jtv):
    return _kinsol.KINSetJacTimesVecFn(kinmem, jtv)
KINSetJacTimesVecFn = _kinsol.KINSetJacTimesVecFn

def KINGetLinWorkSpace(kinmem):
    return _kinsol.KINGetLinWorkSpace(kinmem)
KINGetLinWorkSpace = _kinsol.KINGetLinWorkSpace

def KINGetNumJacEvals(kinmem):
    return _kinsol.KINGetNumJacEvals(kinmem)
KINGetNumJacEvals = _kinsol.KINGetNumJacEvals

def KINGetNumLinFuncEvals(kinmem):
    return _kinsol.KINGetNumLinFuncEvals(kinmem)
KINGetNumLinFuncEvals = _kinsol.KINGetNumLinFuncEvals

def KINGetNumPrecEvals(kinmem):
    return _kinsol.KINGetNumPrecEvals(kinmem)
KINGetNumPrecEvals = _kinsol.KINGetNumPrecEvals

def KINGetNumPrecSolves(kinmem):
    return _kinsol.KINGetNumPrecSolves(kinmem)
KINGetNumPrecSolves = _kinsol.KINGetNumPrecSolves

def KINGetNumLinIters(kinmem):
    return _kinsol.KINGetNumLinIters(kinmem)
KINGetNumLinIters = _kinsol.KINGetNumLinIters

def KINGetNumLinConvFails(kinmem):
    return _kinsol.KINGetNumLinConvFails(kinmem)
KINGetNumLinConvFails = _kinsol.KINGetNumLinConvFails

def KINGetNumJtimesEvals(kinmem):
    return _kinsol.KINGetNumJtimesEvals(kinmem)
KINGetNumJtimesEvals = _kinsol.KINGetNumJtimesEvals

def KINGetLastLinFlag(kinmem):
    return _kinsol.KINGetLastLinFlag(kinmem)
KINGetLastLinFlag = _kinsol.KINGetLastLinFlag

def KINGetLinReturnFlagName(flag):
    return _kinsol.KINGetLinReturnFlagName(flag)
KINGetLinReturnFlagName = _kinsol.KINGetLinReturnFlagName
class KINSysPyFn(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KINSysPyFn, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KINSysPyFn, name)
    __repr__ = _swig_repr
    __swig_destroy__ = _kinsol.delete_KINSysPyFn
    __del__ = lambda self: None

    def actual_sysfun(self, y, g, udata):
        return _kinsol.KINSysPyFn_actual_sysfun(self, y, g, udata)

    def __init__(self):
        if self.__class__ == KINSysPyFn:
            _self = None
        else:
            _self = self
        this = _kinsol.new_KINSysPyFn(_self, )
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    def __disown__(self):
        self.this.disown()
        _kinsol.disown_KINSysPyFn(self)
        return weakref_proxy(self)
KINSysPyFn_swigregister = _kinsol.KINSysPyFn_swigregister
KINSysPyFn_swigregister(KINSysPyFn)

class KINSysFnCaller(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, KINSysFnCaller, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, KINSysFnCaller, name)
    __repr__ = _swig_repr

    def __init__(self):
        this = _kinsol.new_KINSysFnCaller()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _kinsol.delete_KINSysFnCaller
    __del__ = lambda self: None

    def cleanup(self):
        return _kinsol.KINSysFnCaller_cleanup(self)

    def setFn(self, cb):
        return _kinsol.KINSysFnCaller_setFn(self, cb)

    def setArgs(self, y, g, udata=None):
        return _kinsol.KINSysFnCaller_setArgs(self, y, g, udata)

    def call(self):
        return _kinsol.KINSysFnCaller_call(self)
KINSysFnCaller_swigregister = _kinsol.KINSysFnCaller_swigregister
KINSysFnCaller_swigregister(KINSysFnCaller)


def KINPyInterfaceSysFn(y, g, user_data):
    return _kinsol.KINPyInterfaceSysFn(y, g, user_data)
KINPyInterfaceSysFn = _kinsol.KINPyInterfaceSysFn

def KINInitPy(kmem, caller, y):
    return _kinsol.KINInitPy(kmem, caller, y)
KINInitPy = _kinsol.KINInitPy

def WrapPythonSysFn(user_sysfun):
  caller = KINSysFnCaller()
  caller.setFn(KINSysPyFnPyChild(user_sysfun).__disown__())
  return caller

# inherits from the C++ KinSysPyFn class
class KINSysPyFnPyChild(KINSysPyFn):
  def __init__(self, user_sysfun):
    KINSysPyFn.__init__(self)
    self.user_sysfun = user_sysfun

  def actual_sysfun(self, y, g, user_data):
    self.user_sysfun(y, g, user_data)
    return 0

# This file is compatible with both classic and new-style classes.


