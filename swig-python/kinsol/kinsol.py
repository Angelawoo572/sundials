# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.0
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError('Python 2.7 or later required')

# Import the low-level C/C++ module
if __package__ or '.' in __name__:
    from . import _kinsol
else:
    import _kinsol

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if name == "thisown":
        return self.this.own(value)
    if name == "this":
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if not static:
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if name == "thisown":
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


SUNFALSE = _kinsol.SUNFALSE
SUNTRUE = _kinsol.SUNTRUE
class Context(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, comm=None):
        _kinsol.Context_swiginit(self, _kinsol.new_Context(comm))
    __swig_destroy__ = _kinsol.delete_Context

    def get(self):
        return _kinsol.Context_get(self)

# Register Context in _kinsol:
_kinsol.Context_swigregister(Context)

SUNDIALS_NVEC_SERIAL = _kinsol.SUNDIALS_NVEC_SERIAL
SUNDIALS_NVEC_PARALLEL = _kinsol.SUNDIALS_NVEC_PARALLEL
SUNDIALS_NVEC_OPENMP = _kinsol.SUNDIALS_NVEC_OPENMP
SUNDIALS_NVEC_PTHREADS = _kinsol.SUNDIALS_NVEC_PTHREADS
SUNDIALS_NVEC_PARHYP = _kinsol.SUNDIALS_NVEC_PARHYP
SUNDIALS_NVEC_PETSC = _kinsol.SUNDIALS_NVEC_PETSC
SUNDIALS_NVEC_CUDA = _kinsol.SUNDIALS_NVEC_CUDA
SUNDIALS_NVEC_HIP = _kinsol.SUNDIALS_NVEC_HIP
SUNDIALS_NVEC_SYCL = _kinsol.SUNDIALS_NVEC_SYCL
SUNDIALS_NVEC_RAJA = _kinsol.SUNDIALS_NVEC_RAJA
SUNDIALS_NVEC_OPENMPDEV = _kinsol.SUNDIALS_NVEC_OPENMPDEV
SUNDIALS_NVEC_TRILINOS = _kinsol.SUNDIALS_NVEC_TRILINOS
SUNDIALS_NVEC_MANYVECTOR = _kinsol.SUNDIALS_NVEC_MANYVECTOR
SUNDIALS_NVEC_MPIMANYVECTOR = _kinsol.SUNDIALS_NVEC_MPIMANYVECTOR
SUNDIALS_NVEC_MPIPLUSX = _kinsol.SUNDIALS_NVEC_MPIPLUSX
SUNDIALS_NVEC_CUSTOM = _kinsol.SUNDIALS_NVEC_CUSTOM
class N_Vector_Ops(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    nvgetvectorid = property(_kinsol.N_Vector_Ops_nvgetvectorid_get, _kinsol.N_Vector_Ops_nvgetvectorid_set)
    nvclone = property(_kinsol.N_Vector_Ops_nvclone_get, _kinsol.N_Vector_Ops_nvclone_set)
    nvcloneempty = property(_kinsol.N_Vector_Ops_nvcloneempty_get, _kinsol.N_Vector_Ops_nvcloneempty_set)
    nvdestroy = property(_kinsol.N_Vector_Ops_nvdestroy_get, _kinsol.N_Vector_Ops_nvdestroy_set)
    nvspace = property(_kinsol.N_Vector_Ops_nvspace_get, _kinsol.N_Vector_Ops_nvspace_set)
    nvgetarraypointer = property(_kinsol.N_Vector_Ops_nvgetarraypointer_get, _kinsol.N_Vector_Ops_nvgetarraypointer_set)
    nvgetdevicearraypointer = property(_kinsol.N_Vector_Ops_nvgetdevicearraypointer_get, _kinsol.N_Vector_Ops_nvgetdevicearraypointer_set)
    nvsetarraypointer = property(_kinsol.N_Vector_Ops_nvsetarraypointer_get, _kinsol.N_Vector_Ops_nvsetarraypointer_set)
    nvgetcommunicator = property(_kinsol.N_Vector_Ops_nvgetcommunicator_get, _kinsol.N_Vector_Ops_nvgetcommunicator_set)
    nvgetlength = property(_kinsol.N_Vector_Ops_nvgetlength_get, _kinsol.N_Vector_Ops_nvgetlength_set)
    nvlinearsum = property(_kinsol.N_Vector_Ops_nvlinearsum_get, _kinsol.N_Vector_Ops_nvlinearsum_set)
    nvconst = property(_kinsol.N_Vector_Ops_nvconst_get, _kinsol.N_Vector_Ops_nvconst_set)
    nvprod = property(_kinsol.N_Vector_Ops_nvprod_get, _kinsol.N_Vector_Ops_nvprod_set)
    nvdiv = property(_kinsol.N_Vector_Ops_nvdiv_get, _kinsol.N_Vector_Ops_nvdiv_set)
    nvscale = property(_kinsol.N_Vector_Ops_nvscale_get, _kinsol.N_Vector_Ops_nvscale_set)
    nvabs = property(_kinsol.N_Vector_Ops_nvabs_get, _kinsol.N_Vector_Ops_nvabs_set)
    nvinv = property(_kinsol.N_Vector_Ops_nvinv_get, _kinsol.N_Vector_Ops_nvinv_set)
    nvaddconst = property(_kinsol.N_Vector_Ops_nvaddconst_get, _kinsol.N_Vector_Ops_nvaddconst_set)
    nvdotprod = property(_kinsol.N_Vector_Ops_nvdotprod_get, _kinsol.N_Vector_Ops_nvdotprod_set)
    nvmaxnorm = property(_kinsol.N_Vector_Ops_nvmaxnorm_get, _kinsol.N_Vector_Ops_nvmaxnorm_set)
    nvwrmsnorm = property(_kinsol.N_Vector_Ops_nvwrmsnorm_get, _kinsol.N_Vector_Ops_nvwrmsnorm_set)
    nvwrmsnormmask = property(_kinsol.N_Vector_Ops_nvwrmsnormmask_get, _kinsol.N_Vector_Ops_nvwrmsnormmask_set)
    nvmin = property(_kinsol.N_Vector_Ops_nvmin_get, _kinsol.N_Vector_Ops_nvmin_set)
    nvwl2norm = property(_kinsol.N_Vector_Ops_nvwl2norm_get, _kinsol.N_Vector_Ops_nvwl2norm_set)
    nvl1norm = property(_kinsol.N_Vector_Ops_nvl1norm_get, _kinsol.N_Vector_Ops_nvl1norm_set)
    nvcompare = property(_kinsol.N_Vector_Ops_nvcompare_get, _kinsol.N_Vector_Ops_nvcompare_set)
    nvinvtest = property(_kinsol.N_Vector_Ops_nvinvtest_get, _kinsol.N_Vector_Ops_nvinvtest_set)
    nvconstrmask = property(_kinsol.N_Vector_Ops_nvconstrmask_get, _kinsol.N_Vector_Ops_nvconstrmask_set)
    nvminquotient = property(_kinsol.N_Vector_Ops_nvminquotient_get, _kinsol.N_Vector_Ops_nvminquotient_set)
    nvlinearcombination = property(_kinsol.N_Vector_Ops_nvlinearcombination_get, _kinsol.N_Vector_Ops_nvlinearcombination_set)
    nvscaleaddmulti = property(_kinsol.N_Vector_Ops_nvscaleaddmulti_get, _kinsol.N_Vector_Ops_nvscaleaddmulti_set)
    nvdotprodmulti = property(_kinsol.N_Vector_Ops_nvdotprodmulti_get, _kinsol.N_Vector_Ops_nvdotprodmulti_set)
    nvlinearsumvectorarray = property(_kinsol.N_Vector_Ops_nvlinearsumvectorarray_get, _kinsol.N_Vector_Ops_nvlinearsumvectorarray_set)
    nvscalevectorarray = property(_kinsol.N_Vector_Ops_nvscalevectorarray_get, _kinsol.N_Vector_Ops_nvscalevectorarray_set)
    nvconstvectorarray = property(_kinsol.N_Vector_Ops_nvconstvectorarray_get, _kinsol.N_Vector_Ops_nvconstvectorarray_set)
    nvwrmsnormvectorarray = property(_kinsol.N_Vector_Ops_nvwrmsnormvectorarray_get, _kinsol.N_Vector_Ops_nvwrmsnormvectorarray_set)
    nvwrmsnormmaskvectorarray = property(_kinsol.N_Vector_Ops_nvwrmsnormmaskvectorarray_get, _kinsol.N_Vector_Ops_nvwrmsnormmaskvectorarray_set)
    nvscaleaddmultivectorarray = property(_kinsol.N_Vector_Ops_nvscaleaddmultivectorarray_get, _kinsol.N_Vector_Ops_nvscaleaddmultivectorarray_set)
    nvlinearcombinationvectorarray = property(_kinsol.N_Vector_Ops_nvlinearcombinationvectorarray_get, _kinsol.N_Vector_Ops_nvlinearcombinationvectorarray_set)
    nvdotprodlocal = property(_kinsol.N_Vector_Ops_nvdotprodlocal_get, _kinsol.N_Vector_Ops_nvdotprodlocal_set)
    nvmaxnormlocal = property(_kinsol.N_Vector_Ops_nvmaxnormlocal_get, _kinsol.N_Vector_Ops_nvmaxnormlocal_set)
    nvminlocal = property(_kinsol.N_Vector_Ops_nvminlocal_get, _kinsol.N_Vector_Ops_nvminlocal_set)
    nvl1normlocal = property(_kinsol.N_Vector_Ops_nvl1normlocal_get, _kinsol.N_Vector_Ops_nvl1normlocal_set)
    nvinvtestlocal = property(_kinsol.N_Vector_Ops_nvinvtestlocal_get, _kinsol.N_Vector_Ops_nvinvtestlocal_set)
    nvconstrmasklocal = property(_kinsol.N_Vector_Ops_nvconstrmasklocal_get, _kinsol.N_Vector_Ops_nvconstrmasklocal_set)
    nvminquotientlocal = property(_kinsol.N_Vector_Ops_nvminquotientlocal_get, _kinsol.N_Vector_Ops_nvminquotientlocal_set)
    nvwsqrsumlocal = property(_kinsol.N_Vector_Ops_nvwsqrsumlocal_get, _kinsol.N_Vector_Ops_nvwsqrsumlocal_set)
    nvwsqrsummasklocal = property(_kinsol.N_Vector_Ops_nvwsqrsummasklocal_get, _kinsol.N_Vector_Ops_nvwsqrsummasklocal_set)
    nvdotprodmultilocal = property(_kinsol.N_Vector_Ops_nvdotprodmultilocal_get, _kinsol.N_Vector_Ops_nvdotprodmultilocal_set)
    nvdotprodmultiallreduce = property(_kinsol.N_Vector_Ops_nvdotprodmultiallreduce_get, _kinsol.N_Vector_Ops_nvdotprodmultiallreduce_set)
    nvbufsize = property(_kinsol.N_Vector_Ops_nvbufsize_get, _kinsol.N_Vector_Ops_nvbufsize_set)
    nvbufpack = property(_kinsol.N_Vector_Ops_nvbufpack_get, _kinsol.N_Vector_Ops_nvbufpack_set)
    nvbufunpack = property(_kinsol.N_Vector_Ops_nvbufunpack_get, _kinsol.N_Vector_Ops_nvbufunpack_set)
    nvprint = property(_kinsol.N_Vector_Ops_nvprint_get, _kinsol.N_Vector_Ops_nvprint_set)
    nvprintfile = property(_kinsol.N_Vector_Ops_nvprintfile_get, _kinsol.N_Vector_Ops_nvprintfile_set)

    def __init__(self):
        _kinsol.N_Vector_Ops_swiginit(self, _kinsol.new_N_Vector_Ops())
    __swig_destroy__ = _kinsol.delete_N_Vector_Ops

# Register N_Vector_Ops in _kinsol:
_kinsol.N_Vector_Ops_swigregister(N_Vector_Ops)

class N_Vector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    content = property(_kinsol.N_Vector_content_get, _kinsol.N_Vector_content_set)
    ops = property(_kinsol.N_Vector_ops_get, _kinsol.N_Vector_ops_set)
    sunctx = property(_kinsol.N_Vector_sunctx_get, _kinsol.N_Vector_sunctx_set)

    def __init__(self):
        _kinsol.N_Vector_swiginit(self, _kinsol.new_N_Vector())
    __swig_destroy__ = _kinsol.delete_N_Vector

# Register N_Vector in _kinsol:
_kinsol.N_Vector_swigregister(N_Vector)


def N_VNewEmpty(sunctx):
    return _kinsol.N_VNewEmpty(sunctx)

def N_VFreeEmpty(v):
    return _kinsol.N_VFreeEmpty(v)

def N_VCopyOps(w, v):
    return _kinsol.N_VCopyOps(w, v)

def N_VGetVectorID(w):
    return _kinsol.N_VGetVectorID(w)

def N_VClone(w):
    return _kinsol.N_VClone(w)

def N_VCloneEmpty(w):
    return _kinsol.N_VCloneEmpty(w)

def N_VDestroy(v):
    return _kinsol.N_VDestroy(v)

def N_VSpace(v, lrw, liw):
    return _kinsol.N_VSpace(v, lrw, liw)

def N_VGetArrayPointer(v):
    return _kinsol.N_VGetArrayPointer(v)

def N_VGetDeviceArrayPointer(v):
    return _kinsol.N_VGetDeviceArrayPointer(v)

def N_VSetArrayPointer(v_data, v):
    return _kinsol.N_VSetArrayPointer(v_data, v)

def N_VGetCommunicator(v):
    return _kinsol.N_VGetCommunicator(v)

def N_VGetLength(v):
    return _kinsol.N_VGetLength(v)

def N_VLinearSum(a, x, b, y, z):
    return _kinsol.N_VLinearSum(a, x, b, y, z)

def N_VConst(c, z):
    return _kinsol.N_VConst(c, z)

def N_VProd(x, y, z):
    return _kinsol.N_VProd(x, y, z)

def N_VDiv(x, y, z):
    return _kinsol.N_VDiv(x, y, z)

def N_VScale(c, x, z):
    return _kinsol.N_VScale(c, x, z)

def N_VAbs(x, z):
    return _kinsol.N_VAbs(x, z)

def N_VInv(x, z):
    return _kinsol.N_VInv(x, z)

def N_VAddConst(x, b, z):
    return _kinsol.N_VAddConst(x, b, z)

def N_VDotProd(x, y):
    return _kinsol.N_VDotProd(x, y)

def N_VMaxNorm(x):
    return _kinsol.N_VMaxNorm(x)

def N_VWrmsNorm(x, w):
    return _kinsol.N_VWrmsNorm(x, w)

def N_VWrmsNormMask(x, w, id):
    return _kinsol.N_VWrmsNormMask(x, w, id)

def N_VMin(x):
    return _kinsol.N_VMin(x)

def N_VWL2Norm(x, w):
    return _kinsol.N_VWL2Norm(x, w)

def N_VL1Norm(x):
    return _kinsol.N_VL1Norm(x)

def N_VCompare(c, x, z):
    return _kinsol.N_VCompare(c, x, z)

def N_VInvTest(x, z):
    return _kinsol.N_VInvTest(x, z)

def N_VConstrMask(c, x, m):
    return _kinsol.N_VConstrMask(c, x, m)

def N_VMinQuotient(num, denom):
    return _kinsol.N_VMinQuotient(num, denom)

def N_VLinearCombination(nvec, c, X, z):
    return _kinsol.N_VLinearCombination(nvec, c, X, z)

def N_VScaleAddMulti(nvec, a, x, Y, Z):
    return _kinsol.N_VScaleAddMulti(nvec, a, x, Y, Z)

def N_VDotProdMulti(nvec, x, Y, dotprods):
    return _kinsol.N_VDotProdMulti(nvec, x, Y, dotprods)

def N_VLinearSumVectorArray(nvec, a, X, b, Y, Z):
    return _kinsol.N_VLinearSumVectorArray(nvec, a, X, b, Y, Z)

def N_VScaleVectorArray(nvec, c, X, Z):
    return _kinsol.N_VScaleVectorArray(nvec, c, X, Z)

def N_VConstVectorArray(nvec, c, Z):
    return _kinsol.N_VConstVectorArray(nvec, c, Z)

def N_VWrmsNormVectorArray(nvec, X, W, nrm):
    return _kinsol.N_VWrmsNormVectorArray(nvec, X, W, nrm)

def N_VWrmsNormMaskVectorArray(nvec, X, W, id, nrm):
    return _kinsol.N_VWrmsNormMaskVectorArray(nvec, X, W, id, nrm)

def N_VScaleAddMultiVectorArray(nvec, nsum, a, X, Y, Z):
    return _kinsol.N_VScaleAddMultiVectorArray(nvec, nsum, a, X, Y, Z)

def N_VLinearCombinationVectorArray(nvec, nsum, c, X, Z):
    return _kinsol.N_VLinearCombinationVectorArray(nvec, nsum, c, X, Z)

def N_VDotProdLocal(x, y):
    return _kinsol.N_VDotProdLocal(x, y)

def N_VMaxNormLocal(x):
    return _kinsol.N_VMaxNormLocal(x)

def N_VMinLocal(x):
    return _kinsol.N_VMinLocal(x)

def N_VL1NormLocal(x):
    return _kinsol.N_VL1NormLocal(x)

def N_VWSqrSumLocal(x, w):
    return _kinsol.N_VWSqrSumLocal(x, w)

def N_VWSqrSumMaskLocal(x, w, id):
    return _kinsol.N_VWSqrSumMaskLocal(x, w, id)

def N_VInvTestLocal(x, z):
    return _kinsol.N_VInvTestLocal(x, z)

def N_VConstrMaskLocal(c, x, m):
    return _kinsol.N_VConstrMaskLocal(c, x, m)

def N_VMinQuotientLocal(num, denom):
    return _kinsol.N_VMinQuotientLocal(num, denom)

def N_VDotProdMultiLocal(nvec, x, Y, dotprods):
    return _kinsol.N_VDotProdMultiLocal(nvec, x, Y, dotprods)

def N_VDotProdMultiAllReduce(nvec_total, x, sum):
    return _kinsol.N_VDotProdMultiAllReduce(nvec_total, x, sum)

def N_VBufSize(x, size):
    return _kinsol.N_VBufSize(x, size)

def N_VBufPack(x, buf):
    return _kinsol.N_VBufPack(x, buf)

def N_VBufUnpack(x, buf):
    return _kinsol.N_VBufUnpack(x, buf)

def N_VNewVectorArray(count):
    return _kinsol.N_VNewVectorArray(count)

def N_VCloneEmptyVectorArray(count, w):
    return _kinsol.N_VCloneEmptyVectorArray(count, w)

def N_VCloneVectorArray(count, w):
    return _kinsol.N_VCloneVectorArray(count, w)

def N_VDestroyVectorArray(vs, count):
    return _kinsol.N_VDestroyVectorArray(vs, count)

def N_VGetVecAtIndexVectorArray(vs, index):
    return _kinsol.N_VGetVecAtIndexVectorArray(vs, index)

def N_VSetVecAtIndexVectorArray(vs, index, w):
    return _kinsol.N_VSetVecAtIndexVectorArray(vs, index, w)

def N_VPrint(v):
    return _kinsol.N_VPrint(v)

def N_VPrintFile(v, outfile):
    return _kinsol.N_VPrintFile(v, outfile)

def N_VNew_Serial(vec_length, sunctx):
    return _kinsol.N_VNew_Serial(vec_length, sunctx)

def N_VNewEmpty_Serial(vec_length, sunctx):
    return _kinsol.N_VNewEmpty_Serial(vec_length, sunctx)

def N_VMake_Serial(vec_length, sunctx):
    return _kinsol.N_VMake_Serial(vec_length, sunctx)

def N_VGetLength_Serial(v):
    return _kinsol.N_VGetLength_Serial(v)

def N_VPrint_Serial(v):
    return _kinsol.N_VPrint_Serial(v)

def N_VPrintFile_Serial(v, outfile):
    return _kinsol.N_VPrintFile_Serial(v, outfile)

def N_VGetVectorID_Serial(v):
    return _kinsol.N_VGetVectorID_Serial(v)

def N_VCloneEmpty_Serial(w):
    return _kinsol.N_VCloneEmpty_Serial(w)

def N_VClone_Serial(w):
    return _kinsol.N_VClone_Serial(w)

def N_VDestroy_Serial(v):
    return _kinsol.N_VDestroy_Serial(v)

def N_VSpace_Serial(v, lrw, liw):
    return _kinsol.N_VSpace_Serial(v, lrw, liw)

def N_VGetArrayPointer_Serial(v):
    return _kinsol.N_VGetArrayPointer_Serial(v)

def N_VSetArrayPointer_Serial(v_data, v):
    return _kinsol.N_VSetArrayPointer_Serial(v_data, v)

def N_VLinearSum_Serial(a, x, b, y, z):
    return _kinsol.N_VLinearSum_Serial(a, x, b, y, z)

def N_VConst_Serial(c, z):
    return _kinsol.N_VConst_Serial(c, z)

def N_VProd_Serial(x, y, z):
    return _kinsol.N_VProd_Serial(x, y, z)

def N_VDiv_Serial(x, y, z):
    return _kinsol.N_VDiv_Serial(x, y, z)

def N_VScale_Serial(c, x, z):
    return _kinsol.N_VScale_Serial(c, x, z)

def N_VAbs_Serial(x, z):
    return _kinsol.N_VAbs_Serial(x, z)

def N_VInv_Serial(x, z):
    return _kinsol.N_VInv_Serial(x, z)

def N_VAddConst_Serial(x, b, z):
    return _kinsol.N_VAddConst_Serial(x, b, z)

def N_VDotProd_Serial(x, y):
    return _kinsol.N_VDotProd_Serial(x, y)

def N_VMaxNorm_Serial(x):
    return _kinsol.N_VMaxNorm_Serial(x)

def N_VWrmsNorm_Serial(x, w):
    return _kinsol.N_VWrmsNorm_Serial(x, w)

def N_VWrmsNormMask_Serial(x, w, id):
    return _kinsol.N_VWrmsNormMask_Serial(x, w, id)

def N_VMin_Serial(x):
    return _kinsol.N_VMin_Serial(x)

def N_VWL2Norm_Serial(x, w):
    return _kinsol.N_VWL2Norm_Serial(x, w)

def N_VL1Norm_Serial(x):
    return _kinsol.N_VL1Norm_Serial(x)

def N_VCompare_Serial(c, x, z):
    return _kinsol.N_VCompare_Serial(c, x, z)

def N_VInvTest_Serial(x, z):
    return _kinsol.N_VInvTest_Serial(x, z)

def N_VConstrMask_Serial(c, x, m):
    return _kinsol.N_VConstrMask_Serial(c, x, m)

def N_VMinQuotient_Serial(num, denom):
    return _kinsol.N_VMinQuotient_Serial(num, denom)

def N_VLinearCombination_Serial(nvec, c, V, z):
    return _kinsol.N_VLinearCombination_Serial(nvec, c, V, z)

def N_VScaleAddMulti_Serial(nvec, a, x, Y, Z):
    return _kinsol.N_VScaleAddMulti_Serial(nvec, a, x, Y, Z)

def N_VDotProdMulti_Serial(nvec, x, Y, dotprods):
    return _kinsol.N_VDotProdMulti_Serial(nvec, x, Y, dotprods)

def N_VLinearSumVectorArray_Serial(nvec, a, X, b, Y, Z):
    return _kinsol.N_VLinearSumVectorArray_Serial(nvec, a, X, b, Y, Z)

def N_VScaleVectorArray_Serial(nvec, c, X, Z):
    return _kinsol.N_VScaleVectorArray_Serial(nvec, c, X, Z)

def N_VConstVectorArray_Serial(nvecs, c, Z):
    return _kinsol.N_VConstVectorArray_Serial(nvecs, c, Z)

def N_VWrmsNormVectorArray_Serial(nvecs, X, W, nrm):
    return _kinsol.N_VWrmsNormVectorArray_Serial(nvecs, X, W, nrm)

def N_VWrmsNormMaskVectorArray_Serial(nvecs, X, W, id, nrm):
    return _kinsol.N_VWrmsNormMaskVectorArray_Serial(nvecs, X, W, id, nrm)

def N_VScaleAddMultiVectorArray_Serial(nvec, nsum, a, X, Y, Z):
    return _kinsol.N_VScaleAddMultiVectorArray_Serial(nvec, nsum, a, X, Y, Z)

def N_VLinearCombinationVectorArray_Serial(nvec, nsum, c, X, Z):
    return _kinsol.N_VLinearCombinationVectorArray_Serial(nvec, nsum, c, X, Z)

def N_VWSqrSumLocal_Serial(x, w):
    return _kinsol.N_VWSqrSumLocal_Serial(x, w)

def N_VWSqrSumMaskLocal_Serial(x, w, id):
    return _kinsol.N_VWSqrSumMaskLocal_Serial(x, w, id)

def N_VBufSize_Serial(x, size):
    return _kinsol.N_VBufSize_Serial(x, size)

def N_VBufPack_Serial(x, buf):
    return _kinsol.N_VBufPack_Serial(x, buf)

def N_VBufUnpack_Serial(x, buf):
    return _kinsol.N_VBufUnpack_Serial(x, buf)

def N_VEnableFusedOps_Serial(v, tf):
    return _kinsol.N_VEnableFusedOps_Serial(v, tf)

def N_VEnableLinearCombination_Serial(v, tf):
    return _kinsol.N_VEnableLinearCombination_Serial(v, tf)

def N_VEnableScaleAddMulti_Serial(v, tf):
    return _kinsol.N_VEnableScaleAddMulti_Serial(v, tf)

def N_VEnableDotProdMulti_Serial(v, tf):
    return _kinsol.N_VEnableDotProdMulti_Serial(v, tf)

def N_VEnableLinearSumVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableLinearSumVectorArray_Serial(v, tf)

def N_VEnableScaleVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableScaleVectorArray_Serial(v, tf)

def N_VEnableConstVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableConstVectorArray_Serial(v, tf)

def N_VEnableWrmsNormVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableWrmsNormVectorArray_Serial(v, tf)

def N_VEnableWrmsNormMaskVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableWrmsNormMaskVectorArray_Serial(v, tf)

def N_VEnableScaleAddMultiVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableScaleAddMultiVectorArray_Serial(v, tf)

def N_VEnableLinearCombinationVectorArray_Serial(v, tf):
    return _kinsol.N_VEnableLinearCombinationVectorArray_Serial(v, tf)

def N_VCloneVectorArray_Serial(count, w):
    return _kinsol.N_VCloneVectorArray_Serial(count, w)

def N_VCloneVectorArrayEmpty_Serial(count, w):
    return _kinsol.N_VCloneVectorArrayEmpty_Serial(count, w)

def N_VDestroyVectorArray_Serial(vs, count):
    return _kinsol.N_VDestroyVectorArray_Serial(vs, count)
SUNMATRIX_DENSE = _kinsol.SUNMATRIX_DENSE
SUNMATRIX_MAGMADENSE = _kinsol.SUNMATRIX_MAGMADENSE
SUNMATRIX_ONEMKLDENSE = _kinsol.SUNMATRIX_ONEMKLDENSE
SUNMATRIX_BAND = _kinsol.SUNMATRIX_BAND
SUNMATRIX_SPARSE = _kinsol.SUNMATRIX_SPARSE
SUNMATRIX_SLUNRLOC = _kinsol.SUNMATRIX_SLUNRLOC
SUNMATRIX_CUSPARSE = _kinsol.SUNMATRIX_CUSPARSE
SUNMATRIX_CUSTOM = _kinsol.SUNMATRIX_CUSTOM
class SUNMatrix_Ops(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    getid = property(_kinsol.SUNMatrix_Ops_getid_get, _kinsol.SUNMatrix_Ops_getid_set)
    clone = property(_kinsol.SUNMatrix_Ops_clone_get, _kinsol.SUNMatrix_Ops_clone_set)
    destroy = property(_kinsol.SUNMatrix_Ops_destroy_get, _kinsol.SUNMatrix_Ops_destroy_set)
    zero = property(_kinsol.SUNMatrix_Ops_zero_get, _kinsol.SUNMatrix_Ops_zero_set)
    copy = property(_kinsol.SUNMatrix_Ops_copy_get, _kinsol.SUNMatrix_Ops_copy_set)
    scaleadd = property(_kinsol.SUNMatrix_Ops_scaleadd_get, _kinsol.SUNMatrix_Ops_scaleadd_set)
    scaleaddi = property(_kinsol.SUNMatrix_Ops_scaleaddi_get, _kinsol.SUNMatrix_Ops_scaleaddi_set)
    matvecsetup = property(_kinsol.SUNMatrix_Ops_matvecsetup_get, _kinsol.SUNMatrix_Ops_matvecsetup_set)
    matvec = property(_kinsol.SUNMatrix_Ops_matvec_get, _kinsol.SUNMatrix_Ops_matvec_set)
    space = property(_kinsol.SUNMatrix_Ops_space_get, _kinsol.SUNMatrix_Ops_space_set)
    arrayview = property(_kinsol.SUNMatrix_Ops_arrayview_get, _kinsol.SUNMatrix_Ops_arrayview_set)
    devicearrayview = property(_kinsol.SUNMatrix_Ops_devicearrayview_get, _kinsol.SUNMatrix_Ops_devicearrayview_set)

    def __init__(self):
        _kinsol.SUNMatrix_Ops_swiginit(self, _kinsol.new_SUNMatrix_Ops())
    __swig_destroy__ = _kinsol.delete_SUNMatrix_Ops

# Register SUNMatrix_Ops in _kinsol:
_kinsol.SUNMatrix_Ops_swigregister(SUNMatrix_Ops)

class SUNMatrix(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    content = property(_kinsol.SUNMatrix_content_get, _kinsol.SUNMatrix_content_set)
    ops = property(_kinsol.SUNMatrix_ops_get, _kinsol.SUNMatrix_ops_set)
    sunctx = property(_kinsol.SUNMatrix_sunctx_get, _kinsol.SUNMatrix_sunctx_set)

    def __init__(self):
        _kinsol.SUNMatrix_swiginit(self, _kinsol.new_SUNMatrix())
    __swig_destroy__ = _kinsol.delete_SUNMatrix

# Register SUNMatrix in _kinsol:
_kinsol.SUNMatrix_swigregister(SUNMatrix)


def SUNMatNewEmpty(sunctx):
    return _kinsol.SUNMatNewEmpty(sunctx)

def SUNMatFreeEmpty(A):
    return _kinsol.SUNMatFreeEmpty(A)

def SUNMatCopyOps(A, B):
    return _kinsol.SUNMatCopyOps(A, B)

def SUNMatGetID(A):
    return _kinsol.SUNMatGetID(A)

def SUNMatClone(A):
    return _kinsol.SUNMatClone(A)

def SUNMatDestroy(A):
    return _kinsol.SUNMatDestroy(A)

def SUNMatZero(A):
    return _kinsol.SUNMatZero(A)

def SUNMatCopy(A, B):
    return _kinsol.SUNMatCopy(A, B)

def SUNMatScaleAdd(c, A, B):
    return _kinsol.SUNMatScaleAdd(c, A, B)

def SUNMatScaleAddI(c, A):
    return _kinsol.SUNMatScaleAddI(c, A)

def SUNMatMatvecSetup(A):
    return _kinsol.SUNMatMatvecSetup(A)

def SUNMatMatvec(A, x, y):
    return _kinsol.SUNMatMatvec(A, x, y)

def SUNMatSpace(A, lenrw, leniw):
    return _kinsol.SUNMatSpace(A, lenrw, leniw)

def SUNMatArrayView(A):
    return _kinsol.SUNMatArrayView(A)

def SUNMatDeviceArrayView(A):
    return _kinsol.SUNMatDeviceArrayView(A)
SUNMAT_SUCCESS = _kinsol.SUNMAT_SUCCESS
SUNMAT_ILL_INPUT = _kinsol.SUNMAT_ILL_INPUT
SUNMAT_MEM_FAIL = _kinsol.SUNMAT_MEM_FAIL
SUNMAT_OPERATION_FAIL = _kinsol.SUNMAT_OPERATION_FAIL
SUNMAT_MATVEC_SETUP_REQUIRED = _kinsol.SUNMAT_MATVEC_SETUP_REQUIRED
class _SUNMatrixContent_Dense(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    M = property(_kinsol._SUNMatrixContent_Dense_M_get, _kinsol._SUNMatrixContent_Dense_M_set)
    N = property(_kinsol._SUNMatrixContent_Dense_N_get, _kinsol._SUNMatrixContent_Dense_N_set)
    data = property(_kinsol._SUNMatrixContent_Dense_data_get, _kinsol._SUNMatrixContent_Dense_data_set)
    ldata = property(_kinsol._SUNMatrixContent_Dense_ldata_get, _kinsol._SUNMatrixContent_Dense_ldata_set)
    cols = property(_kinsol._SUNMatrixContent_Dense_cols_get, _kinsol._SUNMatrixContent_Dense_cols_set)

    def __init__(self):
        _kinsol._SUNMatrixContent_Dense_swiginit(self, _kinsol.new__SUNMatrixContent_Dense())
    __swig_destroy__ = _kinsol.delete__SUNMatrixContent_Dense

# Register _SUNMatrixContent_Dense in _kinsol:
_kinsol._SUNMatrixContent_Dense_swigregister(_SUNMatrixContent_Dense)


def SUNDenseMatrix(M, N, sunctx):
    return _kinsol.SUNDenseMatrix(M, N, sunctx)

def SUNDenseMatrix_Print(A, outfile):
    return _kinsol.SUNDenseMatrix_Print(A, outfile)

def SUNDenseMatrix_Rows(A):
    return _kinsol.SUNDenseMatrix_Rows(A)

def SUNDenseMatrix_Columns(A):
    return _kinsol.SUNDenseMatrix_Columns(A)

def SUNDenseMatrix_LData(A):
    return _kinsol.SUNDenseMatrix_LData(A)

def SUNDenseMatrix_Data(A):
    return _kinsol.SUNDenseMatrix_Data(A)

def SUNDenseMatrix_Cols(A):
    return _kinsol.SUNDenseMatrix_Cols(A)

def SUNDenseMatrix_Column(A, j):
    return _kinsol.SUNDenseMatrix_Column(A, j)

def SUNMatGetID_Dense(A):
    return _kinsol.SUNMatGetID_Dense(A)

def SUNMatClone_Dense(A):
    return _kinsol.SUNMatClone_Dense(A)

def SUNMatDestroy_Dense(A):
    return _kinsol.SUNMatDestroy_Dense(A)

def SUNMatZero_Dense(A):
    return _kinsol.SUNMatZero_Dense(A)

def SUNMatCopy_Dense(A, B):
    return _kinsol.SUNMatCopy_Dense(A, B)

def SUNMatScaleAdd_Dense(c, A, B):
    return _kinsol.SUNMatScaleAdd_Dense(c, A, B)

def SUNMatScaleAddI_Dense(c, A):
    return _kinsol.SUNMatScaleAddI_Dense(c, A)

def SUNMatMatvec_Dense(A, x, y):
    return _kinsol.SUNMatMatvec_Dense(A, x, y)

def SUNMatSpace_Dense(A, lenrw, leniw):
    return _kinsol.SUNMatSpace_Dense(A, lenrw, leniw)

def SUNMatArrayView_Dense(A):
    return _kinsol.SUNMatArrayView_Dense(A)
PREC_NONE = _kinsol.PREC_NONE
PREC_LEFT = _kinsol.PREC_LEFT
PREC_RIGHT = _kinsol.PREC_RIGHT
PREC_BOTH = _kinsol.PREC_BOTH
SUN_PREC_NONE = _kinsol.SUN_PREC_NONE
SUN_PREC_LEFT = _kinsol.SUN_PREC_LEFT
SUN_PREC_RIGHT = _kinsol.SUN_PREC_RIGHT
SUN_PREC_BOTH = _kinsol.SUN_PREC_BOTH
MODIFIED_GS = _kinsol.MODIFIED_GS
CLASSICAL_GS = _kinsol.CLASSICAL_GS
SUN_MODIFIED_GS = _kinsol.SUN_MODIFIED_GS
SUN_CLASSICAL_GS = _kinsol.SUN_CLASSICAL_GS

def SUNModifiedGS(v, h, k, p, new_vk_norm):
    return _kinsol.SUNModifiedGS(v, h, k, p, new_vk_norm)

def ModifiedGS(v, h, k, p, new_vk_norm):
    return _kinsol.ModifiedGS(v, h, k, p, new_vk_norm)

def SUNClassicalGS(v, h, k, p, new_vk_norm, stemp, vtemp):
    return _kinsol.SUNClassicalGS(v, h, k, p, new_vk_norm, stemp, vtemp)

def ClassicalGS(v, h, k, p, new_vk_norm, stemp, vtemp):
    return _kinsol.ClassicalGS(v, h, k, p, new_vk_norm, stemp, vtemp)

def SUNQRfact(n, h, q, job):
    return _kinsol.SUNQRfact(n, h, q, job)

def QRfact(n, h, q, job):
    return _kinsol.QRfact(n, h, q, job)

def SUNQRsol(n, h, q, b):
    return _kinsol.SUNQRsol(n, h, q, b)

def QRsol(n, h, q, b):
    return _kinsol.QRsol(n, h, q, b)

def SUNQRAdd_MGS(Q, R, df, m, mMax, QRdata):
    return _kinsol.SUNQRAdd_MGS(Q, R, df, m, mMax, QRdata)

def SUNQRAdd_ICWY(Q, R, df, m, mMax, QRdata):
    return _kinsol.SUNQRAdd_ICWY(Q, R, df, m, mMax, QRdata)

def SUNQRAdd_ICWY_SB(Q, R, df, m, mMax, QRdata):
    return _kinsol.SUNQRAdd_ICWY_SB(Q, R, df, m, mMax, QRdata)

def SUNQRAdd_CGS2(Q, R, df, m, mMax, QRdata):
    return _kinsol.SUNQRAdd_CGS2(Q, R, df, m, mMax, QRdata)

def SUNQRAdd_DCGS2(Q, R, df, m, mMax, QRdata):
    return _kinsol.SUNQRAdd_DCGS2(Q, R, df, m, mMax, QRdata)

def SUNQRAdd_DCGS2_SB(Q, R, df, m, mMax, QRdata):
    return _kinsol.SUNQRAdd_DCGS2_SB(Q, R, df, m, mMax, QRdata)
SUNLINEARSOLVER_DIRECT = _kinsol.SUNLINEARSOLVER_DIRECT
SUNLINEARSOLVER_ITERATIVE = _kinsol.SUNLINEARSOLVER_ITERATIVE
SUNLINEARSOLVER_MATRIX_ITERATIVE = _kinsol.SUNLINEARSOLVER_MATRIX_ITERATIVE
SUNLINEARSOLVER_MATRIX_EMBEDDED = _kinsol.SUNLINEARSOLVER_MATRIX_EMBEDDED
SUNLINEARSOLVER_BAND = _kinsol.SUNLINEARSOLVER_BAND
SUNLINEARSOLVER_DENSE = _kinsol.SUNLINEARSOLVER_DENSE
SUNLINEARSOLVER_KLU = _kinsol.SUNLINEARSOLVER_KLU
SUNLINEARSOLVER_LAPACKBAND = _kinsol.SUNLINEARSOLVER_LAPACKBAND
SUNLINEARSOLVER_LAPACKDENSE = _kinsol.SUNLINEARSOLVER_LAPACKDENSE
SUNLINEARSOLVER_PCG = _kinsol.SUNLINEARSOLVER_PCG
SUNLINEARSOLVER_SPBCGS = _kinsol.SUNLINEARSOLVER_SPBCGS
SUNLINEARSOLVER_SPFGMR = _kinsol.SUNLINEARSOLVER_SPFGMR
SUNLINEARSOLVER_SPGMR = _kinsol.SUNLINEARSOLVER_SPGMR
SUNLINEARSOLVER_SPTFQMR = _kinsol.SUNLINEARSOLVER_SPTFQMR
SUNLINEARSOLVER_SUPERLUDIST = _kinsol.SUNLINEARSOLVER_SUPERLUDIST
SUNLINEARSOLVER_SUPERLUMT = _kinsol.SUNLINEARSOLVER_SUPERLUMT
SUNLINEARSOLVER_CUSOLVERSP_BATCHQR = _kinsol.SUNLINEARSOLVER_CUSOLVERSP_BATCHQR
SUNLINEARSOLVER_MAGMADENSE = _kinsol.SUNLINEARSOLVER_MAGMADENSE
SUNLINEARSOLVER_ONEMKLDENSE = _kinsol.SUNLINEARSOLVER_ONEMKLDENSE
SUNLINEARSOLVER_CUSTOM = _kinsol.SUNLINEARSOLVER_CUSTOM
class SUNLinearSolver_Ops(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    gettype = property(_kinsol.SUNLinearSolver_Ops_gettype_get, _kinsol.SUNLinearSolver_Ops_gettype_set)
    getid = property(_kinsol.SUNLinearSolver_Ops_getid_get, _kinsol.SUNLinearSolver_Ops_getid_set)
    setatimes = property(_kinsol.SUNLinearSolver_Ops_setatimes_get, _kinsol.SUNLinearSolver_Ops_setatimes_set)
    setpreconditioner = property(_kinsol.SUNLinearSolver_Ops_setpreconditioner_get, _kinsol.SUNLinearSolver_Ops_setpreconditioner_set)
    setscalingvectors = property(_kinsol.SUNLinearSolver_Ops_setscalingvectors_get, _kinsol.SUNLinearSolver_Ops_setscalingvectors_set)
    setzeroguess = property(_kinsol.SUNLinearSolver_Ops_setzeroguess_get, _kinsol.SUNLinearSolver_Ops_setzeroguess_set)
    initialize = property(_kinsol.SUNLinearSolver_Ops_initialize_get, _kinsol.SUNLinearSolver_Ops_initialize_set)
    setup = property(_kinsol.SUNLinearSolver_Ops_setup_get, _kinsol.SUNLinearSolver_Ops_setup_set)
    solve = property(_kinsol.SUNLinearSolver_Ops_solve_get, _kinsol.SUNLinearSolver_Ops_solve_set)
    numiters = property(_kinsol.SUNLinearSolver_Ops_numiters_get, _kinsol.SUNLinearSolver_Ops_numiters_set)
    resnorm = property(_kinsol.SUNLinearSolver_Ops_resnorm_get, _kinsol.SUNLinearSolver_Ops_resnorm_set)
    lastflag = property(_kinsol.SUNLinearSolver_Ops_lastflag_get, _kinsol.SUNLinearSolver_Ops_lastflag_set)
    space = property(_kinsol.SUNLinearSolver_Ops_space_get, _kinsol.SUNLinearSolver_Ops_space_set)
    resid = property(_kinsol.SUNLinearSolver_Ops_resid_get, _kinsol.SUNLinearSolver_Ops_resid_set)
    free = property(_kinsol.SUNLinearSolver_Ops_free_get, _kinsol.SUNLinearSolver_Ops_free_set)

    def __init__(self):
        _kinsol.SUNLinearSolver_Ops_swiginit(self, _kinsol.new_SUNLinearSolver_Ops())
    __swig_destroy__ = _kinsol.delete_SUNLinearSolver_Ops

# Register SUNLinearSolver_Ops in _kinsol:
_kinsol.SUNLinearSolver_Ops_swigregister(SUNLinearSolver_Ops)

class SUNLinearSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    content = property(_kinsol.SUNLinearSolver_content_get, _kinsol.SUNLinearSolver_content_set)
    ops = property(_kinsol.SUNLinearSolver_ops_get, _kinsol.SUNLinearSolver_ops_set)
    sunctx = property(_kinsol.SUNLinearSolver_sunctx_get, _kinsol.SUNLinearSolver_sunctx_set)

    def __init__(self):
        _kinsol.SUNLinearSolver_swiginit(self, _kinsol.new_SUNLinearSolver())
    __swig_destroy__ = _kinsol.delete_SUNLinearSolver

# Register SUNLinearSolver in _kinsol:
_kinsol.SUNLinearSolver_swigregister(SUNLinearSolver)


def SUNLinSolNewEmpty(sunctx):
    return _kinsol.SUNLinSolNewEmpty(sunctx)

def SUNLinSolFreeEmpty(S):
    return _kinsol.SUNLinSolFreeEmpty(S)

def SUNLinSolGetType(S):
    return _kinsol.SUNLinSolGetType(S)

def SUNLinSolGetID(S):
    return _kinsol.SUNLinSolGetID(S)

def SUNLinSolSetATimes(S, A_data, ATimes):
    return _kinsol.SUNLinSolSetATimes(S, A_data, ATimes)

def SUNLinSolSetPreconditioner(S, P_data, Pset, Psol):
    return _kinsol.SUNLinSolSetPreconditioner(S, P_data, Pset, Psol)

def SUNLinSolSetScalingVectors(S, s1, s2):
    return _kinsol.SUNLinSolSetScalingVectors(S, s1, s2)

def SUNLinSolSetZeroGuess(S, onoff):
    return _kinsol.SUNLinSolSetZeroGuess(S, onoff)

def SUNLinSolInitialize(S):
    return _kinsol.SUNLinSolInitialize(S)

def SUNLinSolSetup(S, A):
    return _kinsol.SUNLinSolSetup(S, A)

def SUNLinSolSolve(S, A, x, b, tol):
    return _kinsol.SUNLinSolSolve(S, A, x, b, tol)

def SUNLinSolNumIters(S):
    return _kinsol.SUNLinSolNumIters(S)

def SUNLinSolResNorm(S):
    return _kinsol.SUNLinSolResNorm(S)

def SUNLinSolResid(S):
    return _kinsol.SUNLinSolResid(S)

def SUNLinSolLastFlag(S):
    return _kinsol.SUNLinSolLastFlag(S)

def SUNLinSolSpace(S, lenrwLS, leniwLS):
    return _kinsol.SUNLinSolSpace(S, lenrwLS, leniwLS)

def SUNLinSolFree(S):
    return _kinsol.SUNLinSolFree(S)
SUNLS_SUCCESS = _kinsol.SUNLS_SUCCESS
SUNLS_MEM_NULL = _kinsol.SUNLS_MEM_NULL
SUNLS_ILL_INPUT = _kinsol.SUNLS_ILL_INPUT
SUNLS_MEM_FAIL = _kinsol.SUNLS_MEM_FAIL
SUNLS_ATIMES_NULL = _kinsol.SUNLS_ATIMES_NULL
SUNLS_ATIMES_FAIL_UNREC = _kinsol.SUNLS_ATIMES_FAIL_UNREC
SUNLS_PSET_FAIL_UNREC = _kinsol.SUNLS_PSET_FAIL_UNREC
SUNLS_PSOLVE_NULL = _kinsol.SUNLS_PSOLVE_NULL
SUNLS_PSOLVE_FAIL_UNREC = _kinsol.SUNLS_PSOLVE_FAIL_UNREC
SUNLS_PACKAGE_FAIL_UNREC = _kinsol.SUNLS_PACKAGE_FAIL_UNREC
SUNLS_GS_FAIL = _kinsol.SUNLS_GS_FAIL
SUNLS_QRSOL_FAIL = _kinsol.SUNLS_QRSOL_FAIL
SUNLS_VECTOROP_ERR = _kinsol.SUNLS_VECTOROP_ERR
SUNLS_RES_REDUCED = _kinsol.SUNLS_RES_REDUCED
SUNLS_CONV_FAIL = _kinsol.SUNLS_CONV_FAIL
SUNLS_ATIMES_FAIL_REC = _kinsol.SUNLS_ATIMES_FAIL_REC
SUNLS_PSET_FAIL_REC = _kinsol.SUNLS_PSET_FAIL_REC
SUNLS_PSOLVE_FAIL_REC = _kinsol.SUNLS_PSOLVE_FAIL_REC
SUNLS_PACKAGE_FAIL_REC = _kinsol.SUNLS_PACKAGE_FAIL_REC
SUNLS_QRFACT_FAIL = _kinsol.SUNLS_QRFACT_FAIL
SUNLS_LUFACT_FAIL = _kinsol.SUNLS_LUFACT_FAIL
SUNLS_MSG_RESIDUAL = _kinsol.SUNLS_MSG_RESIDUAL
class _SUNLinearSolverContent_Dense(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    N = property(_kinsol._SUNLinearSolverContent_Dense_N_get, _kinsol._SUNLinearSolverContent_Dense_N_set)
    pivots = property(_kinsol._SUNLinearSolverContent_Dense_pivots_get, _kinsol._SUNLinearSolverContent_Dense_pivots_set)
    last_flag = property(_kinsol._SUNLinearSolverContent_Dense_last_flag_get, _kinsol._SUNLinearSolverContent_Dense_last_flag_set)

    def __init__(self):
        _kinsol._SUNLinearSolverContent_Dense_swiginit(self, _kinsol.new__SUNLinearSolverContent_Dense())
    __swig_destroy__ = _kinsol.delete__SUNLinearSolverContent_Dense

# Register _SUNLinearSolverContent_Dense in _kinsol:
_kinsol._SUNLinearSolverContent_Dense_swigregister(_SUNLinearSolverContent_Dense)


def SUNLinSol_Dense(y, A, sunctx):
    return _kinsol.SUNLinSol_Dense(y, A, sunctx)

def SUNLinSolGetType_Dense(S):
    return _kinsol.SUNLinSolGetType_Dense(S)

def SUNLinSolGetID_Dense(S):
    return _kinsol.SUNLinSolGetID_Dense(S)

def SUNLinSolInitialize_Dense(S):
    return _kinsol.SUNLinSolInitialize_Dense(S)

def SUNLinSolSetup_Dense(S, A):
    return _kinsol.SUNLinSolSetup_Dense(S, A)

def SUNLinSolSolve_Dense(S, A, x, b, tol):
    return _kinsol.SUNLinSolSolve_Dense(S, A, x, b, tol)

def SUNLinSolLastFlag_Dense(S):
    return _kinsol.SUNLinSolLastFlag_Dense(S)

def SUNLinSolSpace_Dense(S, lenrwLS, leniwLS):
    return _kinsol.SUNLinSolSpace_Dense(S, lenrwLS, leniwLS)

def SUNLinSolFree_Dense(S):
    return _kinsol.SUNLinSolFree_Dense(S)
SUNPCG_MAXL_DEFAULT = _kinsol.SUNPCG_MAXL_DEFAULT
class _SUNLinearSolverContent_PCG(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    maxl = property(_kinsol._SUNLinearSolverContent_PCG_maxl_get, _kinsol._SUNLinearSolverContent_PCG_maxl_set)
    pretype = property(_kinsol._SUNLinearSolverContent_PCG_pretype_get, _kinsol._SUNLinearSolverContent_PCG_pretype_set)
    zeroguess = property(_kinsol._SUNLinearSolverContent_PCG_zeroguess_get, _kinsol._SUNLinearSolverContent_PCG_zeroguess_set)
    numiters = property(_kinsol._SUNLinearSolverContent_PCG_numiters_get, _kinsol._SUNLinearSolverContent_PCG_numiters_set)
    resnorm = property(_kinsol._SUNLinearSolverContent_PCG_resnorm_get, _kinsol._SUNLinearSolverContent_PCG_resnorm_set)
    last_flag = property(_kinsol._SUNLinearSolverContent_PCG_last_flag_get, _kinsol._SUNLinearSolverContent_PCG_last_flag_set)
    ATimes = property(_kinsol._SUNLinearSolverContent_PCG_ATimes_get, _kinsol._SUNLinearSolverContent_PCG_ATimes_set)
    ATData = property(_kinsol._SUNLinearSolverContent_PCG_ATData_get, _kinsol._SUNLinearSolverContent_PCG_ATData_set)
    Psetup = property(_kinsol._SUNLinearSolverContent_PCG_Psetup_get, _kinsol._SUNLinearSolverContent_PCG_Psetup_set)
    Psolve = property(_kinsol._SUNLinearSolverContent_PCG_Psolve_get, _kinsol._SUNLinearSolverContent_PCG_Psolve_set)
    PData = property(_kinsol._SUNLinearSolverContent_PCG_PData_get, _kinsol._SUNLinearSolverContent_PCG_PData_set)
    s = property(_kinsol._SUNLinearSolverContent_PCG_s_get, _kinsol._SUNLinearSolverContent_PCG_s_set)
    r = property(_kinsol._SUNLinearSolverContent_PCG_r_get, _kinsol._SUNLinearSolverContent_PCG_r_set)
    p = property(_kinsol._SUNLinearSolverContent_PCG_p_get, _kinsol._SUNLinearSolverContent_PCG_p_set)
    z = property(_kinsol._SUNLinearSolverContent_PCG_z_get, _kinsol._SUNLinearSolverContent_PCG_z_set)
    Ap = property(_kinsol._SUNLinearSolverContent_PCG_Ap_get, _kinsol._SUNLinearSolverContent_PCG_Ap_set)
    print_level = property(_kinsol._SUNLinearSolverContent_PCG_print_level_get, _kinsol._SUNLinearSolverContent_PCG_print_level_set)
    info_file = property(_kinsol._SUNLinearSolverContent_PCG_info_file_get, _kinsol._SUNLinearSolverContent_PCG_info_file_set)

    def __init__(self):
        _kinsol._SUNLinearSolverContent_PCG_swiginit(self, _kinsol.new__SUNLinearSolverContent_PCG())
    __swig_destroy__ = _kinsol.delete__SUNLinearSolverContent_PCG

# Register _SUNLinearSolverContent_PCG in _kinsol:
_kinsol._SUNLinearSolverContent_PCG_swigregister(_SUNLinearSolverContent_PCG)


def SUNLinSol_PCG(y, pretype, maxl, sunctx):
    return _kinsol.SUNLinSol_PCG(y, pretype, maxl, sunctx)

def SUNLinSol_PCGSetPrecType(S, pretype):
    return _kinsol.SUNLinSol_PCGSetPrecType(S, pretype)

def SUNLinSol_PCGSetMaxl(S, maxl):
    return _kinsol.SUNLinSol_PCGSetMaxl(S, maxl)

def SUNLinSolGetType_PCG(S):
    return _kinsol.SUNLinSolGetType_PCG(S)

def SUNLinSolGetID_PCG(S):
    return _kinsol.SUNLinSolGetID_PCG(S)

def SUNLinSolInitialize_PCG(S):
    return _kinsol.SUNLinSolInitialize_PCG(S)

def SUNLinSolSetATimes_PCG(S, A_data, ATimes):
    return _kinsol.SUNLinSolSetATimes_PCG(S, A_data, ATimes)

def SUNLinSolSetPreconditioner_PCG(S, P_data, Pset, Psol):
    return _kinsol.SUNLinSolSetPreconditioner_PCG(S, P_data, Pset, Psol)

def SUNLinSolSetScalingVectors_PCG(S, s, nul):
    return _kinsol.SUNLinSolSetScalingVectors_PCG(S, s, nul)

def SUNLinSolSetZeroGuess_PCG(S, onoff):
    return _kinsol.SUNLinSolSetZeroGuess_PCG(S, onoff)

def SUNLinSolSetup_PCG(S, nul):
    return _kinsol.SUNLinSolSetup_PCG(S, nul)

def SUNLinSolSolve_PCG(S, nul, x, b, tol):
    return _kinsol.SUNLinSolSolve_PCG(S, nul, x, b, tol)

def SUNLinSolNumIters_PCG(S):
    return _kinsol.SUNLinSolNumIters_PCG(S)

def SUNLinSolResNorm_PCG(S):
    return _kinsol.SUNLinSolResNorm_PCG(S)

def SUNLinSolResid_PCG(S):
    return _kinsol.SUNLinSolResid_PCG(S)

def SUNLinSolLastFlag_PCG(S):
    return _kinsol.SUNLinSolLastFlag_PCG(S)

def SUNLinSolSpace_PCG(S, lenrwLS, leniwLS):
    return _kinsol.SUNLinSolSpace_PCG(S, lenrwLS, leniwLS)

def SUNLinSolFree_PCG(S):
    return _kinsol.SUNLinSolFree_PCG(S)

def SUNLinSolSetInfoFile_PCG(LS, info_file):
    return _kinsol.SUNLinSolSetInfoFile_PCG(LS, info_file)

def SUNLinSolSetPrintLevel_PCG(LS, print_level):
    return _kinsol.SUNLinSolSetPrintLevel_PCG(LS, print_level)
SUNSPBCGS_MAXL_DEFAULT = _kinsol.SUNSPBCGS_MAXL_DEFAULT
class _SUNLinearSolverContent_SPBCGS(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    maxl = property(_kinsol._SUNLinearSolverContent_SPBCGS_maxl_get, _kinsol._SUNLinearSolverContent_SPBCGS_maxl_set)
    pretype = property(_kinsol._SUNLinearSolverContent_SPBCGS_pretype_get, _kinsol._SUNLinearSolverContent_SPBCGS_pretype_set)
    zeroguess = property(_kinsol._SUNLinearSolverContent_SPBCGS_zeroguess_get, _kinsol._SUNLinearSolverContent_SPBCGS_zeroguess_set)
    numiters = property(_kinsol._SUNLinearSolverContent_SPBCGS_numiters_get, _kinsol._SUNLinearSolverContent_SPBCGS_numiters_set)
    resnorm = property(_kinsol._SUNLinearSolverContent_SPBCGS_resnorm_get, _kinsol._SUNLinearSolverContent_SPBCGS_resnorm_set)
    last_flag = property(_kinsol._SUNLinearSolverContent_SPBCGS_last_flag_get, _kinsol._SUNLinearSolverContent_SPBCGS_last_flag_set)
    ATimes = property(_kinsol._SUNLinearSolverContent_SPBCGS_ATimes_get, _kinsol._SUNLinearSolverContent_SPBCGS_ATimes_set)
    ATData = property(_kinsol._SUNLinearSolverContent_SPBCGS_ATData_get, _kinsol._SUNLinearSolverContent_SPBCGS_ATData_set)
    Psetup = property(_kinsol._SUNLinearSolverContent_SPBCGS_Psetup_get, _kinsol._SUNLinearSolverContent_SPBCGS_Psetup_set)
    Psolve = property(_kinsol._SUNLinearSolverContent_SPBCGS_Psolve_get, _kinsol._SUNLinearSolverContent_SPBCGS_Psolve_set)
    PData = property(_kinsol._SUNLinearSolverContent_SPBCGS_PData_get, _kinsol._SUNLinearSolverContent_SPBCGS_PData_set)
    s1 = property(_kinsol._SUNLinearSolverContent_SPBCGS_s1_get, _kinsol._SUNLinearSolverContent_SPBCGS_s1_set)
    s2 = property(_kinsol._SUNLinearSolverContent_SPBCGS_s2_get, _kinsol._SUNLinearSolverContent_SPBCGS_s2_set)
    r = property(_kinsol._SUNLinearSolverContent_SPBCGS_r_get, _kinsol._SUNLinearSolverContent_SPBCGS_r_set)
    r_star = property(_kinsol._SUNLinearSolverContent_SPBCGS_r_star_get, _kinsol._SUNLinearSolverContent_SPBCGS_r_star_set)
    p = property(_kinsol._SUNLinearSolverContent_SPBCGS_p_get, _kinsol._SUNLinearSolverContent_SPBCGS_p_set)
    q = property(_kinsol._SUNLinearSolverContent_SPBCGS_q_get, _kinsol._SUNLinearSolverContent_SPBCGS_q_set)
    u = property(_kinsol._SUNLinearSolverContent_SPBCGS_u_get, _kinsol._SUNLinearSolverContent_SPBCGS_u_set)
    Ap = property(_kinsol._SUNLinearSolverContent_SPBCGS_Ap_get, _kinsol._SUNLinearSolverContent_SPBCGS_Ap_set)
    vtemp = property(_kinsol._SUNLinearSolverContent_SPBCGS_vtemp_get, _kinsol._SUNLinearSolverContent_SPBCGS_vtemp_set)
    print_level = property(_kinsol._SUNLinearSolverContent_SPBCGS_print_level_get, _kinsol._SUNLinearSolverContent_SPBCGS_print_level_set)
    info_file = property(_kinsol._SUNLinearSolverContent_SPBCGS_info_file_get, _kinsol._SUNLinearSolverContent_SPBCGS_info_file_set)

    def __init__(self):
        _kinsol._SUNLinearSolverContent_SPBCGS_swiginit(self, _kinsol.new__SUNLinearSolverContent_SPBCGS())
    __swig_destroy__ = _kinsol.delete__SUNLinearSolverContent_SPBCGS

# Register _SUNLinearSolverContent_SPBCGS in _kinsol:
_kinsol._SUNLinearSolverContent_SPBCGS_swigregister(_SUNLinearSolverContent_SPBCGS)


def SUNLinSol_SPBCGS(y, pretype, maxl, sunctx):
    return _kinsol.SUNLinSol_SPBCGS(y, pretype, maxl, sunctx)

def SUNLinSol_SPBCGSSetPrecType(S, pretype):
    return _kinsol.SUNLinSol_SPBCGSSetPrecType(S, pretype)

def SUNLinSol_SPBCGSSetMaxl(S, maxl):
    return _kinsol.SUNLinSol_SPBCGSSetMaxl(S, maxl)

def SUNLinSolGetType_SPBCGS(S):
    return _kinsol.SUNLinSolGetType_SPBCGS(S)

def SUNLinSolGetID_SPBCGS(S):
    return _kinsol.SUNLinSolGetID_SPBCGS(S)

def SUNLinSolInitialize_SPBCGS(S):
    return _kinsol.SUNLinSolInitialize_SPBCGS(S)

def SUNLinSolSetATimes_SPBCGS(S, A_data, ATimes):
    return _kinsol.SUNLinSolSetATimes_SPBCGS(S, A_data, ATimes)

def SUNLinSolSetPreconditioner_SPBCGS(S, P_data, Pset, Psol):
    return _kinsol.SUNLinSolSetPreconditioner_SPBCGS(S, P_data, Pset, Psol)

def SUNLinSolSetScalingVectors_SPBCGS(S, s1, s2):
    return _kinsol.SUNLinSolSetScalingVectors_SPBCGS(S, s1, s2)

def SUNLinSolSetZeroGuess_SPBCGS(S, onoff):
    return _kinsol.SUNLinSolSetZeroGuess_SPBCGS(S, onoff)

def SUNLinSolSetup_SPBCGS(S, A):
    return _kinsol.SUNLinSolSetup_SPBCGS(S, A)

def SUNLinSolSolve_SPBCGS(S, A, x, b, tol):
    return _kinsol.SUNLinSolSolve_SPBCGS(S, A, x, b, tol)

def SUNLinSolNumIters_SPBCGS(S):
    return _kinsol.SUNLinSolNumIters_SPBCGS(S)

def SUNLinSolResNorm_SPBCGS(S):
    return _kinsol.SUNLinSolResNorm_SPBCGS(S)

def SUNLinSolResid_SPBCGS(S):
    return _kinsol.SUNLinSolResid_SPBCGS(S)

def SUNLinSolLastFlag_SPBCGS(S):
    return _kinsol.SUNLinSolLastFlag_SPBCGS(S)

def SUNLinSolSpace_SPBCGS(S, lenrwLS, leniwLS):
    return _kinsol.SUNLinSolSpace_SPBCGS(S, lenrwLS, leniwLS)

def SUNLinSolFree_SPBCGS(S):
    return _kinsol.SUNLinSolFree_SPBCGS(S)

def SUNLinSolSetInfoFile_SPBCGS(S, info_file):
    return _kinsol.SUNLinSolSetInfoFile_SPBCGS(S, info_file)

def SUNLinSolSetPrintLevel_SPBCGS(S, print_level):
    return _kinsol.SUNLinSolSetPrintLevel_SPBCGS(S, print_level)
SUNSPFGMR_MAXL_DEFAULT = _kinsol.SUNSPFGMR_MAXL_DEFAULT
SUNSPFGMR_MAXRS_DEFAULT = _kinsol.SUNSPFGMR_MAXRS_DEFAULT
class _SUNLinearSolverContent_SPFGMR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    maxl = property(_kinsol._SUNLinearSolverContent_SPFGMR_maxl_get, _kinsol._SUNLinearSolverContent_SPFGMR_maxl_set)
    pretype = property(_kinsol._SUNLinearSolverContent_SPFGMR_pretype_get, _kinsol._SUNLinearSolverContent_SPFGMR_pretype_set)
    gstype = property(_kinsol._SUNLinearSolverContent_SPFGMR_gstype_get, _kinsol._SUNLinearSolverContent_SPFGMR_gstype_set)
    max_restarts = property(_kinsol._SUNLinearSolverContent_SPFGMR_max_restarts_get, _kinsol._SUNLinearSolverContent_SPFGMR_max_restarts_set)
    zeroguess = property(_kinsol._SUNLinearSolverContent_SPFGMR_zeroguess_get, _kinsol._SUNLinearSolverContent_SPFGMR_zeroguess_set)
    numiters = property(_kinsol._SUNLinearSolverContent_SPFGMR_numiters_get, _kinsol._SUNLinearSolverContent_SPFGMR_numiters_set)
    resnorm = property(_kinsol._SUNLinearSolverContent_SPFGMR_resnorm_get, _kinsol._SUNLinearSolverContent_SPFGMR_resnorm_set)
    last_flag = property(_kinsol._SUNLinearSolverContent_SPFGMR_last_flag_get, _kinsol._SUNLinearSolverContent_SPFGMR_last_flag_set)
    ATimes = property(_kinsol._SUNLinearSolverContent_SPFGMR_ATimes_get, _kinsol._SUNLinearSolverContent_SPFGMR_ATimes_set)
    ATData = property(_kinsol._SUNLinearSolverContent_SPFGMR_ATData_get, _kinsol._SUNLinearSolverContent_SPFGMR_ATData_set)
    Psetup = property(_kinsol._SUNLinearSolverContent_SPFGMR_Psetup_get, _kinsol._SUNLinearSolverContent_SPFGMR_Psetup_set)
    Psolve = property(_kinsol._SUNLinearSolverContent_SPFGMR_Psolve_get, _kinsol._SUNLinearSolverContent_SPFGMR_Psolve_set)
    PData = property(_kinsol._SUNLinearSolverContent_SPFGMR_PData_get, _kinsol._SUNLinearSolverContent_SPFGMR_PData_set)
    s1 = property(_kinsol._SUNLinearSolverContent_SPFGMR_s1_get, _kinsol._SUNLinearSolverContent_SPFGMR_s1_set)
    s2 = property(_kinsol._SUNLinearSolverContent_SPFGMR_s2_get, _kinsol._SUNLinearSolverContent_SPFGMR_s2_set)
    V = property(_kinsol._SUNLinearSolverContent_SPFGMR_V_get, _kinsol._SUNLinearSolverContent_SPFGMR_V_set)
    Z = property(_kinsol._SUNLinearSolverContent_SPFGMR_Z_get, _kinsol._SUNLinearSolverContent_SPFGMR_Z_set)
    Hes = property(_kinsol._SUNLinearSolverContent_SPFGMR_Hes_get, _kinsol._SUNLinearSolverContent_SPFGMR_Hes_set)
    givens = property(_kinsol._SUNLinearSolverContent_SPFGMR_givens_get, _kinsol._SUNLinearSolverContent_SPFGMR_givens_set)
    xcor = property(_kinsol._SUNLinearSolverContent_SPFGMR_xcor_get, _kinsol._SUNLinearSolverContent_SPFGMR_xcor_set)
    yg = property(_kinsol._SUNLinearSolverContent_SPFGMR_yg_get, _kinsol._SUNLinearSolverContent_SPFGMR_yg_set)
    vtemp = property(_kinsol._SUNLinearSolverContent_SPFGMR_vtemp_get, _kinsol._SUNLinearSolverContent_SPFGMR_vtemp_set)
    cv = property(_kinsol._SUNLinearSolverContent_SPFGMR_cv_get, _kinsol._SUNLinearSolverContent_SPFGMR_cv_set)
    Xv = property(_kinsol._SUNLinearSolverContent_SPFGMR_Xv_get, _kinsol._SUNLinearSolverContent_SPFGMR_Xv_set)
    print_level = property(_kinsol._SUNLinearSolverContent_SPFGMR_print_level_get, _kinsol._SUNLinearSolverContent_SPFGMR_print_level_set)
    info_file = property(_kinsol._SUNLinearSolverContent_SPFGMR_info_file_get, _kinsol._SUNLinearSolverContent_SPFGMR_info_file_set)

    def __init__(self):
        _kinsol._SUNLinearSolverContent_SPFGMR_swiginit(self, _kinsol.new__SUNLinearSolverContent_SPFGMR())
    __swig_destroy__ = _kinsol.delete__SUNLinearSolverContent_SPFGMR

# Register _SUNLinearSolverContent_SPFGMR in _kinsol:
_kinsol._SUNLinearSolverContent_SPFGMR_swigregister(_SUNLinearSolverContent_SPFGMR)


def SUNLinSol_SPFGMR(y, pretype, maxl, sunctx):
    return _kinsol.SUNLinSol_SPFGMR(y, pretype, maxl, sunctx)

def SUNLinSol_SPFGMRSetPrecType(S, pretype):
    return _kinsol.SUNLinSol_SPFGMRSetPrecType(S, pretype)

def SUNLinSol_SPFGMRSetGSType(S, gstype):
    return _kinsol.SUNLinSol_SPFGMRSetGSType(S, gstype)

def SUNLinSol_SPFGMRSetMaxRestarts(S, maxrs):
    return _kinsol.SUNLinSol_SPFGMRSetMaxRestarts(S, maxrs)

def SUNLinSolGetType_SPFGMR(S):
    return _kinsol.SUNLinSolGetType_SPFGMR(S)

def SUNLinSolGetID_SPFGMR(S):
    return _kinsol.SUNLinSolGetID_SPFGMR(S)

def SUNLinSolInitialize_SPFGMR(S):
    return _kinsol.SUNLinSolInitialize_SPFGMR(S)

def SUNLinSolSetATimes_SPFGMR(S, A_data, ATimes):
    return _kinsol.SUNLinSolSetATimes_SPFGMR(S, A_data, ATimes)

def SUNLinSolSetPreconditioner_SPFGMR(S, P_data, Pset, Psol):
    return _kinsol.SUNLinSolSetPreconditioner_SPFGMR(S, P_data, Pset, Psol)

def SUNLinSolSetScalingVectors_SPFGMR(S, s1, s2):
    return _kinsol.SUNLinSolSetScalingVectors_SPFGMR(S, s1, s2)

def SUNLinSolSetZeroGuess_SPFGMR(S, onoff):
    return _kinsol.SUNLinSolSetZeroGuess_SPFGMR(S, onoff)

def SUNLinSolSetup_SPFGMR(S, A):
    return _kinsol.SUNLinSolSetup_SPFGMR(S, A)

def SUNLinSolSolve_SPFGMR(S, A, x, b, tol):
    return _kinsol.SUNLinSolSolve_SPFGMR(S, A, x, b, tol)

def SUNLinSolNumIters_SPFGMR(S):
    return _kinsol.SUNLinSolNumIters_SPFGMR(S)

def SUNLinSolResNorm_SPFGMR(S):
    return _kinsol.SUNLinSolResNorm_SPFGMR(S)

def SUNLinSolResid_SPFGMR(S):
    return _kinsol.SUNLinSolResid_SPFGMR(S)

def SUNLinSolLastFlag_SPFGMR(S):
    return _kinsol.SUNLinSolLastFlag_SPFGMR(S)

def SUNLinSolSpace_SPFGMR(S, lenrwLS, leniwLS):
    return _kinsol.SUNLinSolSpace_SPFGMR(S, lenrwLS, leniwLS)

def SUNLinSolFree_SPFGMR(S):
    return _kinsol.SUNLinSolFree_SPFGMR(S)

def SUNLinSolSetInfoFile_SPFGMR(LS, info_file):
    return _kinsol.SUNLinSolSetInfoFile_SPFGMR(LS, info_file)

def SUNLinSolSetPrintLevel_SPFGMR(LS, print_level):
    return _kinsol.SUNLinSolSetPrintLevel_SPFGMR(LS, print_level)
SUNSPGMR_MAXL_DEFAULT = _kinsol.SUNSPGMR_MAXL_DEFAULT
SUNSPGMR_MAXRS_DEFAULT = _kinsol.SUNSPGMR_MAXRS_DEFAULT
class _SUNLinearSolverContent_SPGMR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    maxl = property(_kinsol._SUNLinearSolverContent_SPGMR_maxl_get, _kinsol._SUNLinearSolverContent_SPGMR_maxl_set)
    pretype = property(_kinsol._SUNLinearSolverContent_SPGMR_pretype_get, _kinsol._SUNLinearSolverContent_SPGMR_pretype_set)
    gstype = property(_kinsol._SUNLinearSolverContent_SPGMR_gstype_get, _kinsol._SUNLinearSolverContent_SPGMR_gstype_set)
    max_restarts = property(_kinsol._SUNLinearSolverContent_SPGMR_max_restarts_get, _kinsol._SUNLinearSolverContent_SPGMR_max_restarts_set)
    zeroguess = property(_kinsol._SUNLinearSolverContent_SPGMR_zeroguess_get, _kinsol._SUNLinearSolverContent_SPGMR_zeroguess_set)
    numiters = property(_kinsol._SUNLinearSolverContent_SPGMR_numiters_get, _kinsol._SUNLinearSolverContent_SPGMR_numiters_set)
    resnorm = property(_kinsol._SUNLinearSolverContent_SPGMR_resnorm_get, _kinsol._SUNLinearSolverContent_SPGMR_resnorm_set)
    last_flag = property(_kinsol._SUNLinearSolverContent_SPGMR_last_flag_get, _kinsol._SUNLinearSolverContent_SPGMR_last_flag_set)
    ATimes = property(_kinsol._SUNLinearSolverContent_SPGMR_ATimes_get, _kinsol._SUNLinearSolverContent_SPGMR_ATimes_set)
    ATData = property(_kinsol._SUNLinearSolverContent_SPGMR_ATData_get, _kinsol._SUNLinearSolverContent_SPGMR_ATData_set)
    Psetup = property(_kinsol._SUNLinearSolverContent_SPGMR_Psetup_get, _kinsol._SUNLinearSolverContent_SPGMR_Psetup_set)
    Psolve = property(_kinsol._SUNLinearSolverContent_SPGMR_Psolve_get, _kinsol._SUNLinearSolverContent_SPGMR_Psolve_set)
    PData = property(_kinsol._SUNLinearSolverContent_SPGMR_PData_get, _kinsol._SUNLinearSolverContent_SPGMR_PData_set)
    s1 = property(_kinsol._SUNLinearSolverContent_SPGMR_s1_get, _kinsol._SUNLinearSolverContent_SPGMR_s1_set)
    s2 = property(_kinsol._SUNLinearSolverContent_SPGMR_s2_get, _kinsol._SUNLinearSolverContent_SPGMR_s2_set)
    V = property(_kinsol._SUNLinearSolverContent_SPGMR_V_get, _kinsol._SUNLinearSolverContent_SPGMR_V_set)
    Hes = property(_kinsol._SUNLinearSolverContent_SPGMR_Hes_get, _kinsol._SUNLinearSolverContent_SPGMR_Hes_set)
    givens = property(_kinsol._SUNLinearSolverContent_SPGMR_givens_get, _kinsol._SUNLinearSolverContent_SPGMR_givens_set)
    xcor = property(_kinsol._SUNLinearSolverContent_SPGMR_xcor_get, _kinsol._SUNLinearSolverContent_SPGMR_xcor_set)
    yg = property(_kinsol._SUNLinearSolverContent_SPGMR_yg_get, _kinsol._SUNLinearSolverContent_SPGMR_yg_set)
    vtemp = property(_kinsol._SUNLinearSolverContent_SPGMR_vtemp_get, _kinsol._SUNLinearSolverContent_SPGMR_vtemp_set)
    cv = property(_kinsol._SUNLinearSolverContent_SPGMR_cv_get, _kinsol._SUNLinearSolverContent_SPGMR_cv_set)
    Xv = property(_kinsol._SUNLinearSolverContent_SPGMR_Xv_get, _kinsol._SUNLinearSolverContent_SPGMR_Xv_set)
    print_level = property(_kinsol._SUNLinearSolverContent_SPGMR_print_level_get, _kinsol._SUNLinearSolverContent_SPGMR_print_level_set)
    info_file = property(_kinsol._SUNLinearSolverContent_SPGMR_info_file_get, _kinsol._SUNLinearSolverContent_SPGMR_info_file_set)

    def __init__(self):
        _kinsol._SUNLinearSolverContent_SPGMR_swiginit(self, _kinsol.new__SUNLinearSolverContent_SPGMR())
    __swig_destroy__ = _kinsol.delete__SUNLinearSolverContent_SPGMR

# Register _SUNLinearSolverContent_SPGMR in _kinsol:
_kinsol._SUNLinearSolverContent_SPGMR_swigregister(_SUNLinearSolverContent_SPGMR)


def SUNLinSol_SPGMR(y, pretype, maxl, sunctx):
    return _kinsol.SUNLinSol_SPGMR(y, pretype, maxl, sunctx)

def SUNLinSol_SPGMRSetPrecType(S, pretype):
    return _kinsol.SUNLinSol_SPGMRSetPrecType(S, pretype)

def SUNLinSol_SPGMRSetGSType(S, gstype):
    return _kinsol.SUNLinSol_SPGMRSetGSType(S, gstype)

def SUNLinSol_SPGMRSetMaxRestarts(S, maxrs):
    return _kinsol.SUNLinSol_SPGMRSetMaxRestarts(S, maxrs)

def SUNLinSolGetType_SPGMR(S):
    return _kinsol.SUNLinSolGetType_SPGMR(S)

def SUNLinSolGetID_SPGMR(S):
    return _kinsol.SUNLinSolGetID_SPGMR(S)

def SUNLinSolInitialize_SPGMR(S):
    return _kinsol.SUNLinSolInitialize_SPGMR(S)

def SUNLinSolSetATimes_SPGMR(S, A_data, ATimes):
    return _kinsol.SUNLinSolSetATimes_SPGMR(S, A_data, ATimes)

def SUNLinSolSetPreconditioner_SPGMR(S, P_data, Pset, Psol):
    return _kinsol.SUNLinSolSetPreconditioner_SPGMR(S, P_data, Pset, Psol)

def SUNLinSolSetScalingVectors_SPGMR(S, s1, s2):
    return _kinsol.SUNLinSolSetScalingVectors_SPGMR(S, s1, s2)

def SUNLinSolSetZeroGuess_SPGMR(S, onff):
    return _kinsol.SUNLinSolSetZeroGuess_SPGMR(S, onff)

def SUNLinSolSetup_SPGMR(S, A):
    return _kinsol.SUNLinSolSetup_SPGMR(S, A)

def SUNLinSolSolve_SPGMR(S, A, x, b, tol):
    return _kinsol.SUNLinSolSolve_SPGMR(S, A, x, b, tol)

def SUNLinSolNumIters_SPGMR(S):
    return _kinsol.SUNLinSolNumIters_SPGMR(S)

def SUNLinSolResNorm_SPGMR(S):
    return _kinsol.SUNLinSolResNorm_SPGMR(S)

def SUNLinSolResid_SPGMR(S):
    return _kinsol.SUNLinSolResid_SPGMR(S)

def SUNLinSolLastFlag_SPGMR(S):
    return _kinsol.SUNLinSolLastFlag_SPGMR(S)

def SUNLinSolSpace_SPGMR(S, lenrwLS, leniwLS):
    return _kinsol.SUNLinSolSpace_SPGMR(S, lenrwLS, leniwLS)

def SUNLinSolFree_SPGMR(S):
    return _kinsol.SUNLinSolFree_SPGMR(S)

def SUNLinSolSetInfoFile_SPGMR(LS, info_file):
    return _kinsol.SUNLinSolSetInfoFile_SPGMR(LS, info_file)

def SUNLinSolSetPrintLevel_SPGMR(LS, print_level):
    return _kinsol.SUNLinSolSetPrintLevel_SPGMR(LS, print_level)
SUNSPTFQMR_MAXL_DEFAULT = _kinsol.SUNSPTFQMR_MAXL_DEFAULT
class _SUNLinearSolverContent_SPTFQMR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    maxl = property(_kinsol._SUNLinearSolverContent_SPTFQMR_maxl_get, _kinsol._SUNLinearSolverContent_SPTFQMR_maxl_set)
    pretype = property(_kinsol._SUNLinearSolverContent_SPTFQMR_pretype_get, _kinsol._SUNLinearSolverContent_SPTFQMR_pretype_set)
    zeroguess = property(_kinsol._SUNLinearSolverContent_SPTFQMR_zeroguess_get, _kinsol._SUNLinearSolverContent_SPTFQMR_zeroguess_set)
    numiters = property(_kinsol._SUNLinearSolverContent_SPTFQMR_numiters_get, _kinsol._SUNLinearSolverContent_SPTFQMR_numiters_set)
    resnorm = property(_kinsol._SUNLinearSolverContent_SPTFQMR_resnorm_get, _kinsol._SUNLinearSolverContent_SPTFQMR_resnorm_set)
    last_flag = property(_kinsol._SUNLinearSolverContent_SPTFQMR_last_flag_get, _kinsol._SUNLinearSolverContent_SPTFQMR_last_flag_set)
    ATimes = property(_kinsol._SUNLinearSolverContent_SPTFQMR_ATimes_get, _kinsol._SUNLinearSolverContent_SPTFQMR_ATimes_set)
    ATData = property(_kinsol._SUNLinearSolverContent_SPTFQMR_ATData_get, _kinsol._SUNLinearSolverContent_SPTFQMR_ATData_set)
    Psetup = property(_kinsol._SUNLinearSolverContent_SPTFQMR_Psetup_get, _kinsol._SUNLinearSolverContent_SPTFQMR_Psetup_set)
    Psolve = property(_kinsol._SUNLinearSolverContent_SPTFQMR_Psolve_get, _kinsol._SUNLinearSolverContent_SPTFQMR_Psolve_set)
    PData = property(_kinsol._SUNLinearSolverContent_SPTFQMR_PData_get, _kinsol._SUNLinearSolverContent_SPTFQMR_PData_set)
    s1 = property(_kinsol._SUNLinearSolverContent_SPTFQMR_s1_get, _kinsol._SUNLinearSolverContent_SPTFQMR_s1_set)
    s2 = property(_kinsol._SUNLinearSolverContent_SPTFQMR_s2_get, _kinsol._SUNLinearSolverContent_SPTFQMR_s2_set)
    r_star = property(_kinsol._SUNLinearSolverContent_SPTFQMR_r_star_get, _kinsol._SUNLinearSolverContent_SPTFQMR_r_star_set)
    q = property(_kinsol._SUNLinearSolverContent_SPTFQMR_q_get, _kinsol._SUNLinearSolverContent_SPTFQMR_q_set)
    d = property(_kinsol._SUNLinearSolverContent_SPTFQMR_d_get, _kinsol._SUNLinearSolverContent_SPTFQMR_d_set)
    v = property(_kinsol._SUNLinearSolverContent_SPTFQMR_v_get, _kinsol._SUNLinearSolverContent_SPTFQMR_v_set)
    p = property(_kinsol._SUNLinearSolverContent_SPTFQMR_p_get, _kinsol._SUNLinearSolverContent_SPTFQMR_p_set)
    r = property(_kinsol._SUNLinearSolverContent_SPTFQMR_r_get, _kinsol._SUNLinearSolverContent_SPTFQMR_r_set)
    u = property(_kinsol._SUNLinearSolverContent_SPTFQMR_u_get, _kinsol._SUNLinearSolverContent_SPTFQMR_u_set)
    vtemp1 = property(_kinsol._SUNLinearSolverContent_SPTFQMR_vtemp1_get, _kinsol._SUNLinearSolverContent_SPTFQMR_vtemp1_set)
    vtemp2 = property(_kinsol._SUNLinearSolverContent_SPTFQMR_vtemp2_get, _kinsol._SUNLinearSolverContent_SPTFQMR_vtemp2_set)
    vtemp3 = property(_kinsol._SUNLinearSolverContent_SPTFQMR_vtemp3_get, _kinsol._SUNLinearSolverContent_SPTFQMR_vtemp3_set)
    print_level = property(_kinsol._SUNLinearSolverContent_SPTFQMR_print_level_get, _kinsol._SUNLinearSolverContent_SPTFQMR_print_level_set)
    info_file = property(_kinsol._SUNLinearSolverContent_SPTFQMR_info_file_get, _kinsol._SUNLinearSolverContent_SPTFQMR_info_file_set)

    def __init__(self):
        _kinsol._SUNLinearSolverContent_SPTFQMR_swiginit(self, _kinsol.new__SUNLinearSolverContent_SPTFQMR())
    __swig_destroy__ = _kinsol.delete__SUNLinearSolverContent_SPTFQMR

# Register _SUNLinearSolverContent_SPTFQMR in _kinsol:
_kinsol._SUNLinearSolverContent_SPTFQMR_swigregister(_SUNLinearSolverContent_SPTFQMR)


def SUNLinSol_SPTFQMR(y, pretype, maxl, sunctx):
    return _kinsol.SUNLinSol_SPTFQMR(y, pretype, maxl, sunctx)

def SUNLinSol_SPTFQMRSetPrecType(S, pretype):
    return _kinsol.SUNLinSol_SPTFQMRSetPrecType(S, pretype)

def SUNLinSol_SPTFQMRSetMaxl(S, maxl):
    return _kinsol.SUNLinSol_SPTFQMRSetMaxl(S, maxl)

def SUNLinSolGetType_SPTFQMR(S):
    return _kinsol.SUNLinSolGetType_SPTFQMR(S)

def SUNLinSolGetID_SPTFQMR(S):
    return _kinsol.SUNLinSolGetID_SPTFQMR(S)

def SUNLinSolInitialize_SPTFQMR(S):
    return _kinsol.SUNLinSolInitialize_SPTFQMR(S)

def SUNLinSolSetATimes_SPTFQMR(S, A_data, ATimes):
    return _kinsol.SUNLinSolSetATimes_SPTFQMR(S, A_data, ATimes)

def SUNLinSolSetPreconditioner_SPTFQMR(S, P_data, Pset, Psol):
    return _kinsol.SUNLinSolSetPreconditioner_SPTFQMR(S, P_data, Pset, Psol)

def SUNLinSolSetScalingVectors_SPTFQMR(S, s1, s2):
    return _kinsol.SUNLinSolSetScalingVectors_SPTFQMR(S, s1, s2)

def SUNLinSolSetZeroGuess_SPTFQMR(S, onoff):
    return _kinsol.SUNLinSolSetZeroGuess_SPTFQMR(S, onoff)

def SUNLinSolSetup_SPTFQMR(S, A):
    return _kinsol.SUNLinSolSetup_SPTFQMR(S, A)

def SUNLinSolSolve_SPTFQMR(S, A, x, b, tol):
    return _kinsol.SUNLinSolSolve_SPTFQMR(S, A, x, b, tol)

def SUNLinSolNumIters_SPTFQMR(S):
    return _kinsol.SUNLinSolNumIters_SPTFQMR(S)

def SUNLinSolResNorm_SPTFQMR(S):
    return _kinsol.SUNLinSolResNorm_SPTFQMR(S)

def SUNLinSolResid_SPTFQMR(S):
    return _kinsol.SUNLinSolResid_SPTFQMR(S)

def SUNLinSolLastFlag_SPTFQMR(S):
    return _kinsol.SUNLinSolLastFlag_SPTFQMR(S)

def SUNLinSolSpace_SPTFQMR(S, lenrwLS, leniwLS):
    return _kinsol.SUNLinSolSpace_SPTFQMR(S, lenrwLS, leniwLS)

def SUNLinSolFree_SPTFQMR(S):
    return _kinsol.SUNLinSolFree_SPTFQMR(S)

def SUNLinSolSetInfoFile_SPTFQMR(LS, info_file):
    return _kinsol.SUNLinSolSetInfoFile_SPTFQMR(LS, info_file)

def SUNLinSolSetPrintLevel_SPTFQMR(LS, print_level):
    return _kinsol.SUNLinSolSetPrintLevel_SPTFQMR(LS, print_level)
SUNNONLINEARSOLVER_ROOTFIND = _kinsol.SUNNONLINEARSOLVER_ROOTFIND
SUNNONLINEARSOLVER_FIXEDPOINT = _kinsol.SUNNONLINEARSOLVER_FIXEDPOINT
class SUNNonlinearSolver_Ops(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    gettype = property(_kinsol.SUNNonlinearSolver_Ops_gettype_get, _kinsol.SUNNonlinearSolver_Ops_gettype_set)
    initialize = property(_kinsol.SUNNonlinearSolver_Ops_initialize_get, _kinsol.SUNNonlinearSolver_Ops_initialize_set)
    setup = property(_kinsol.SUNNonlinearSolver_Ops_setup_get, _kinsol.SUNNonlinearSolver_Ops_setup_set)
    solve = property(_kinsol.SUNNonlinearSolver_Ops_solve_get, _kinsol.SUNNonlinearSolver_Ops_solve_set)
    free = property(_kinsol.SUNNonlinearSolver_Ops_free_get, _kinsol.SUNNonlinearSolver_Ops_free_set)
    setsysfn = property(_kinsol.SUNNonlinearSolver_Ops_setsysfn_get, _kinsol.SUNNonlinearSolver_Ops_setsysfn_set)
    setlsetupfn = property(_kinsol.SUNNonlinearSolver_Ops_setlsetupfn_get, _kinsol.SUNNonlinearSolver_Ops_setlsetupfn_set)
    setlsolvefn = property(_kinsol.SUNNonlinearSolver_Ops_setlsolvefn_get, _kinsol.SUNNonlinearSolver_Ops_setlsolvefn_set)
    setctestfn = property(_kinsol.SUNNonlinearSolver_Ops_setctestfn_get, _kinsol.SUNNonlinearSolver_Ops_setctestfn_set)
    setmaxiters = property(_kinsol.SUNNonlinearSolver_Ops_setmaxiters_get, _kinsol.SUNNonlinearSolver_Ops_setmaxiters_set)
    getnumiters = property(_kinsol.SUNNonlinearSolver_Ops_getnumiters_get, _kinsol.SUNNonlinearSolver_Ops_getnumiters_set)
    getcuriter = property(_kinsol.SUNNonlinearSolver_Ops_getcuriter_get, _kinsol.SUNNonlinearSolver_Ops_getcuriter_set)
    getnumconvfails = property(_kinsol.SUNNonlinearSolver_Ops_getnumconvfails_get, _kinsol.SUNNonlinearSolver_Ops_getnumconvfails_set)

    def __init__(self):
        _kinsol.SUNNonlinearSolver_Ops_swiginit(self, _kinsol.new_SUNNonlinearSolver_Ops())
    __swig_destroy__ = _kinsol.delete_SUNNonlinearSolver_Ops

# Register SUNNonlinearSolver_Ops in _kinsol:
_kinsol.SUNNonlinearSolver_Ops_swigregister(SUNNonlinearSolver_Ops)

class SUNNonlinearSolver(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    content = property(_kinsol.SUNNonlinearSolver_content_get, _kinsol.SUNNonlinearSolver_content_set)
    ops = property(_kinsol.SUNNonlinearSolver_ops_get, _kinsol.SUNNonlinearSolver_ops_set)
    sunctx = property(_kinsol.SUNNonlinearSolver_sunctx_get, _kinsol.SUNNonlinearSolver_sunctx_set)

    def __init__(self):
        _kinsol.SUNNonlinearSolver_swiginit(self, _kinsol.new_SUNNonlinearSolver())
    __swig_destroy__ = _kinsol.delete_SUNNonlinearSolver

# Register SUNNonlinearSolver in _kinsol:
_kinsol.SUNNonlinearSolver_swigregister(SUNNonlinearSolver)


def SUNNonlinSolNewEmpty(sunctx):
    return _kinsol.SUNNonlinSolNewEmpty(sunctx)

def SUNNonlinSolFreeEmpty(NLS):
    return _kinsol.SUNNonlinSolFreeEmpty(NLS)

def SUNNonlinSolGetType(NLS):
    return _kinsol.SUNNonlinSolGetType(NLS)

def SUNNonlinSolInitialize(NLS):
    return _kinsol.SUNNonlinSolInitialize(NLS)

def SUNNonlinSolSetup(NLS, y, mem):
    return _kinsol.SUNNonlinSolSetup(NLS, y, mem)

def SUNNonlinSolSolve(NLS, y0, y, w, tol, callLSetup, mem):
    return _kinsol.SUNNonlinSolSolve(NLS, y0, y, w, tol, callLSetup, mem)

def SUNNonlinSolFree(NLS):
    return _kinsol.SUNNonlinSolFree(NLS)

def SUNNonlinSolSetSysFn(NLS, SysFn):
    return _kinsol.SUNNonlinSolSetSysFn(NLS, SysFn)

def SUNNonlinSolSetLSetupFn(NLS, SetupFn):
    return _kinsol.SUNNonlinSolSetLSetupFn(NLS, SetupFn)

def SUNNonlinSolSetLSolveFn(NLS, SolveFn):
    return _kinsol.SUNNonlinSolSetLSolveFn(NLS, SolveFn)

def SUNNonlinSolSetConvTestFn(NLS, CTestFn, ctest_data):
    return _kinsol.SUNNonlinSolSetConvTestFn(NLS, CTestFn, ctest_data)

def SUNNonlinSolSetMaxIters(NLS, maxiters):
    return _kinsol.SUNNonlinSolSetMaxIters(NLS, maxiters)

def SUNNonlinSolGetNumIters(NLS, niters):
    return _kinsol.SUNNonlinSolGetNumIters(NLS, niters)

def SUNNonlinSolGetCurIter(NLS, iter):
    return _kinsol.SUNNonlinSolGetCurIter(NLS, iter)

def SUNNonlinSolGetNumConvFails(NLS, nconvfails):
    return _kinsol.SUNNonlinSolGetNumConvFails(NLS, nconvfails)
SUN_NLS_SUCCESS = _kinsol.SUN_NLS_SUCCESS
SUN_NLS_CONTINUE = _kinsol.SUN_NLS_CONTINUE
SUN_NLS_CONV_RECVR = _kinsol.SUN_NLS_CONV_RECVR
SUN_NLS_MEM_NULL = _kinsol.SUN_NLS_MEM_NULL
SUN_NLS_MEM_FAIL = _kinsol.SUN_NLS_MEM_FAIL
SUN_NLS_ILL_INPUT = _kinsol.SUN_NLS_ILL_INPUT
SUN_NLS_VECTOROP_ERR = _kinsol.SUN_NLS_VECTOROP_ERR
SUN_NLS_EXT_FAIL = _kinsol.SUN_NLS_EXT_FAIL
SUN_NLS_MSG_RESIDUAL = _kinsol.SUN_NLS_MSG_RESIDUAL
KIN_SUCCESS = _kinsol.KIN_SUCCESS
KIN_INITIAL_GUESS_OK = _kinsol.KIN_INITIAL_GUESS_OK
KIN_STEP_LT_STPTOL = _kinsol.KIN_STEP_LT_STPTOL
KIN_WARNING = _kinsol.KIN_WARNING
KIN_MEM_NULL = _kinsol.KIN_MEM_NULL
KIN_ILL_INPUT = _kinsol.KIN_ILL_INPUT
KIN_NO_MALLOC = _kinsol.KIN_NO_MALLOC
KIN_MEM_FAIL = _kinsol.KIN_MEM_FAIL
KIN_LINESEARCH_NONCONV = _kinsol.KIN_LINESEARCH_NONCONV
KIN_MAXITER_REACHED = _kinsol.KIN_MAXITER_REACHED
KIN_MXNEWT_5X_EXCEEDED = _kinsol.KIN_MXNEWT_5X_EXCEEDED
KIN_LINESEARCH_BCFAIL = _kinsol.KIN_LINESEARCH_BCFAIL
KIN_LINSOLV_NO_RECOVERY = _kinsol.KIN_LINSOLV_NO_RECOVERY
KIN_LINIT_FAIL = _kinsol.KIN_LINIT_FAIL
KIN_LSETUP_FAIL = _kinsol.KIN_LSETUP_FAIL
KIN_LSOLVE_FAIL = _kinsol.KIN_LSOLVE_FAIL
KIN_SYSFUNC_FAIL = _kinsol.KIN_SYSFUNC_FAIL
KIN_FIRST_SYSFUNC_ERR = _kinsol.KIN_FIRST_SYSFUNC_ERR
KIN_REPTD_SYSFUNC_ERR = _kinsol.KIN_REPTD_SYSFUNC_ERR
KIN_VECTOROP_ERR = _kinsol.KIN_VECTOROP_ERR
KIN_CONTEXT_ERR = _kinsol.KIN_CONTEXT_ERR
KIN_ORTH_MGS = _kinsol.KIN_ORTH_MGS
KIN_ORTH_ICWY = _kinsol.KIN_ORTH_ICWY
KIN_ORTH_CGS2 = _kinsol.KIN_ORTH_CGS2
KIN_ORTH_DCGS2 = _kinsol.KIN_ORTH_DCGS2
KIN_ETACHOICE1 = _kinsol.KIN_ETACHOICE1
KIN_ETACHOICE2 = _kinsol.KIN_ETACHOICE2
KIN_ETACONSTANT = _kinsol.KIN_ETACONSTANT
KIN_NONE = _kinsol.KIN_NONE
KIN_LINESEARCH = _kinsol.KIN_LINESEARCH
KIN_PICARD = _kinsol.KIN_PICARD
KIN_FP = _kinsol.KIN_FP

def KINCreate(sunctx):
    return _kinsol.KINCreate(sunctx)

def KINInit(kinmem, func, tmpl):
    return _kinsol.KINInit(kinmem, func, tmpl)

def KINSol(kinmem, uu, strategy, u_scale, f_scale):
    return _kinsol.KINSol(kinmem, uu, strategy, u_scale, f_scale)

def KINSetErrHandlerFn(kinmem, ehfun, eh_data):
    return _kinsol.KINSetErrHandlerFn(kinmem, ehfun, eh_data)

def KINSetErrFile(kinmem, errfp):
    return _kinsol.KINSetErrFile(kinmem, errfp)

def KINSetErrFilename(kinmem, filename):
    return _kinsol.KINSetErrFilename(kinmem, filename)

def KINSetInfoHandlerFn(kinmem, ihfun, ih_data):
    return _kinsol.KINSetInfoHandlerFn(kinmem, ihfun, ih_data)

def KINSetInfoFile(kinmem, infofp):
    return _kinsol.KINSetInfoFile(kinmem, infofp)

def KINSetUserData(kinmem, user_data):
    return _kinsol.KINSetUserData(kinmem, user_data)

def KINSetPrintLevel(kinmem, printfl):
    return _kinsol.KINSetPrintLevel(kinmem, printfl)

def KINSetDamping(kinmem, beta):
    return _kinsol.KINSetDamping(kinmem, beta)

def KINSetMAA(kinmem, maa):
    return _kinsol.KINSetMAA(kinmem, maa)

def KINSetOrthAA(kinmem, orthaa):
    return _kinsol.KINSetOrthAA(kinmem, orthaa)

def KINSetDelayAA(kinmem, delay):
    return _kinsol.KINSetDelayAA(kinmem, delay)

def KINSetDampingAA(kinmem, beta):
    return _kinsol.KINSetDampingAA(kinmem, beta)

def KINSetReturnNewest(kinmem, ret_newest):
    return _kinsol.KINSetReturnNewest(kinmem, ret_newest)

def KINSetNumMaxIters(kinmem, mxiter):
    return _kinsol.KINSetNumMaxIters(kinmem, mxiter)

def KINSetNoInitSetup(kinmem, noInitSetup):
    return _kinsol.KINSetNoInitSetup(kinmem, noInitSetup)

def KINSetNoResMon(kinmem, noNNIResMon):
    return _kinsol.KINSetNoResMon(kinmem, noNNIResMon)

def KINSetMaxSetupCalls(kinmem, msbset):
    return _kinsol.KINSetMaxSetupCalls(kinmem, msbset)

def KINSetMaxSubSetupCalls(kinmem, msbsetsub):
    return _kinsol.KINSetMaxSubSetupCalls(kinmem, msbsetsub)

def KINSetEtaForm(kinmem, etachoice):
    return _kinsol.KINSetEtaForm(kinmem, etachoice)

def KINSetEtaConstValue(kinmem, eta):
    return _kinsol.KINSetEtaConstValue(kinmem, eta)

def KINSetEtaParams(kinmem, egamma, ealpha):
    return _kinsol.KINSetEtaParams(kinmem, egamma, ealpha)

def KINSetResMonParams(kinmem, omegamin, omegamax):
    return _kinsol.KINSetResMonParams(kinmem, omegamin, omegamax)

def KINSetResMonConstValue(kinmem, omegaconst):
    return _kinsol.KINSetResMonConstValue(kinmem, omegaconst)

def KINSetNoMinEps(kinmem, noMinEps):
    return _kinsol.KINSetNoMinEps(kinmem, noMinEps)

def KINSetMaxNewtonStep(kinmem, mxnewtstep):
    return _kinsol.KINSetMaxNewtonStep(kinmem, mxnewtstep)

def KINSetMaxBetaFails(kinmem, mxnbcf):
    return _kinsol.KINSetMaxBetaFails(kinmem, mxnbcf)

def KINSetRelErrFunc(kinmem, relfunc):
    return _kinsol.KINSetRelErrFunc(kinmem, relfunc)

def KINSetFuncNormTol(kinmem, fnormtol):
    return _kinsol.KINSetFuncNormTol(kinmem, fnormtol)

def KINSetScaledStepTol(kinmem, scsteptol):
    return _kinsol.KINSetScaledStepTol(kinmem, scsteptol)

def KINSetConstraints(kinmem, constraints):
    return _kinsol.KINSetConstraints(kinmem, constraints)

def KINSetSysFunc(kinmem, func):
    return _kinsol.KINSetSysFunc(kinmem, func)

def KINGetWorkSpace(kinmem):
    return _kinsol.KINGetWorkSpace(kinmem)

def KINGetNumNonlinSolvIters(kinmem):
    return _kinsol.KINGetNumNonlinSolvIters(kinmem)

def KINGetNumFuncEvals(kinmem):
    return _kinsol.KINGetNumFuncEvals(kinmem)

def KINGetNumBetaCondFails(kinmem):
    return _kinsol.KINGetNumBetaCondFails(kinmem)

def KINGetNumBacktrackOps(kinmem):
    return _kinsol.KINGetNumBacktrackOps(kinmem)

def KINGetFuncNorm(kinmem):
    return _kinsol.KINGetFuncNorm(kinmem)

def KINGetStepLength(kinmem):
    return _kinsol.KINGetStepLength(kinmem)

def KINGetReturnFlagName(flag):
    return _kinsol.KINGetReturnFlagName(flag)

def KINFree(kinmem):
    return _kinsol.KINFree(kinmem)

def KINSetJacTimesVecSysFn(kinmem, jtimesSysFn):
    return _kinsol.KINSetJacTimesVecSysFn(kinmem, jtimesSysFn)

def KINSetDebugFile(kinmem, debugfp):
    return _kinsol.KINSetDebugFile(kinmem, debugfp)

def KINPyRegister_KINPySysFn(f):
    return _kinsol.KINPyRegister_KINPySysFn(f)

def KINPyRegister_KINPyErrHandlerFn(f):
    return _kinsol.KINPyRegister_KINPyErrHandlerFn(f)

def KINPyRegister_KINPyInfoHandlerFn(f):
    return _kinsol.KINPyRegister_KINPyInfoHandlerFn(f)
KINBBDPRE_SUCCESS = _kinsol.KINBBDPRE_SUCCESS
KINBBDPRE_PDATA_NULL = _kinsol.KINBBDPRE_PDATA_NULL
KINBBDPRE_FUNC_UNRECVR = _kinsol.KINBBDPRE_FUNC_UNRECVR

def KINBBDPrecInit(kinmem, Nlocal, mudq, mldq, mukeep, mlkeep, dq_rel_uu, gloc, gcomm):
    return _kinsol.KINBBDPrecInit(kinmem, Nlocal, mudq, mldq, mukeep, mlkeep, dq_rel_uu, gloc, gcomm)

def KINBBDPrecGetWorkSpace(kinmem):
    return _kinsol.KINBBDPrecGetWorkSpace(kinmem)

def KINBBDPrecGetNumGfnEvals(kinmem):
    return _kinsol.KINBBDPrecGetNumGfnEvals(kinmem)
KINLS_SUCCESS = _kinsol.KINLS_SUCCESS
KINLS_MEM_NULL = _kinsol.KINLS_MEM_NULL
KINLS_LMEM_NULL = _kinsol.KINLS_LMEM_NULL
KINLS_ILL_INPUT = _kinsol.KINLS_ILL_INPUT
KINLS_MEM_FAIL = _kinsol.KINLS_MEM_FAIL
KINLS_PMEM_NULL = _kinsol.KINLS_PMEM_NULL
KINLS_JACFUNC_ERR = _kinsol.KINLS_JACFUNC_ERR
KINLS_SUNMAT_FAIL = _kinsol.KINLS_SUNMAT_FAIL
KINLS_SUNLS_FAIL = _kinsol.KINLS_SUNLS_FAIL

def KINSetLinearSolver(kinmem, LS, A):
    return _kinsol.KINSetLinearSolver(kinmem, LS, A)

def KINSetJacFn(kinmem, jac):
    return _kinsol.KINSetJacFn(kinmem, jac)

def KINSetPreconditioner(kinmem, psetup, psolve):
    return _kinsol.KINSetPreconditioner(kinmem, psetup, psolve)

def KINSetJacTimesVecFn(kinmem, jtv):
    return _kinsol.KINSetJacTimesVecFn(kinmem, jtv)

def KINGetLinWorkSpace(kinmem):
    return _kinsol.KINGetLinWorkSpace(kinmem)

def KINGetNumJacEvals(kinmem):
    return _kinsol.KINGetNumJacEvals(kinmem)

def KINGetNumLinFuncEvals(kinmem):
    return _kinsol.KINGetNumLinFuncEvals(kinmem)

def KINGetNumPrecEvals(kinmem):
    return _kinsol.KINGetNumPrecEvals(kinmem)

def KINGetNumPrecSolves(kinmem):
    return _kinsol.KINGetNumPrecSolves(kinmem)

def KINGetNumLinIters(kinmem):
    return _kinsol.KINGetNumLinIters(kinmem)

def KINGetNumLinConvFails(kinmem):
    return _kinsol.KINGetNumLinConvFails(kinmem)

def KINGetNumJtimesEvals(kinmem):
    return _kinsol.KINGetNumJtimesEvals(kinmem)

def KINGetLastLinFlag(kinmem):
    return _kinsol.KINGetLastLinFlag(kinmem)

def KINGetLinReturnFlagName(flag):
    return _kinsol.KINGetLinReturnFlagName(flag)


import ctypes

# We provide the ctypes for all the callback functions in KINSol here as
# a convenience to our users. They could always define it themselves too.
class cfunctypes():
  KINSysFn = [ctypes.CFUNCTYPE(ctypes.c_int, ctypes.POINTER(ctypes.c_double), ctypes.c_int, ctypes.POINTER(ctypes.c_double), ctypes.c_int, ctypes.py_object),
               _kinsol.KINPyRegister_KINPySysFn]

  KINErrHandlerFn = [ctypes.CFUNCTYPE(ctypes.c_int, ctypes.c_char_p, ctypes.c_char_p, ctypes.c_char_p, ctypes.py_object),
                     _kinsol.KINPyRegister_KINPyErrHandlerFn]



def RegisterFn(py_callback, py_callback_tuple):
  py_callback_type, kinpy_register_fn = py_callback_tuple
  f_in = py_callback_type(py_callback)
  f_in_ptr = ctypes.cast(f_in, ctypes.c_void_p).value
  try:
    return kinpy_register_fn(f_in_ptr)
  except:
    raise ValueError("Unknown function type encountered")

def RegisterNumbaFn(py_callback, py_callback_type):
  f = py_callback.ctypes
  f_ptr = ctypes.cast(f, ctypes.c_void_p).value

  if py_callback_type == cfunctypes.KINSysFn:
    return _kinsol.KINPyRegister_KINPySysFn(f_ptr)
  elif py_callback_type == cfunctypes.KINErrHandlerFn:
    return _kinsol.KINPyRegister_KINPyErrHandlerFn(f_ptr)
  else:
    raise ValueError("Unknown function type encountered")




