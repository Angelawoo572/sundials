
                            ADDENDA TO 
       "User Documentation for IDA, A Differential-Algebraic Equation
            Solver for Sequential and Parallel Computers"
                          11 July 2002

Since the publication of the IDA User Documentation, a number of
changes have been made in the IDA package.  Those that affect
the usage of IDA are described below.

1. In the initialization routine PVecInitMPI of the parallel NVECTOR
module, the argument comm must be a meaningful communicator of type
MPI_Comm, and cannnot be NULL.

2. In the file llnltyps.h, the default for type 'integer' is now
'long int' instead of 'int'.  The usage instructions in the IDA User 
Documentation for changing this type are to be altered accordingly.

3. The NVECTOR module has been reorganized throughout SUNDIALS. For 
more information, see the file idareadme and the files nvecreadme, 
nvector.h, nvector_serial.h, and nvector_parallel.h in /sundials/shared/.
A serial IDA example must include 'nvector_serial.h' and a parallel IDA
example must include 'nvector_parallel.h'.

4. Both the serial and parallel versions of IDA must now initialize the 
machine environment through calls to M_EnvInit_Serial and M_EnvInit_Parallel
(a rename of PVecInitMPI), respectively. As a consequence, the machine 
environment argument to IDAMalloc (last argument) cannot be NULL anymore
in the serial version.

5. Vector accessor macros now have implementation-dependent names, such
as NV_DATA_S, NV_LENGTH_S, NV_Ith_S for the serial NVECTOR (nvector_serial.h)
and NV_DATA_P, NV_LOCLENGTH_P, NV_GLOBLENGTH_P, NV_Ith_P for the parallel
NVECTOR (nvector_parallel.h).

6. In order to avoid a conflict with the C++ function 'real', the type
names real, integer, and boole were renamed, as realtype, integertype,
and booleantype, respectively.  At the same time, the related
constants LLNL_FLOAT, LLNL_DOUBLE, LLNL_INT, LLNL_LONG were renamed
SUNDIALS_FLOAT, SUNDIALS_DOUBLE, SUNDIALS_INT, SUNDIALS_LONG, and the
file names llnlmath.* and llnltyps.h were changed to sundialsmath.*
and sundialstypes.h.
          
7. A new user-callable routine, IDAReInit, has been added (in files
ida.h and ida.c).  This routine is for reinitialization of IDA in the
setting of solving two or more problems of the same size.  Thus if
IDAMalloc has been called previously for a given problem, and another
problem of the same size is to be solved with IDA, then IDAReInit
should be called.  IDAReInit performs essentially the same
initializations and error checking as IDAMalloc, but does no memory
allocations, as the existing IDA memory can be reused in this
situation.  It may or may not be necessary to call the linear solver
specification routine for the new problem; see next two items.  The
use of IDAReInit is illustrated in the example programs iheatsk.c and
iheatbbd.c.  See ida.h for usage details on IDAReInit.

8. In the IDADENSE, IDABAND, and IDASPGMR modules, a new routine has
been written to reinitialize the linear solver module while allowing
the existing linear solver memory to be reused when a sequence of
problems is solved.  Following a call to IDAReInit for a new problem,
if there are no changes in the linear solver parameters, then no call
to the linear solver specification routine is needed.  If there are
changes in linear solver parameters, but these do not increase the
linear solver memory, then the linear solver reinitialization routine
-- IDAReInitDense, IDAReInitBand, or IDAReInitSpgmr -- should be
called to communicate the new parameters.  These routines reset the
link to the linear solver but do no memory allocations.  However, if
the parameter changes require an increase in linear solver memory,
then the main linear solver specification routine must be called (and
linear solver memory will be freed and reallocated).  For details, see
the appropriate linear solver header file.  The use of IDAReInit and
IDAReInitSpgmr is illustrated in the example program iheatsk.c.

9. In the IDABBDPRE module, a new routine has been added to
reinitialize this preconditioner module while allowing its existing
memory to be reused, when a sequence of problems is being solved.
Following a call to IDAReInit for a new problem, if the preconditioner
memory size is not changed, then a call to IDAReInitBBD should be
made, followed (possibly) by a call to IDASpgmr or IDAReInitSpgmr.
See idabbdpre.h for usage details on IDAReInitBBD.  The example
program iheatbbd.c illustrates the use of IDAReInit and IDAReInitBBD.
