                    Addenda to CVODE User Guide
                         Alan C. Hindmarsh
                            6 March 2002 


Since the initial release of CVODE in 1994, a number of modifications
have been made to the CVODE package.  The following list summarizes
these modifications and their impact on the usage of CVODE.

1. In order to avoid name conflicts when CVODE is installed in
certain PC environments, the file llnltyps.h has been modified.  
The constant name
   FLOAT      has been changed to  LLNL_FLOAT, 
   DOUBLE     has been changed to  LLNL_DOUBLE, 
   INT        has been changed to  LLNL_INT,    and 
   LONG_INT   has been changed to  LLNL_LONG.
With this modification, the instructions in the CVODE User Guide,
Chapter 7, on changing types real and integer are affected.  The macro
definitions given there involving the names FLOAT, DOUBLE, INT, and
LONG_INT must instead use the above new names.

2. The boolean data type "bool" defined in file llnltyps.h has been
changed to "boole" in order to avoid a conflict with the C++ type bool.  
Besides affecting various solver files that use this type, this name
change also affects the example programs cvkx.c, cvdemd.c, and
cvdemk.c that use a boolean variable.

3. The name of the VECTOR module (files vector.h, vector.c) has been
changed to NVECTOR (files nvector.h, nvector.c) to avoid a possible
conflict with user-defined files with these names.  This change
affects all user programs, which must include the nvector.h file.
   In addition, several kernels have been added to the NVECTOR module,
as needed to support related solvers written at LLNL for nonlinear
systems and differential-algebraic systems.  However, this addition
has no affect on users of CVODE.

4. Wrappers have been added to all header files to permit CVODE to be
used in a C++ application.  The wrapper has the form:
   #ifdef __cplusplus
   extern "C" {
   #endif
   ...
   #ifdef __cplusplus
   }
   #endif
and causes the C++ compiler to use C-style names when compiling the
function prototypes in CVODE.  Users with C programs are not affected.

5. In the file llnlmath.h, the definitions of MIN, MAX, ABS, and SQR
have been surrounded by #ifndef/#endif lines to avoid compilation
errors on some systems.

6. The generic SPGMR module, for the scaled preconditioned GMRES
method, has been modified (in files spgmr.h, spgmr.c) to correct the
names and descriptions of the scaling vectors (input arguments).
This has no effect on CVODE users, but is important if this module is
extracted for use separately to solve linear systems.

7. A new user-callable routine, CVReInit, has been added (in files
cvode.h and cvode.c).  This routine is for re-initialization of CVODE.
It is to be called if CVodeMalloc has been called previously for a
given problem, and another problem of the same size is to be solved
with CVODE.  CVReInit performs essentially the same initializations
and error checking as CVodeMalloc, but does no memory allocations, as
the existing CVODE memory can be reused in this situation.  It may or
may not be necessary to call the linear solver specification routine
for the new problem; see item 18 below.  The use of CVReInit is
illustrated in the demo programs cvdemd.c and cvdemk.c.

8. A number of minor internal corrections and improvements have been
made throughout the CVODE package.  These are not listed here, as they
do not affect the usage of the package.

9. A new module, CVBANDPRE (files cvbandpre.h and cvbandpre.c), has
been added.  This provides a banded preconditioner for use with the
CVSPGMR module.  It generates a banded approximation to the Jacobian,
with user-defined bandwidth parameters, using difference quotients.
From that it builds and solves a banded preconditioner matrix.  
See cvbandpre.h for usage details.

10. In addition to the CVODE User Guide and this Addenda, documentation
for CVODE also appears in the following article:
  S. D. Cohen and A. C. Hindmarsh, "CVODE, A Stiff/Nonstiff ODE
  Solver in C," Computers in Physics, Vol. 10, No. 2 (March-April 1996),
  pp. 138-143; also available as LLNL Technical Report UCRL-JC-121014,
  Rev. 1, Lawrence Livermore National Laboratory, August 1995.

11. A new optional input, iopt[SLDET], has been added to activate a
stability limit detection algorithm, which may be useful when using
the BDF method for a problem with mildly damped oscillations.
See the separate document stald.doc for details.

12. In the file llnltyps.h, the default for type 'integer' is now
'long int' instead of 'int'.  The usage instructions in the User Guide
for changing this type are to be altered accordingly.

13. The optional input ropt[HMAX] is examined on every call to CVode,
rather than by CVodeMalloc and CVReInit.  Thus its value can be
changed on every call to CVode, if desired.

14. The optional input iopt[MXNHIL] may now have the value -1, meaning
that no warning messages (t + h = t) are issued.

15. The CVSpgmr routine has two new arguments (the last two).  These
are for an optional user-supplied Jacobian*vector routine (jtimes),
and an optional pointer to a user-defined Jacobian data block for use
by jtimes, respectively.  Setting jtimes = NULL specifies the internal
(difference quotient) routine.  See cvspgmr.h for details.

16. Each of the routines that specify the linear solver to be used (when
iter = NEWTON) now has an int return value (0 for success, negative for
failure).  These routines now perform all malloc operations specific to
the linear solver, whereas previously these operations were done by a
call from CVode to the (linit) member of the linear solver module.
The return value of this flag should be tested before proceeding to
the CVode calls for a given problem.

17. If a user provides a new linear solver module, the specifications
for the various routines in the module have changed.  The user-callable 
routine returns a flag (as noted above), and the linit routine has one
less argument.  See cvode.h for details.

18. In the CVDENSE, CVBAND, and CVSPGMR modules, a new routine has
been written to reinitialize the linear solver module while allowing
the existing linear solver memory to be reused when a sequence of
problems is solved.  Following a call to CVReInit for a new problem,
if there are no changes in the linear solver parameters, then no call
to the linear solver specification routine is needed.  If there are
changes in linear solver parameters, but these do not increase the
linear solver memory, then the linear solver reinitialization routine
-- CVReInitDense, CVReInitBand, or CVReInitSpgmr -- should be called
to communicate the new parameters.  These routines reset the link to
the linear solver but do no memory allocations.  However, if the
parameter changes require an increase in linear solver memory, then
the main linear solver specification routine must be called (and
linear solver memory will be freed and reallocated).  For details, see
the appropriate linear solver header file.  The use of CVReInit and
these linear solver reinitialization routines is illustrated in the
demo programs cvdemd.c and cvdemk.c.

19. In the CVBANDPRE module, a new routine has been added to
reinitialize this preconditioner module while allowing its existing
memory to be reused, when a sequence of problems is being solved.
Following a call to CVReInit for a new problem, if the preconditioner
memory size is unchanged, then the reinitialization routine
CVReInitBandPre should be called, followed (possibly) by a call to
CVSpgmr or CVReInitSpgmr.  For details, see the file cvbandpre.h.
The example cvkxb illustrates the use of CVReInit and CVReInitSpgmr.

20. The NVECTOR module has been reorganized throughout SUNDIALS. For 
more information, see the file idareadme and the files nvecreadme, 
nvector.h and nvector_serial.h in /sundials/shared/.
A serial CVODE example must include 'nvector_serial.h'.

21. The serial version of CVODE must now initialize the machine environment 
through calls to M_EnvInit_Serial. As a consequence, the machine 
environment argument to CVodeMalloc (last argument) cannot be NULL anymore.

22. Vector accessor macros now have implementation-dependent names, such
as NV_DATA_S, NV_LENGTH_S, NV_Ith_S for the serial NVECTOR (nvector_serial.h).

23. The file llnltyps.h was renamed sundialstypes.h. 
The constant name
   LLNL_FLOAT      has been changed to  SUNDIALS_FLOAT, 
   LLNL_DOUBLE     has been changed to  SUNDIALS_DOUBLE, 
   LLNL_INT        has been changed to  SUNDIALS_INT,    and 
   LLNL_LONG       has been changed to  SUNDIALS_LONG.

To avoid conflicts with C++ methods the following type names have been changed:
   real    has been changed to realtype
   integer has been changed to integertype
   boole   has been changed to bolleantype

24. The files llnlmath.h and llnlmath.c have been renamed sundialsmath.h
and sundialsmath.c, respectively.