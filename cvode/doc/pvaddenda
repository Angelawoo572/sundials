                            Addenda to 
  "User Documentation for PVODE, an ODE Solver for Parallel Computers"
                  Alan C. Hindmarsh and Radu Serban
                          23 July 2002    

Since the publication of the PVODE User Documentation, several changes
have been made in the PVODE package.  Those which affect the usage of
the package (now known as the parallel version of CVODE) are summarized 
here.  Full details are available in the appropriate header files.

1. The preconditioner module PVBBDPRE has been modified, and the
routine PVBBDAlloc has three new arguments:
  mukeep, mlkeep = upper and lower half-bandwidths of the retained band
                   matrix approximation to the local Jacobian block.
                   These are in contrast to the arguments mudq, mldq
                   (formerly mu, ml) that define the difference quotient
                   procedure to calculate that block, and may be smaller
                   if the resulting preconditioner is more efficient.
  dqrely         = optional input; the relative increment in components
                   of y used in the difference quotient procedure.
                   Pass 0.0 to specify the default, sqrt(unit_roundoff).
                   (This argument was present in the May 1998 version of
                   PVODE, but was mistakenly omitted from the user document.)
The full call sequence to PVBBDAlloc is now:
  p_data = PVBBDAlloc(Nlocal, mudq, mldq, mukeep, mlkeep, dqrely, 
                      gloc, cfn, f_data);

2. The Fortran/C interface module FPVBBD was modified to accommodate
the new arguments described above.  The routine FPVBBDIN now has the
call sequence:
      CALL FPVBBDIN (MUDQ, MLDQ, MUKEEP, MLKEEP, DQRELY, IPRETYPE, IGSTYPE,
     1               MAXL, DELT, IER)

3. In the initialization routine PVecInitMPI of the NVECTOR module,
the argument comm must be a meaningful communicator of type MPI_Comm,
and cannot be NULL.

4. The central solver module CVODE now includes a routine, CVReInit,
which re-initializes PVODE for a new problem of the same size as one
already solved.  Its specification is:
  int CVReInit(void *cvode_mem, RhsFn f, real t0, N_Vector y0,
               int lmm, int iter, int itol, real *reltol, void *abstol,
               void *f_data, FILE *errfp, boole optIn, long int iopt[],
               real ropt[], void *machEnv);
CVReInit checks its inputs and initializes internal memory, but does
not allocate new memory, instead using the existing memory block.  Its
arguments are the same as those of CVodeMalloc, except for the first
one, which is the memory pointer previously returned by CVodeMalloc.
CVReInit returns SUCCESS = 0 if successful, or a negative int otherwise.
Following the call to CVReInit, the call to specify the choice of
linear solver must still be made, even if this choice is unchanged.

5. The Fortran/C interface package FPVODE includes a new routine,
FPVREINIT, to interface between a Fortran user and the CVReInit routine.
Its call list is the same as that of FPVMALLOC except that the first
argument NEQ is omitted.  The use of this routine is illustrated in
the example diagkf.f, which runs two cases --  with preconditioning
on the left, then on the right.

6. A new optional input, iopt[SLDET], has been added to activate a
stability limit detection algorithm, which may be useful when using
the BDF method for a problem with mildly damped oscillations.
See the separate document stald.doc for details.

7. In the file llnltyps.h, the default for type 'integer' is now
'long int' instead of 'int'.  The usage instructions in the CVODE
User Guide for changing this type are to be altered accordingly.

8. The optional input ropt[HMAX] is examined on every call to CVode,
rather than by CVodeMalloc and CVReInit.  Thus its value can be
changed on every call to CVode, if desired.

9. The optional input iopt[MXNHIL] may now have the value -1, meaning
that no warning messages (t + h = t) are issued.

10. The CVSpgmr routine has two new arguments (the last two).  These
are for an optional user-supplied Jacobian*vector routine (jtimes),
and an optional pointer to a user-defined Jacobian data block for use
by jtimes, respectively.  Setting jtimes = NULL specifies the internal
(difference quotient) routine.  See cvspgmr.h for details.

11. Corresponding to the new optional jtimes routine supplied to CVSpgmr,
the FPVODE Fortran interface package provides the option of supplying
a Fortran routine (PVJTIMES) for Jacobian*vector products.  As a result,
the specification of the SPGMR linear solver requires one of six routines 
to be called, depending on which optional user routines are supplied.
See the files fpvode.h and fpvbbd.h for details.

12. The routines CVDiag and CVSpgmr that specifies the linear solver
to be used (when iter = NEWTON) now have an int return value (0 for
success, negative for failure).  These routines now perform all malloc
operations specific to that linear solver, whereas previously these
operations were done by a call from CVode to the (linit) member of the
linear solver module.  The return value of this flag should be tested
before proceeding to the CVode calls for a given problem.

13. If a user provides a new linear solver module, the specifications
for the various routines in the module have changed.  The user-callable 
routine returns a flag (as noted above), and the linit routine has one
less argument.  See cvode.h for details.

14. In the CVSPGMR module, a new routine has been written to
reinitialize the linear solver module while allowing the existing
linear solver memory to be reused, when a sequence of problems is
solved.  Following a call to CVReInit for a new problem, if there are
no changes in the linear solver parameters, then no call to the linear
solver specification routine CVSpgmr is needed.  If there are changes
in linear solver parameters, but these do not increase the linear
solver memory, then reinitialization routine CVReInitSpgmr should be
called to communicate the new parameters.  These routines reset the
link to the linear solver but do no memory allocations.  However, if
the parameter changes require an increase in linear solver memory,
then CVSpgmr must be called (and linear solver memory will be freed
and reallocated).

15. In the FPVODE package (Fortran interfaces), all calls to the linear
solver specification routines now include an error return flag as a new
(final) argument.  This change corresponds to the changes described
above in these routines.  See fpvode.h for details.

16. In the FPVODE interface package, there are six new routines that
reinitialize the SPGMR linear solver module in the cases where the
linear solver memory can be reused.  See fpvode.h for details.  The
pvdiagkf example illustrates the use of one of the new routines.

17. In the PVBBDPRE module, a new routine has been added to
reinitialize this preconditioner module while allowing its existing
memory to be reused, when a sequence of problems is being solved.
Following a call to CVReInit for a new problem, if the preconditioner
memory size is not changed, then a call to PVReInitBBD should be made,
followed (possibly) by a call to CVSpgmr or CVReInitSpgmr.  The
example pvkxb illustrates the use of CVReInit/PVReInitBBD/CVReInitSpgmr.

18. In the FPVBBD interface package, there are two new routines that
reinitialize the PVBBDPRE and SPGMR modules while allowing their
existing memories to be reused, when a sequence of problems is being
solved.  Following a call to FPVREINIT, if the preconditioner and
SPGMR memory sizes are both unchanged, then a call to FPVREINBBD0 or
FPVREINBBD1 should be made in place of the call to FPVBBDIN0/FPVBBDIN1.

19. The NVECTOR module has been reorganized throughout SUNDIALS. 
For more information, see the file cvreadme, and the files nvecreadme,
nvector.h, and nvector_parallel.h in /sundials/shared/.  A parallel
CVODE example must now include 'nvector_parallel.h'.

20. The machine environment initialization routine has been renamed from
PVecInitMPI to M_EnvInit_Parallel.

21. Vector accessor macros now have implementation-dependent names, such
as NV_DATA_P, NV_LOCLENGTH_P, NV_GLOBLENGTH_P, NV_Ith_P for the parallel
NVECTOR (nvector_parallel.h).

22. The PVBBDPRE module has been renamed CVBBDPRE. As a consequence all
type names and user-callable routine names have been changed accordingly
(see /sundials/cvode/include/cvbbdpre.h for new names).

23. The file llnltyps.h was renamed sundialstypes.h. 
The constant name
   LLNL_FLOAT      has been changed to  SUNDIALS_FLOAT, 
   LLNL_DOUBLE     has been changed to  SUNDIALS_DOUBLE, 
   LLNL_INT        has been changed to  SUNDIALS_INT,    and 
   LLNL_LONG       has been changed to  SUNDIALS_LONG.
To avoid conflicts with the C++ function 'real', the following type names
have been changed:
   real    has been changed to realtype
   integer has been changed to integertype
   boole   has been changed to bolleantype

24. The files llnlmath.h and llnlmath.c have been renamed sundialsmath.h
and sundialsmath.c, respectively.
